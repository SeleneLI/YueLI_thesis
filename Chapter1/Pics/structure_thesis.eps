%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1710.000000 810.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.2 (Build 17C88) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1710 810
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1710 810
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /L put
dup 34 /I put
dup 35 /S put
dup 36 /P put
dup 37 /space put
dup 38 /A put
dup 39 /r put
dup 40 /c put
dup 41 /h put
dup 42 /i put
dup 43 /t put
dup 44 /e put
dup 45 /u put
dup 46 /R put
dup 47 /l put
dup 48 /a put
dup 49 /d put
dup 50 /W put
dup 51 /o put
dup 52 /k put
dup 53 /f put
dup 54 /m put
dup 55 /s put
dup 56 /C put
dup 57 /n put
dup 58 /g put
dup 59 /p put
dup 60 /U put
dup 61 /hyphen put
dup 62 /V put
dup 63 /w put
dup 64 /colon put
dup 65 /M put
dup 66 /y put
dup 67 /three put
dup 68 /N put
dup 69 /E put
dup 70 /v put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 40 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/three 3 def
/colon 4 def
/A 5 def
/C 6 def
/E 7 def
/I 8 def
/L 9 def
/M 10 def
/N 11 def
/P 12 def
/R 13 def
/S 14 def
/U 15 def
/V 16 def
/W 17 def
/a 18 def
/c 19 def
/d 20 def
/e 21 def
/f 22 def
/g 23 def
/h 24 def
/i 25 def
/k 26 def
/l 27 def
/m 28 def
/n 29 def
/o 30 def
/p 31 def
/r 32 def
/s 33 def
/t 34 def
/u 35 def
/v 36 def
/w 37 def
/y 38 def
/uni2B91 39 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec

95F3C056A6BEED95C85CB595890502B51007266C73E5302EB24DF01133E22A838631F2A86C32AE02C07C2DA797BDE258830C14E849E9B3EC06DA6D6451CC82D5997460DAC1969B03D9B494900A895DE6A9883760C75B78CA626806CBB3945C8C63E1C2B229C0BE2EA1B5C697CD3999DFD5618D88420D40FE8F9CE327E59B251C37012D7E7A6413A5215934F17AAE771266D3D909F787DFC2C723D919A551E9353F0B079CB2AFFCF3B1D8191772F15C3687BA551C91AF3B847625159C3D42508C982C78F73F1E28B227E68FE6903AFB43C2435551D561AA876F1A635C0872A21FA9B1954F54B065ED84C09A3D4D44E705B95A4FCF6239EF6B1E339CF93E73EECD425105FB4A012EEE88472B4BD270788AFF3956C825880B14FDBF25A2D88F407C8267F7E08EE842124CEFFBEDDA107B32F75EF89E0E589CD62F5316FE6E6B411713124E51D7D2E64769AE430ADB18C0E0DAF94A9451402CF7212304D98361E202ACD84D2C4E81DB865870FF9C3AF10AE443D16C84317C5AEE17CF856993986502E84A0BCCA04A23BAA4303C275BB317F885A95645611121C0FC726BFA4188E6C1DB4345C759FF0A8F9818F5A541D394F9BC7A00994F3CC783A1584AA6C8F4C3EBAB739706C3F284BBF63ED4DF49144760653F2FFFC25F07DFCA252AF2DA8936B03FA8E753C4227D1F0B6ABD2A427E426452BDA9488A328BE1330F5C3505DDBEA1C4FC22307A65770F64EFF8503E912BF5107CA8CC9B8AF9ADA7B067AE658ABB2C10437E5DF4C44F0387367B50DFB553A945C6389C5A38D402D625A319CA3F35C9FEA988D9C2EB479D4A1581EF990DC28122EEC3E9D97CAF1426FA43CE592352F2718BB8A6831174509F3485C70C47D6DB5D9888A4F9B20CBBF107C22AE9494B4B76EF61DBE5C9A001A92465FA6AB699740C4640DCA29127BA2903803D099B43151BEAA8312E752B75BA29CDA9744DE3A303D0BF2A4BD637B96815965856424A5062AF0EA798712D58285F726EB12E27A6B27A019F2FFAFC786980025F5199F48BB93F782BEDD168E942119A610D6C22294EF36FCED008FBC228B81622CA4C66BDBAF66D8A93339F4E787AF054B66746F0361FAD389CB5D12C4DA80F7CB49D324C77ACE1CFF221AED64AB46FD3DEF7557B6592FD3D0E4293E2449AA3707CC60E13E7298FE055138FF6C222D217FEE6D3816C8573EEE686A5A5B4BB9DB48910525030B2A544D3BCEF59B29C10E4687CC2FBE84EA0A0CAF999C43F0E0DA8422052766404711358A47DC4AE3FEFAE2AD8B16AF6D3E3E25F5C4187AAE9B87EE59B6A9E092DA27B50863299D22372BBB40BF2DAFE6D9CB78E60C6402AA78E942DBAA38DEDC3BECABBDF7444C0DC32997F11DD0E73A810FF33ED291963165B696E1F721D10862171E28206080FE7E08360830FBF4BDBBD34F14CEE1B85F418DBD8944EDE
0DA1BFDE0D5A7FD21EA708CD8B29883131C16C21325885A1BFB457EF87A393F8BD3C7C884268C76822952173514538FE06B2891FD096A5146326CFABAC1A70466BE76FD4B7124BC95A589D4249925E2CD12ECD778811BB1D3233645D891D610236DA3A6FA675A146C286D4D6ED6822A9B5303CA73FBC44D8A721ABE5DD6C8ADF9559E27918290870BA618C79A9962E1B12CF17D1AD777C1188E58B8CDCF1ABD2002B14904DC6BF1376979617C202C5D6B68723BC9ECB8A5DA341DA61C6032AEC023F5D87791E8CF4E89B6BFD2C750456D8B92DB2C65C1EEFFF644C8ED0AD45D9114A2C84C0E2D7B0CD19580675535172C651B90BDEF5E6AEA57524F626FE9DC599E27E5115AA2F42506922DCAC2801D8E521B64CACDA0D4F915C1477D4305913914FFFD24FDA0E3B078B7E441C2D58DE0D0E5C1DC7030B140B36DB5936A2F60610F1C1A7E3DD76E42544664A98C200324713C61249420AFAC00E1C035878948340DC44ABEC82F898C200314B742E8B84CFB20A59531A9412E9DA1D72C40E14B96AF00DF97DDB17A45E56655D1F6790C8572232EB2AD781DD2173551DE29F6FD1B5A2EC213CE786EAF6FCE19A075396B2B343E08071E61AD8401C92FBFAF2608B13541E82146464A4DC62315EED478B96F9ACB75FD209E196D9A9739FB2504DB6CFCCAF21A16E9839AA96D4208138866E185ADE4BC10ACF7A0275581D90CED81433C45952238C39DAD5D65CF452E37D7C1EC516954909A50894BC0EB759BF5170CBB8F33A78A3BDD722D4A29E6D73123473E13E411FCE0CCF8F65BE8F824C5B39A401FA0FB33AA8F0A8375A4F6829EF66C593C7470E2C8C6ECA5FE00F85E741DAADF9865A54D3B1888B4E41A87A61703C1A8967557C9444D9D8D3BC6A0D3F8013975D5F96DCD940F11FC36D398B54017BE245484E29AABA8BDECE3B3436015B1EB4FCE23EE37A61D1D9532AEBA13C0012694CB007E3015C9C439402070891E6203434F16D14EBA348C767BF6B303E228ECCE8000C6E048CC2F310C893C3B00BAF40200EDB9779D3333B00BA51C50AA0BFB2CB1639DD85B2B946AD3EC43864A005EC30D781B1B32F86C2A79A965B8572535B04AF6BC1A49694AB1921E3D1BF8292CC8346C123145499A703FB523725372BB281598AC18EDEC15518247387F13E49B752D5180A364F0662B2DB8263D53525945F164B4C13255651A58097CBDB464FAC56321684D9C60A04543138B272B92368AF061E885D06DBD0766D2733026627373DE7098C4B0A2798EA37832A5576B3ADDEF81950A0B018C81F25B5DF5C93EBCAE1A45E39F821593BB25C1E83FB00F889EB1F1B553F5E6E2438B179126A17F1E6BC354CE19E58B02BD681C3F7B9CCFCA49518E5CBBFE287C24DBC36D4BD56363D21BCB3D0FF15D7B3D4E554110A1CA5061EEB8251AD018F8911469861D8FD23
55E7ED16901847F46BFD4F4642580BC8057B5CDE975EC845852DA9BDF542D6F7C6F48D2FB9D0C6D6A4941B931AADFA0B7F033C4AAC56EFED61F67F9BCCAAC2861714F70113C81514E87F0D0770B9A90D665335F0F669CB96B7661D3C3EA78FC597B2CBBA22F63B2239FE91B264961474DC4AD4468BA82DD4F8B01B768A64F038EE94E2110A8A327F22136E6C8B0FCD6638553B0A1900C5DC8DC2A2D92181654600BC070DF255AF931DB0B26408AD424FB36465CB35DA805A10F73460488FC157D4E1FE4F9B969B73C893C25BE7470B12B5DE3E5A2DC1BD8FEC51D941F708B79131D4B196FE4E37E3DA7CF71A7753A47FCC2C6A4F52608E6C455A43120392DAAB75F43FC8F35294B0B173F87DC32B9E26E236F8BD35A29E4880425AF19114E89B7111C60104DEE18B31339B02D3477C3BB170E4A99DBEDB74BD7D392AC04D97572CA7E837EC83C099556CF388AEC467580BD2DEA121BA420106366EB659015DB59E4CD8DF00AA1C98A04447D50FA356204E0E600D015FAB3FF36D93880EF2830F2A9C59403951C81725208F676D8CBC6E57567ACD3FCA2FE0AB350A84B22334484F1910DDF9858F081CCE16A05661EE7009E8F339BE78E25E8B86129B6DDCD071761439E5AB0CAE6995776AEEAE1EB303BA7270829AEBA0F2034804044226256D8893E47FE2BB665C91A2014DCFA4141A5F726D9B7B74190846D3EECF2771265CAD9AA58BE2A62A38A2C12391265258370515384F02CCEC7C913582A5BBD02980C93A840F007E15AA0FC9B014ADF209ED477A315C9DBE3CE1D863771DE03644E4DC6DB0B8141C3D8067FE17B0D01CEDEA0343D2EE772BE8A25039D848078B8B0FC131F82A79B91BA3BBC889A92636432662C2862EA421608FAF1D1FA608D6CB8D1FD54D82136D2CB9DF5B06924BF40E213E2955778AE4B54B18BEEE87652679C5A9988AB1DF6AE70F89D2353014570796F4AA95B13E6D296A22C3EA807D3910548E4CA4859AB74DF24E9C3915EB40BDE5AA3A3B5D3C2BB01E0D4A785D9AFF72DC72042CFC288D90BA54F8A2B3C7ED696C54007CC50860402BD5DB4D626BCD9FC91418B405578EA19165FE8226AB5BED05C023EAC080D2ABA109016674A42B3F00BCA34CBA1D68046F54BC513EEC6D5A07CDA7F5CE1AF561B28C24B1FBFA0857235BC2D2315D1867622F5C8258FB444389E23A35C61771124D04F5F35B2C7674E9ED9FEF44A86DE42A7EA61936C4F1EDEA3983D570EB9101173E39B1B393EC9002570B1296ABBDA8AF71310458911C973F3AEE5D22E207EADEBD480415656BF4270BE21BD870CF4B4D5D8F05E14445A7EB120E94B1AA4B0A6D8F5EEA5CB7A4F1CF2632E6B1583E1E8E805E00C699900DFA37C09240DF7993BD362CA79598CD97C2A10C3176F59C7DE0D243E3DBD3C0CF5BA82170C1EA752350BFAC8D94E4C5C021

4B3647082ED89F5A5FEE59240D051BC2A5C3E937A48CA600B4B66E2F32F36750A0D15200AE7E339B3333869601EC346D497B83A5A94AA4199D720CBE399240605B7BC2073FECF59127BE2CA57C8D39A6C2C4D6D5D6F59E3F33577C07EC599D69AF06A760D3B99898700B8F23C7D477D0C0030EB42396ECBD0DCFD3028E1D62D51F13FA350729983C39EC6EBFDA47B7FDCE851C14F4CA54DA8B0212ABA9E0DD9E766189E28E84E84457DA73BD09389421ACD1644C328545D1220FFDEAC959BC58EDC4113989F9C6C66A8724BDA6D76E592FDC40125F17D818AD4E44ACEBA51E2AE8CAB22D07884760DB2FB24B1D3F16BA0377A756C622F5FE4012DB9289E97AD240BDB04C71F87A89CAA5E2CBA0CEB27205B3A963C91D5D3DA730C6FBC093778662383BA54AE305A5CA2072430228978E818CE4F541954012CBC3142952A25CC006632E77DD0087264C6A08FC0E377232F2DC4524C3D8368AB5D02705156F49A5320061BDE24BCE6DC201B27C17C6ACCDA7BC410CFF8B54D18E1BA730E7D8AF82E8F0842EECA64EC6253B9E9F0B0A2C226A328FF5503EE01454582BF69670DB34DB1A8555C23FE1BF363FD993696060BA3C9FA85B56D585040D682BAC79542CEBD278E1DF898F83D9E1ADCD786CED41C95C3BC997874B3AD78D14B23AD1C58B79A9065266233A0F44C496523311346844EC5E4A0D20A08ACFEC6A16C3F4C70FE64529B7C7F39A55344C425482AF5D2781A11427C7E67D33E5C449F46DA3D714940BB609D2956FE5DB0733B0072A176AE1C2F1D004CCD31E929965570A3C1AC98332D1E9E995F3B4638BFE980FB36DA4E4E03381D6EB4B5667C1EBBB2A7F67DF9097AB730F3054E7807D2556754F6022C3A2435C0406A22B177195AE551842BCFA3C6FCF79D01F2295E0CC1CF2C7CC21C92800FBB41096CAF6D3BD9D696EB6F98A50D89A1008ACBC8D476B46A9D999BECEB25BA3E97CF7EBFD1BBBB7D1FDDB35DF1F970D449DDA052C55237B4541AC4ACA17F8D537C501A33AA976812554BF9352A20341365FD594A52236FE3793782667BC1354130A0F64C25A9CC4FEA498EFA3EDB1DA98B34E4FEA810E6937F0DC893FF0CE2D63B3BB9E4C869FD29CF979ECC8DD78D2669B1DE23FC460FF20363439C6652F5096274767E3CD8D9C50E75E59F226E1C873934DCE62A8D7B47C2C093448D73DF9F5649F69BF5F610F32E22062DE4DF479A129DADBF6AEA22EEA48305C0EFBD73BFB4E9FF9B080298518CD80027858E2C63B7BB4B7E4EC90A97B9720A6657B68364AF28E9D3CDEE92CA125C1F50BD70749E51DD94748658336279BC5C0CC232E608B2F7D8797776694D080D53857E334624F42506000052EE7299A005BBB9710D7226100173F5A559F13DF71C2A756EF7279C5D54A36DD7A9C73AD9072F7B1321DC025CC2E70930ABDBEB3EA7E66
DA6054E2668FF2BEA8CD669EF366FE5D9C9F6051DE3F2EA313468F5425E624391A83552D3A5E583C5C43C696A07F9D7784D666D4B297D8B9CA6A94679620F7965E6533C22BCB2F8981FAA8264EB6FD2B1FB50F676A935DDE0A985E59D740454E6F768F1195C547AF9A5FBD26CFF738756A86FE86F5CADC305F245F9BA61734BA9B79DED441AEAED50552016D74FB22FB4A8724FB590BA052D701F7158825FC8B31CD3BB83E35727911BA25ED1107A6A9451F55C17F5E78F3BFD1814B213098375AA7810CB119AF29173D4DB13B11D26265D6414728C88F62B7F8B6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1710 810 rc
0 810 m
1710 810 l
1710 0 l
0 0 l
h
0 810 m
f
702 765 m
990 765 l
990 693 l
702 693 l
h
702 765 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
702 45 m
990 45 l
990 117 l
702 117 l
h
702 45 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 846 729 cm
/F1.1[ 35 0 0 -35 0 0]sf
-136.13251 12.510002 m
(!"#$%&'\(\)*+,\(+-',)[ 19.460000 9.065000 22.680000 22.680000 9.730000 22.680000 11.025000 18.795000 19.460000 7.770000 11.025000 18.795000 18.795000 11.025000 19.460000 11.025000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 621 m
1323 621 l
1323 468 l
360 468 l
h
360 621 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
360 189 m
1323 189 l
1323 342 l
360 342 l
h
360 189 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 841.5 544.5 cm
-146.78999 -32.489998 m
(!"#$%.,/0+,1%23'4)[ 19.460000 9.065000 22.680000 22.680000 9.730000 23.975000 18.795000 7.770000 18.795000 11.025000 18.795000 20.755000 9.730000 30.415000 20.090000 11.655000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 810 cm
845.12195 117 m
843.60724 179.10294 l
S
0 i
CM
843.41217 622.89941 m
846.60632 630.82391 l
840.60815 630.97021 l
h
843.41217 622.89941 m
f
0 J
0 j
1 0 0 -1 0 810 cm
843.41217 187.10057 m
846.60632 179.17609 l
840.60815 179.0298 l
h
843.41217 187.10057 m
S
1 1 1 sc
CM
378 558 m
540 558 l
540 486 l
378 486 l
h
378 558 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
378 252 m
540 252 l
540 324 l
378 324 l
h
378 252 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 459 522 cm
-74.864998 12.510002 m
($/0+53'67)[ 22.680000 7.770000 18.795000 11.025000 10.360000 20.090000 11.655000 29.855000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
1116 558 m
1305 558 l
1305 486 l
1116 486 l
h
1116 558 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
1116 252 m
1305 252 l
1305 324 l
1116 324 l
h
1116 252 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1210.5 522 cm
-86.852501 12.510002 m
(8\)0//,9:,7)[ 25.270000 19.460000 18.795000 7.770000 7.770000 18.795000 19.460000 20.090000 18.795000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
576 558 m
855 558 l
855 486 l
576 486 l
h
576 558 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
576 252 m
855 252 l
855 324 l
576 324 l
h
576 252 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 715.5 522 cm
-130.00751 12.510002 m
("6;/,6,9+0+*397)[ 9.065000 29.855000 20.755000 7.770000 18.795000 29.855000 18.795000 19.460000 11.025000 18.795000 11.025000 7.770000 20.090000 19.460000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
891 558 m
1071 558 l
1071 486 l
891 486 l
h
891 558 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
891 252 m
1071 252 l
1071 324 l
891 324 l
h
891 252 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 981 522 cm
-83.282501 12.510002 m
(<7,=\(07,7)[ 25.270000 17.500000 18.795000 13.615000 18.795000 18.795000 17.500000 18.795000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 189 m
495 189 l
495 72 l
72 72 l
h
72 189 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
72 621 m
495 621 l
495 738 l
72 738 l
h
72 621 m
S
0 i
1 0 0 -1 283.5 130.5 cm
-136.41251 -7.9799957 m
(!"#$=>*,?7@%!"#$%)[ 19.460000 9.065000 22.680000 22.680000 13.615000 21.385000 7.770000 18.795000 26.530000 17.500000 9.730000 9.730000 19.460000 9.065000 22.680000 22.680000 0.000000 ] xS
-197.75 33 m
(A0;;*9:%#B7+,6%A39*+3')[ 30.485000 18.795000 20.755000 20.755000 7.770000 19.460000 20.090000 9.730000 22.680000 17.500000 17.500000 11.025000 18.795000 29.855000 9.730000 30.485000 20.090000 19.460000 7.770000 11.025000 20.090000 0.000000 ] xS
1 1 1 sc
CM
1197 378 m
1638 378 l
1638 270 l
1197 270 l
h
1197 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
1197 432 m
1638 432 l
1638 540 l
1197 540 l
h
1197 432 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1417.5 324 cm
-181.23 -7.9799957 m
(97=C%"6;/,6,9+0+*39%35%)[ 19.460000 17.500000 13.615000 19.460000 9.730000 9.065000 29.855000 20.755000 7.770000 18.795000 29.855000 18.795000 19.460000 11.025000 18.795000 11.025000 7.770000 20.090000 19.460000 9.730000 20.090000 10.360000 0.000000 ] xS
-147.80499 33 m
(!"#$%091%!"#$=AD)[ 19.460000 9.065000 22.680000 22.680000 9.730000 18.795000 19.460000 20.755000 9.730000 19.460000 9.065000 22.680000 22.680000 13.615000 30.485000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
630 378 m
1062 378 l
1062 270 l
630 270 l
h
630 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
630 432 m
1062 432 l
1062 540 l
630 540 l
h
630 432 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 846 324 cm
-121.205 -7.9799957 m
(&77,77*9:%!"#$%)[ 22.680000 17.500000 17.500000 18.795000 17.500000 17.500000 7.770000 19.460000 20.090000 9.730000 19.460000 9.065000 22.680000 22.680000 0.000000 ] xS
-200.60249 33 m
(*9+,'?3'4*9:%;,'53'609\(,%)[ 7.770000 19.460000 11.025000 18.795000 11.655000 26.530000 20.090000 11.655000 18.165000 7.770000 19.460000 20.090000 9.730000 20.755000 18.795000 11.655000 10.360000 20.090000 11.655000 29.855000 18.795000 19.460000 18.795000 18.795000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
108 378 m
450 378 l
450 270 l
108 270 l
h
108 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 810 cm
108 432 m
450 432 l
450 540 l
108 540 l
h
108 432 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 279 324 cm
-142.9225 -7.9799957 m
(EF0/-0+*39%35%!"#$%)[ 21.385000 17.500000 18.795000 7.770000 19.460000 18.795000 11.025000 7.770000 20.090000 19.460000 9.730000 20.090000 10.360000 9.730000 19.460000 9.065000 22.680000 22.680000 0.000000 ] xS
-132.5975 33 m
(A0;;*9:%#B7+,6)[ 30.485000 18.795000 20.755000 20.755000 7.770000 19.460000 20.090000 9.730000 22.680000 17.500000 17.500000 11.025000 18.795000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 810 cm
646.34692 342 m
425.97223 428.3869 l
S
0 i
CM
418.52405 378.69342 m
427.06711 378.82004 l
424.87735 384.40619 l
h
418.52405 378.69342 m
f
0 J
0 j
1 0 0 -1 0 810 cm
418.52405 431.30658 m
427.06711 431.17996 l
424.87735 425.59381 l
h
418.52405 431.30658 m
S
1 J
1 j
0.60000002 i
843.06122 342 m
844.69598 422.10205 l
S
0 i
CM
844.85919 379.8996 m
847.69531 387.95914 l
841.69659 387.83673 l
h
844.85919 379.8996 m
f
0 J
0 j
1 0 0 -1 0 810 cm
844.85919 430.1004 m
847.69531 422.04086 l
841.69659 422.16327 l
h
844.85919 430.1004 m
S
1 J
1 j
0.60000002 i
1041.3368 342 m
1267.1931 428.46063 l
S
0 i
CM
1274.6643 378.67926 m
1268.2656 384.34109 l
1266.1206 378.73764 l
h
1274.6643 378.67926 m
f
0 J
0 j
1 0 0 -1 0 810 cm
1274.6643 431.32074 m
1268.2656 425.65891 l
1266.1206 431.26236 l
h
1274.6643 431.32074 m
S
1 J
1 j
0.60000002 i
280.25583 540 m
281.90936 611.10266 l
S
0 i
CM
282.09537 190.89949 m
284.90854 198.96707 l
278.91019 198.82758 l
h
282.09537 190.89949 m
f
0 J
0 j
1 0 0 -1 0 810 cm
282.09537 619.10052 m
284.90854 611.0329 l
278.91019 611.17242 l
h
282.09537 619.10052 m
S
ep
end
%%Trailer
%%EOF
