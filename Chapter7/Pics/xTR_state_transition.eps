%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1116.000000 342.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1116 342
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1116 342
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /W put
dup 34 /a put
dup 35 /i put
dup 36 /t put
dup 37 /space put
dup 38 /f put
dup 39 /o put
dup 40 /r put
dup 41 /S put
dup 42 /M put
dup 43 /R put
dup 44 /hyphen put
dup 45 /n put
dup 46 /v put
dup 47 /k put
dup 48 /e put
dup 49 /d put
dup 50 /p put
dup 51 /q put
dup 52 /u put
dup 53 /s put
dup 54 /P put
dup 55 /l put
dup 56 /y put
dup 57 /I put
dup 58 /U put
dup 59 /c put
dup 60 /h put
dup 61 /N put
dup 62 /g put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/I 3 def
/M 4 def
/N 5 def
/P 6 def
/R 7 def
/S 8 def
/U 9 def
/W 10 def
/a 11 def
/c 12 def
/d 13 def
/e 14 def
/f 15 def
/g 16 def
/h 17 def
/i 18 def
/k 19 def
/l 20 def
/n 21 def
/o 22 def
/p 23 def
/q 24 def
/r 25 def
/s 26 def
/t 27 def
/u 28 def
/v 29 def
/y 30 def
/uni2B91 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C931313987B77B87D3A530FEA8139219B56B58888BA339BA81F732C1729802DA479E44F824526137EEB725F9A8277E11FB440D7432A2FB2F8DA2BCCD532B90735191BAC4AF35F550E035C4C8C1BAC2797ED4C005EE32CFA64F85F936DA558E85ADDE29C5BBD37B206D48034FEBF864620FF8E3D7F655FB069F33E7028A89A05626F6A75FBCC9846A87342B96437897B2D185532F26331E8373ED60ED6A0D29BC217CB6F23568823FB38956D64D069E951BEC9B7F7A2FB5ADF1DB50DABA8CAE3257A5C054D3EB84309099DA505C5D26E7D1B4C6FE265DDE228717B07F537F6F7423AE0F4FD2852FF7BAD29055FCBF60AD1930B863B41E5243140D1FEBB6D8AAD5143FBF271B2B1848DC61C8325EAC0A120DA365014E36244635B90AED482767140911FA05E6DE14E4C556C567AC3B622BEA86ABDC8A67366933CB312326ABE14B5D93B212DD55063ECCC113CC2816BFCB4122F048FFD70022870B69974A6DB76FD35C055C226D2D3ED2DC840B0D147AEFB1ED5D940FBED8EE50FAECA01F8D824874013446A27D144C7FAF60CBFB79FD6E2AD6AEB5CCD8254BB5374819926C070041DF671988220E0DBC0C7E2A8E6A0BF75122AB2744572FD03AFD840F8B9119669DCE2BDED77D52A096647A7B7D911EBC55D5F4BC159CDE642D9FC524CBC4EBFC91314B5B1F6E4894F00BF032902443C670B90C47BE6EF3A978FD2D995A90A30208CF1D2A87CEF854B02F43274452CF7536C7953E4C01ACF61428C62A36B3B5BF662
A11D516C246CD3104E4BEE3AED5DBDA99D8CFF74EADF4C1852CE88994DA3013733B1CF2F4200F8151D7F7236BD88BFCF260F7BBAF96336A1B8D7124C55EC9D963850179CB9581196732052017E31ADE9106BE6AE663C1559DAA7E37FE17E9FC9125D115292041A54A8760CFB690589B65EDC8EB50BADE2E604C510611D1498BA07DE30375EC52D65099A519789F99DD0AAB10A02AF14AC9C29665F4E6E105A58178CFCB1338857935CAF34CB8581B4F3238F88CC792AC9E87AF33A364A266E7D91889D7E9A3E4D4F773BC28FFCE35CFF5071E904BCEE23187C88B3DDA7D2D2DCB26B06187515E2531F5A751892A6CAE8F4302A3F96440002D327910415AC14FD9BE3BF5A03DC14C2B535C0B615663817F54DA8F31336579B9D7E0621FF7D53B71DF0E8E86310336476E94F54B3A38EB0ACCF69663AFB990032E71FA40E2D199C2155652DFF9B5F6248CEE893709EF14DE213D87D56EA4C3BD06DD841292FD268927730805384B36761C09110CBDF83BEFA114EDE88054BD253E08712D4B4D488689E2F4E18608AB030C6C012F0B4647C65D5102B98508CA5DA765D1855B22FDFCE3BB5CF06FE7185489BBE84F95D3146BF179943212A385A186887D5C486D160B70B5BDEF0D1BB8E82B1C16EA8774A009BF83FD1F423547187337006FDE9C0454584EC9F5ABB4DB56141DDF9D90772947BAA52A873CADE6E6BDAB7F901C5091B2C5824331BA5B2130F269EA2F0FC54B2F549177ADBC329DDFA74700D0A831384D19CE77F18E8B673C2FA0A2F0CBAABAB171C67AAC59EE39267082E659C62EA4A341F25C8B23120C3577DAC1FD6AA550E8763AE3BD72F2B85BD9C1EABEDA81225B8B57B434CE17A475DBA7C58858CD1B9E30BFE2B4C203AFAA5BD157304C05B2638FF79681764D48175BB0DE286A5AB543CBDA414C05AC15B7BB2E88B3FBA6106F50FD9DC699F28760E0279CB09B24662474A103E531CB2CECFACB4909D7D423D86B819470A722570BB3B2313101BA6247542603902B3111050BD3AAD31C12638D2846018E3C06FED46EE36EBC4C178F3EA809DB7692F5304646BAC958E3FB7F5D62C89748E02EC2EE1C1660C8BC1AB2F96D205B564598885E78761BE0FC58BD70EEDD8508438F6E914385C8BB0B2133056A795A8621AE7EC60E8E1AE1785B3A5704C7A66EAD0065B8057564B20E78DA3DB4D906671C3DD15713100233C1057ACA180440EBA2076766394920FCFA2BC1B3D542EBC0677AFFB0DFC56A1FDB15A7A85782FDD80E14A757156A5155A9C8011C7DB05E5A85C4B977C121145FC9A4661386180E0046C574184C072225F7C1CB695729A477AA7D285767791C5C460B50B43025946D29A293F584ADC2FDF86F02D37B3AC99F0478CFEB489EA5119A9AD534AAECAB925B9CB9875E4B7171ACA9478A79AFB48432512352DA1FCA9D3AEF35C
055A8783DC808C9BC0B95E6AF93383D674B19C301DA1E055533273A1F0BB896249B145AD2C0F8EEB11D75C3987F37E7B73DD274A59751729AF23336DB96E84740DF187EB724599285CCF5FB20D775CBDECCC1D007DDE53655E1CBE08D6122C749F1E80AF139124075BA0B6357AA0BDB51B9643AFEBD5175202B5A4F6EBE76E3D6658C4B3912AD1AE2BF2040F0373694FC87FBD6B687C29DFF0A1B6E3C761577A9C27C5C9BAA60A46A6BF4B2265B4551049CF2C5220A45FE850EA504ACAFF14BD6C07C33CB17E1E400CBEFFD8060D4938680B4D6F6072FA7F0E7041268383E441401F985D01E13DB77976A80C0DDC40FC2E864A953324A6E129C95EC21A292A7D7CA4AB11F307AFBD5802535AFDBC384E5473F1AB5E889A0C10D7E9DB50AE6231BC9E39F644FDA30E081964828F636B33FDA08FF6A0EACE3076F87D0E6FF1CB7B306B2846FC50F706899A7AB85A580B13633ACA7170D45E923683522728CE649E9529847ED92870217FE05232CFD2673CD84AC0F3E4DE6202DF1233D5EC64901604F26FBA6AE721170CA087F4D3049F44ECC27F7B28B4A836987CD5966698E39A337B90AF41BAC6A414E5006A7DD9424B28CACF32B1F0569F00E76B0553FA21F99CC1B40A21A987292895BBF941984EB41915B8B54C11F14D87113B42C968E9EE9111EAA38D36959C2F5BB902442560BE6A961E7F5F3676A93BFE93BDCB3B531BC88B8A52F0AFE2768E4AD1AEB6F4FED200F72D74A0047832C9484FC09AF4187D6DE08CED0747D58BACF7F4104897E1EED9CDDF7D6C658ED6181A36291625715C500C6BADECEF053B975EA68D66C97FB34C6D176AA17C80C98F0B6F1B7D811DD6451DE0754C44DCC07126D9070544570107B0B96A78763288C93F0C8E880F8B43097098DC48590AEFE7EF570A09026D06959F76EE3383F6BA521705BBD320ED140543EA06E8963B686C9B1EB88C0064A12A20D4033FC49B220C22BF53D554481EF94E7CE778E8A81FE688B7441AFE7B1BCB2C66261163A74F1D84F9A8F36783A211DAD99B3EE18A22552A7E1627916EBE745948606FA333DB814F9606609C4AC6DDCC0913A50BC218C87FAEF0EC991A67F2F34A2FA8333FB901731A6DE89ED7AE727051443B30267B9B3673CD08B2D1DA92EAAD9368E69BEC288E5556211FDDD272CC7CFC4382708C4D6148B1726438A1FF040A015489E673EC2F011667BE049ADF1E61986BA462E74AF2E2655DC52D289044570EB59798FC4A0DC9B4D539768282A0298A2F8529E08848F57C3852E53A069DD0F4A7826D1398BE828A993AEB650352A1CA26772771A9425080C4A9C97C46138F488FAAC48A00320CFC9A204540091BD35264784190BEBF3B562876488374D9DEB6ED7DAF4AA871D6C9F3F0D0798CF1C993BC805806115F1F15A457995EEB562F7214765DB1AD72B1D10D578779
F55DFF0829F84F14DAEC41E7CC36572CAA98AB1F1A73D57894595F772F4A411B4580420A3CE04CA6EA65F298CBDE993359A81C69BD1AE61B4CB5B441287B5DD7084EC8F182268843E54A046C20AA6EDFBBB708B331304664398E89068985CD8740DEE2AE2805E9AE6A4E6E95E8F6C61C8A33D91F219BD2C678F0168F1F0BA3745D1DBF95599BA5AAD963D6EF1A9671FF81D69CE8C64828689605628098DAD9F15B49921B9378AC5021D22859136FD04C5115542A9BB8CBB12669BD63DE30630B7FFEB9148FD29ED845BCCE2E63F471C8C726CFBDDAABADB5DB83B568BEE2CF67E68C8FABC3DA1EABD389BA10979FDE45960612E95B8DA3BABD5E4F70FBD859B602997BE516181C3ACB402055CAFBF0FD6107A4857C0300759347668B29F7BA36D7CB9D3BD9B1676178CD8C241EACB623A24A45C6F88DE8425E803B2D534F9C718A095C00196643D0D90BF3654F723C8E11F7F211D0C5E15F84C2E31EBB4DC68EF9699BCD966CF3F682017E39B80A3E8D94AB661A0794A3393DE5DAE751DEB8FF88F36ADFA5A9E245B8C9927A937C9800CFAF808B956D013FD8AE470CA7C322E8CB81DDA9B71E30C0BF2E3ADC3EC8FE435C863B6F66D18B8C822318FA15264C0444138008C7FDE537CAD6F181FD5397FBEC6F66F864658E9E88A65372A82F916B6C3E38DC35B906749C3917133D64A7613BEACE57CED0E82216A2BF175A3C208DBA4A5A49E204A91D61227232182E79F22163FF689166671084FA3A4F98BB508C144F0485C3066631FCA5E0A3BD81FB2D4777FCA0E2B8EB33A2A2B3A19132F035BA8CC00F92BA2204EE63592C41549DD6B205ABDF77CDAD29DA8B3A8032F3B9671B80DFBC57076325247A11CCA9AD18B38743605BFE33F48A7CD49E6B5E90E5FD8FA76B26EDCFE1FBF5F89C7A1C22A5CB410F722B802E2EB0BC28ACC7F5147D493D65F5235AF8DAE43D1C4649447A362085588629055EC5A8C9D4706BA4E8F2E6A257F44778E026778AD79E08E14F6B0CC0E10E6C8C8B88401F0D2E3A962FA800BE40BBCAF3A7D882A81A911E8BE187C05C0245D778D7D973292529916BD4DA86E18878502C7A9A9C31B20D8B7B37A294BE162BCE9574D0FF192C0C74A7C224524DAA2D7F9034A69299E8E928636BDDE3EF98E558919128EDD491E1A764C47FF977B0D3166C7B3BFADEA06DB5F82625D897CAC55B4B8610CCFEFE9DA0C88D47D7740B0BE4EB9E73D2F8E71EE147BAF3C169FA386759D045C9275047D2213AF72B6FDEE53EF310A1ACA021B27B9ACBEE14A6C196899CD75C0B2AC4D0C472615C699522BA09589C882FC346159772D4467E4E450E81131F7A1FDD93C19FC97F2806E9D3BFC642DCD7C49E55C3DE11CC85B7238B3C90C225DE48B3EF7D09F92C64B2A0CB708BF3609E0A09524D608BB7307EAE9D7F620B4CD8F2B8F27D5FBFA17E93

06C26AA0AEE67A2AD891B57E038EB996D7A438FCCD28681717637EB76DE1C970505BF67145DC0459CD45CDE920A3A4AB9DCDBB9A9449D1B33845C5A521BE97055BCDD78D56042E382CFB8E6FA0B5919FADE68CE07B186B279EB1F90AA1AB163EE4458B3BFD3B82D70C2D2556C4DA1F63662B643F0D1BFDE3ADBBA3E639E240BA5F79B31D6439CA440ACC6FE08ACCC6344423F3841C4FED8B9E31BCD64A3BC998B2061F5F23F55C342AD2446C52ACA16425E59DD912D2DA386BFAA9BF6F9AFA5B79D4ACC4730B9D9FEF19675EDD43862A8E02ABE6FFF0916DD5E937B62E2CFB5969B2573E306B202DF1C8508CB128AFD6F46792B7E610F9362B53F6D723BA23C4B5299A6418783F8B5AC4D238855DCEE5097A3C5628F7A79D2D2CE3DFF0FE1DFDBA276F7648AACAD5AE843E31A051C45144C36C5847D0D6B65B7B3E10D63ED384463547AF4F1EBD79EAF1544109435B5EF31A02890D345892E08CFF0914A12FEEA9ADA3010ED0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1116 342 rc
0 342 m
1116 342 l
1116 -209 l
0 -209 l
h
0 342 m
f
36 144 m
252 144 l
252 72 l
36 72 l
h
36 144 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
36 198 m
252 198 l
252 270 l
36 270 l
h
36 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 108 cm
/F1.1[ 16 0 0 -16 0 0]sf
-27.552 -3.947998 m
(!"#$%&'\()[ 14.224000 8.592000 3.552000 5.040000 4.448000 4.736000 9.184000 0.000000 ] xS
-103 15.5 m
(\)*+,#-.'/01%*"2,+03405$)[ 10.368000 13.936000 10.960000 6.224000 3.552000 8.896000 8.000000 9.184000 8.304000 8.592000 9.488000 4.448000 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 288 m
216 288 l
216 216 l
72 216 l
h
72 288 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
72 54 m
216 54 l
216 126 l
72 126 l
h
72 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 252 cm
-27.856001 -3.447998 m
(6\(02"\(0%)[ 10.368000 5.040000 8.592000 9.488000 8.592000 5.040000 8.592000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 279 m
432 279 l
432 225 l
360 225 l
h
360 279 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
360 63 m
432 63 l
432 117 l
360 117 l
h
360 63 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 396 252 cm
-12.888 5.776001 m
(9170)[ 4.144000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
612 288 m
756 288 l
756 216 l
612 216 l
h
612 288 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
612 54 m
756 54 l
756 126 l
612 126 l
h
612 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 684 252 cm
-27.552 -3.447998 m
(!"#$%&'\(%)[ 14.224000 8.592000 3.552000 5.040000 4.448000 4.736000 9.184000 5.328000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
900 288 m
1044 288 l
1044 216 l
900 216 l
h
900 288 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
900 54 m
1044 54 l
1044 126 l
900 126 l
h
900 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 972 252 cm
-50.231998 5.776001 m
(:21"$0%;";<0)[ 11.552000 9.488000 9.488000 8.592000 5.040000 8.592000 4.448000 8.592000 8.592000 8.592000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
612 144 m
756 144 l
756 72 l
612 72 l
h
612 144 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
612 198 m
756 198 l
756 270 l
612 270 l
h
612 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 684 108 cm
-27.552 -3.447998 m
(!"#$%&'\(%)[ 14.224000 8.592000 3.552000 5.040000 4.448000 4.736000 9.184000 5.328000 0.000000 ] xS
-40.152 15 m
(*"2,='$#&8)[ 13.936000 8.592000 9.488000 6.224000 11.552000 9.184000 5.040000 3.552000 4.736000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
360 90 m
225.89999 90 l
S
0 i
CM
217.89999 252 m
225.89999 249 l
225.89999 255 l
h
217.89999 252 m
f
0 J
0 j
1 0 0 -1 0 342 cm
217.89999 90 m
225.89999 93 l
225.89999 87 l
h
217.89999 90 m
S
/Cs2 SC
0 sc
1 0 0 -1 289.87891 252 cm
-45.632 -3.447998 m
(+0;02$#'-%'&%)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 4.736000 0.000000 ] xS
-48.903999 15 m
(*"2,+03405$)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
432 90 m
602.09998 90 l
S
0 i
CM
610.09998 252 m
602.09998 255 l
602.09998 249 l
h
610.09998 252 m
f
0 J
0 j
1 0 0 -1 0 342 cm
610.09998 90 m
602.09998 87 l
602.09998 93 l
h
610.09998 90 m
S
/Cs2 SC
0 sc
1 0 0 -1 522 264 cm
-69.800003 5.776001 m
(\)0-1%*"2,+03405$)[ 10.368000 8.592000 8.896000 9.488000 4.448000 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
756 90 m
890.09998 90 l
S
0 i
CM
898.09998 252 m
890.09998 255 l
890.09998 249 l
h
898.09998 252 m
f
0 J
0 j
1 0 0 -1 0 342 cm
898.09998 90 m
890.09998 87 l
890.09998 93 l
h
898.09998 90 m
S
1 J
1 j
0.60000002 i
684 198 m
684 135.89999 l
S
0 i
CM
684 214.10001 m
681 206.10001 l
687 206.10001 l
h
684 214.10001 m
f
0 J
0 j
1 0 0 -1 0 342 cm
684 127.9 m
681 135.89999 l
687 135.89999 l
h
684 127.9 m
S
1 J
1 j
0.60000002 i
612 234 m
261.89999 234 l
S
0 i
CM
253.89999 108 m
261.89999 105 l
261.89999 111 l
h
253.89999 108 m
f
0 J
0 j
1 0 0 -1 0 342 cm
253.89999 234 m
261.89999 237 l
261.89999 231 l
h
253.89999 234 m
S
1 J
1 j
0.60000002 i
144 198 m
144 135.89999 l
S
0 i
CM
144 214.10001 m
141 206.10001 l
147 206.10001 l
h
144 214.10001 m
f
0 J
0 j
1 0 0 -1 0 342 cm
144 127.9 m
141 135.89999 l
147 135.89999 l
h
144 127.9 m
S
1 J
1 j
0.60000002 i
431.93832 121.25634 m
612 207 l
S
0 i
CM
424.71542 224.18312 m
430.64853 218.03508 l
433.22812 223.45224 l
h
424.71542 224.18312 m
f
0 J
0 j
1 0 0 -1 0 342 cm
424.71542 117.81687 m
430.64853 123.96493 l
433.22812 118.54776 l
h
424.71542 117.81687 m
S
1 J
1 j
0.60000002 i
612.06171 193.74365 m
432 108 l
S
0 i
CM
619.28455 144.81688 m
613.3515 150.96492 l
610.77185 145.54776 l
h
619.28455 144.81688 m
f
0 J
0 j
1 0 0 -1 0 342 cm
619.28455 197.18312 m
613.3515 191.03508 l
610.77185 196.45224 l
h
619.28455 197.18312 m
S
/Cs2 SC
0 sc
1 0 0 -1 388 120 cm
-38.528 5.776001 m
(\)0-1%\)*+)[ 10.368000 8.592000 8.896000 9.488000 4.448000 10.368000 13.936000 0.000000 ] xS
1 0 0 -1 252.0625 180 cm
-100 -3.447998 m
(+0;02$#'-%'&)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 0.000000 ] xS
-100 15 m
(\)*+,#-.'/01%*"2,+03405$)[ 10.368000 13.936000 10.960000 6.224000 3.552000 8.896000 8.000000 9.184000 8.304000 8.592000 9.488000 4.448000 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 0 0 -1 447 167.5 cm
-45.264 -3.447998 m
(+0;02$#'-%'&)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 0.000000 ] xS
-34.304001 15 m
(*"2,='$#&8)[ 13.936000 8.592000 9.488000 6.224000 11.552000 9.184000 5.040000 3.552000 4.736000 0.000000 ] xS
1 0 0 -1 588.71497 201.5 cm
-49 -3.447998 m
(\)0-1)[ 10.368000 8.592000 8.896000 0.000000 ] xS
-49 15 m
(*"2,+0>#5$0\()[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.184000 3.552000 8.000000 5.040000 8.592000 0.000000 ] xS
1 0 0 -1 826.41406 252 cm
-45.632 -3.447998 m
(+0;02$#'-%'&%)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 4.736000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
144 54 m
144 27 l
387 27 l
387 53.099998 l
S
0 i
CM
387 280.89999 m
390 288.89999 l
384 288.89999 l
h
387 280.89999 m
f
0 J
0 j
1 0 0 -1 0 342 cm
387 61.099998 m
390 53.099998 l
384 53.099998 l
h
387 61.099998 m
S
1 J
1 j
0.60000002 i
972 54 m
972 27 l
675 27 l
405 27 l
405 53.099998 l
S
0 i
CM
405 280.89999 m
408 288.89999 l
402 288.89999 l
h
405 280.89999 m
f
0 J
0 j
1 0 0 -1 0 342 cm
405 61.099998 m
408 53.099998 l
402 53.099998 l
h
405 61.099998 m
S
/Cs2 SC
0 sc
1 0 0 -1 267.53143 315 cm
-18.672001 -3.447998 m
(\)0-1%)[ 10.368000 8.592000 8.896000 9.488000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
1 0 0 -1 759 180 cm
-69.800003 5.776001 m
(\)0-1%*"2,+03405$)[ 10.368000 8.592000 8.896000 9.488000 4.448000 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
