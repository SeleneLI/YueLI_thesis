%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1080.000000 342.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1080 342
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1080 342
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /W put
dup 34 /a put
dup 35 /i put
dup 36 /t put
dup 37 /space put
dup 38 /f put
dup 39 /o put
dup 40 /r put
dup 41 /S put
dup 42 /M put
dup 43 /R put
dup 44 /hyphen put
dup 45 /n put
dup 46 /v put
dup 47 /k put
dup 48 /e put
dup 49 /d put
dup 50 /p put
dup 51 /q put
dup 52 /u put
dup 53 /s put
dup 54 /P put
dup 55 /l put
dup 56 /y put
dup 57 /I put
dup 58 /U put
dup 59 /c put
dup 60 /h put
dup 61 /N put
dup 62 /m put
dup 63 /g put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







B800112F1BB9001100083E59B800014558B800152F1BB9001500083E59B800014558B800052F1BB9000500063E59BA000900050011111239B9000C0002F441110007000C0017000C0027000C0037000C0047000C0057000C0067000C0077000C00085D41050086000C0096000C00025DBA0014000500111112393031050E0323222627351E013332363F01033313331333010B0F1D232B1C0F1E0E0B1D0A1A230923CD609702915A452634210F04054E05071917570202FE5901A70000020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000C349F3935F0F3CF5011103E800000000B643600000000000D59BEF28FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000002101F400330116000001850032010300520367005002D2004D0288004E02AD004E0288002502D2004A039E000C021900240219002402510024021900240128000C023E0024022C004000DE00450207004500DE004503550040022C0040023E00240251004302510024014D003D01F4001F013B0009022C004001F4000E01F4000804BE0037000000480048005A007400BE00FE016601F6028A02C002FA040404760514057C05C8067A06CC06F60728074207DC082408C4095C09F20A200AC40B160B660B860BF00C260001000000210096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/I 3 def
/M 4 def
/N 5 def
/P 6 def
/R 7 def
/S 8 def
/U 9 def
/W 10 def
/a 11 def
/c 12 def
/d 13 def
/e 14 def
/f 15 def
/g 16 def
/h 17 def
/i 18 def
/k 19 def
/l 20 def
/m 21 def
/n 22 def
/o 23 def
/p 24 def
/q 25 def
/r 26 def
/s 27 def
/t 28 def
/u 29 def
/v 30 def
/y 31 def
/uni2B91 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9312448060975EE3A7373C3A15976847AEC4213ADF0F8E546DBAEAEDA0492FEE740BA701036C7ADAA121D9C61DA187FF3C7BE4F830B1C5ED214DE2BB5E6884718B3ED5699043FC5FE98B71D5385A818F2704E89E4E3A5BC8490E399F8998A3F5371AF5AE0AF4654016161516C3CAD93E4D4D0A8F49CC9B594F46BDEC10F41A7B0B3228DD51501A02D3120051FAD9E1ECDFF34D3097C2EE47C50AED64789A7DF143BB749B03CAA93DACB98B2499C8E6BE26B121924ACBFED99D281042171C862802DD1542F6DEBB87FD1D2656F6EE1E3FD24E0870387502FDE90187DEDA74513FB410291E6A5F9E6840B9FAF484EAE31352BD85E01D3C36511D05326C3BF4AF149E44ABB4B3D11866B4B62FC6DCAD44F5B1E27B60B05414FEDA028FEE30446E5F86F05DFF28C31A335E8BD4905EC8FBE5DFCB0EB82C500D92777BFA778FA0E2240343556C1E13AE6A1B4CF520F36E858597D7ADC7372953AD249D52C514D65BFBBE3FB3339841FD2341D2983DE7AB9D4D2A2082D495BEC18DE24D2A3BB13AA6B4F60C213FA00F0B1AEC8BDA630E1DF853D08AD39F682E72C4AEFCF0A596CC621118C7666E79E9B5EFB993339EB885CF638F9806407B4E5F7C296062439FFC801214675EA7368C733250690EDC878B8B3936F358644DCF4663A60A49837D62C978856D4D395112455734ACD67A3AF0AE41DACA60A09FA5F8340CC1787E5CC417E9214DCE6016825D721E23EDC86D0CA8824A152AA8092E953CE3082684AD4EEA0B45
302BD7B166D54BCAFB2AEC57BA491638203537BC47E78F8AF50E64B9233AC963B91C4A9D8F4546729E12E7B2690FE1E830C8D593015FD61DCA6556F0E2AF0A1DC0E6A8B181C302CAE26B7208742F178291D463F8AB5ACDCF151BDACDE63AF9A28D7460D5F674D87219BEDA6B93123EA451D2B8A52AAB371CCA1D8B37F09083AA5CA93DB0EEEF93FE778423B1813BA4031E92C20816086F43101A2338184343FC16834EC9C0BD38C28AE0CE7674CBE0799D77243F0E9932B1BDC88208BE8BF89BBBB62C5178D191F61132357FADB7737CAF489459FDCED17C25C1359C4FF17BA6A73860197FCF8F16EC6896235472B82AC8EE4F86CACECEF88CEB52486DCCF0CB4A2F72EBBF4C7217B1F828A17172D3471DF18919232338BF18D485A887425BAC7474B4C900370A11D7BF1C33BCF67D78761CF7CBE0B2886CE606E7E3EB79D02AD2C9F0960B0E4EEAD45368CB8B70A6B748B859E14D92F6576513615A8106194DCDE1CA689DF8003341B6FF9927D632ED44E08CB180C17638600592E9C82A434EEA327D6278355AD60D978259E0BD1491DAE790AC27F8991F4803BECD1A5F24F47351346692C7F85A2B571904F8F7FC3DD20C25B02A22EC1E45894119974FE549B0DD8507820F772E7A0BEAA5D6EE4671A85B840F8F58B78F36E53587308535CD77789432410EC6E22AA9A6839408C8893AEE3D63339AC328F50EAD0E367F6D87898A5E014E82152F9FAE540A9CFA7872A5758C8ED0D0AF02A7B3184D55B3C039BE917258FD969307B2C66F672E80C5EC590BAC02C020D21438A147DE588A9C374A308BAE99C6FD73111362E73337DCB9EBB1682F0ED3DB769802675BE4B86021F4F80FFA526C50D450567CB04855E51CF856686FA084BEB0282957AEEF6E54589C0A890FCEDDF8EA269FE306D661D88C6CB80CE252E05E2179A662F67EF7A51246C3D413B73C8A9B3E0EC50305132888A6D7AE70EE2DA7B5F76F6FDC1EE7B866EC5ED63986AD5F727A69C3DA297597EBECAC2382805855756B0DD87BA697BA3A7EF26C2825C3D1F41BC8FEAF7FF429D437392CD391EB47FB004CEECA9385B288760233B899817685E7757EECE0B2EDDE7636789D57EB8DE81A70867B23955F948C738A777A9E2F543642E4E077AE70454E46A35645F0EB2D264D4D3A45056CF6B14EA6F8D0927927E177E275C8943C747A28B6E5DFF2BF6086F5BB0C3A06413A4B6EC982665D98564B228611730EBC45CC6A3F61E82AC0DEEC4FCBAA726216911A7167C52BF81E9C103BF4C53E841B2422E389799DEBCFA29409AF503C8C8AEACACFBD6324DA58DD4E458E1D2993304FD8C04EECE9DF46D7E40106406D4A8AD3B68C09AF07C0511365886572FB2C29C2F61CE9D6E3D92F696F7E76CC236A7E34B258C972EE417FAF51F1CA6A63D55B83C8A8FE9B80FF75DF2D15F8D307CD40CE
725C9D66E64F50B9D1FE68BFDB57FE0A3BBD70FA92C4D1DC516200A9C906D47A3257561A856533F8A8DD736665BFCD16523DCB1DC0D516A589237B26620E36F3165626E0C1898CF9A29F75850958BD4DBD477997B9549009DC528DE57A981889CA1DB415DB0667D9D7BF169A516150E3DA35BCD9CAB2DC3D1195EDA897ABAAF7502AD5BE282278FF582D87ACA8EA3BB3ADACBD902688F2A6BAB0314D16FE3481C5B948A642835CC410657C3F59A020F65356A1BA0F8B5116E4877E4543C8C00C58A9F0A30EF25CE34DA4382972ADE97AC8B3E32633FCCEBC54710B208B318EF1D734B3DD2B06BB3F6606BD48E17B2F1BCB748D64B3ED181436263B937C765C72D024F6AD2A7B28A5D4D75C89AB7F48FDED1C1F1B139F029D7BD00D09BD65C12268F12A579CF21E6B2917A23BA4E5A13BFF1DCBD7B408D007878F54264E6FB521E1EEC5B6FA537AB3CF3EAE3DA03E0DDBBF3E62521A9D7076AAF3594FA8C47E9E9E94B006434FF93816A09CDED8DC9292131C774B8B1C433347A78BA8988DE4D7CDEE737135FD07F53CEA9CBFC2DB6BCA18C4C9B587394555EF30368469A2582EE9DCDE9A75AA9ECC0D352F3D4560364F87A2D15193100937E02CFA562C50C9D87E24522207C070413A784670FDE172DD340AB5F2613B27078BF480272B128C4854D15A55C9349C36472A8E3056FDD17C454B9C9599D70FC162DCCE314EEE1BC131B772D75EFF39CCB90366111778B5FE70B24C7EBCC833B3DDB7F72F15B6D0485D2D2470C95CE2DFDAD8C28951D25F7A4D76FB00DC3D185E05C551A357FAE7600EBFDFFAA1F3D64575F0EE5B9179CF8D6535BA344E089AEB43F4E8A31BEC6A92BBB351B0E85C0C6DC7E4ACBAA2EA92B45B38BDDA17423C3278CB10D39835EBF9B0C8E6E7A90912632F71E4E39F3753348CF9609D71CEEE04CAEE26AE989480BFD33165F733AB7F02E0992C8D26EB59C7600BF6893C76EF8D2566F9940DB6315A0C7A82391F580D14E51E30B0D1131508ED9EBA652DBE7D881E5991A29FE892F320A9501C9565B797BF6D7A147455CE217CA0A7F6F16F77445979BA2E39DCBCA0ED06CD5BABF247DC7DB3BC7867B60DF59025D56D3386FDBCE8996470F5FFCE551C00B718B33449A93F244F6DCDBE11647617AFE36DBDB28F4292B48E5263EE6373BC18DDCD8C7E6F14484F2A8031DC9C2097B03BA51763BA19DC340476DEFEBAFBCBB95270EAF020E331AD2852E0E0C06E7F5590322575A5CD8ABDEFD0D75970664E11531B93429429B1E376A36F57274B5F8BF906E5D02D492A36FE807E3FF2C45495E9D37983163BF7A32F4BBA1BD40C1869139DD387C9C2A8B4CC0BE59CC0FD12751E7A05358879080E393BAB436B82E6B56C1D1F84B0B0917E52D6E068A1A84D069737AC1FE2520983A0A99AA662921FA3C0286F018178921EDF43A3792F
B32F1AED1C0F4AD90BE1B8BDBE239C413E98E596BCAA2FAC7898EA9C2EB4B13197108960AE4C763B8DFC7955BCFA184607B78769DD8B695F4A1CA1B18064C5F165D74156BB3C06A15EB65DF115781C4E36923E193B6F6929AEA9ACD387359943AB1AE1C5C790DA60E165AD29411C0606814EC47CD04054068CDC9CD08B75CAB61C498A0DF06AAC8DCF0BFC97A74AF27B0E64080FAC92E372E20A87C9F9726465ADE70393E1BDDB5E3EDE719A90D5B5E00E8BFDB8B3D271CCF112494352FE84217606957AA6C085029B1920C7DD2EEF4D6AB5E951940C059A1B3E8452D215CC3945FF71D8514EC269FE0746E7AA4B3880868A7DC6F87076CAF341E16948DB711A1E9B75306C6410254A5D6FB9F68EFAA879CDE28BCDEF709CACE3F4312ABAEDAB929599BFB42C1B0A5C24728F801BFD207B2CD5F297A364DF57C98C70F1850A645CA68637D23A1070CA006FB07774A61E251BC9BBA35F2F9D29EF95E51969ADA3BC723CAC304FD200DEEADE5C31AB1A9AA09BFF9B8743DA6F48D8D0A5C585C6F2586D67E9B0645A9616FFA7570D96E415FC66960E3C01C8FE9301D7F9729F353D31E7D95134405275757506026AD8C1239B6A4089645353BE2195E6016CB51085C012447F8C13892453934300E23F0A73D18574EC5F6860332AB2D73CCDF325F501C49D11FBD22E463C7C8FB7527DDC1B4A9B53FA84E94A812699B4A818D85C12B269AD01222B10D6DCD54B2F77B3FF35C2005E6AB8CC225FE718C2ACB3F9177016FF60A057F69B27EFFA9F4E2A38FB0BB7581FCF744AAA80EC99A630E4313FA19E20566B6CF94951BF2DF584A1F454943F8B386A2725E3E4D63F86FE9D92ECCFB959A719634A15ABBBB1796CC54A3143D0D9978A496714C3B7DF823575E8C391B731E631FCE8D60F2A10C760BB34D2680D19918D9250B341426F5CD06515A0B7DFBF89E91076BBD2E4D731673D418C6A6BFAD85CB7406660C7C043A8C1E19192021E9D14554AD566675B49637FA36910746A8057EE0C60DCB0FF6FD99FC3682AC3026E3670E992485EE41CE88C20CAE02C1A2FF75DA623E1303F652DAA44706C4CABBA7927DD743DF86B0C72E1BA8D56AA9E4D26EC1AB7671E1D46621B38D094A9E58BFFC4FF29F934326EAD8C0C2B635F9B76863C9ED12D077139F056ED04EFDC2D96D5DE6343E101B65EBB9EC64F5BCE9CF592BA9A8852037BAFF17B7D92942C4026609E28BF89C6EB448BAF352637747B6485861B32255CC6D9CAEFE9A4BCE6A8D52A4E93300770567746825FECEA0AECFF6C6E431182E311984DAE1F2C264A9D1C894AC22D3F3433A1F80EDA39EC92C187F3E6AF945218507A35837887BC58A25003E65CC70F9692EC6453EB72E4008CEAF8911C6F155AA356DA025E810683A785B85A721A41372E054C973B0C60E6CD6D73C3115C23FCF09CFE212D37D0

8C91A06370F9E46BC411F6ABA399198706F18110961D53B820325FE301A20534DC2947247938381DB795FE7EB16529BE4AAB9A9875A31EAB9A9B146433F76A233A62F771D6A0403E225D08911606942698CA1817D8BFF64E7A6A43B2038ABB4586E33F3A9C386253C42925EA9F04F12274FB8FCD2A444D654A2CCADA2661920BDCF48EA6E0F47C4AECEF106B7D71457BC8EBB596CF1948A1A9562A2DABBDBF0099157B7E856DF3F0BDC36579CE0C7153655EAD360BBB94DE65EBA1597F8AED6DFD36B48D4980AD7B553106EA7F430E6612D4A18F0BBF38C93FD2A0AD1DF84D354F4369C420ECD562CD703FFA98B06E5C70561DC70060A70FE832C493024E72EC28CEBD314BBEAE1350558404A4137D106A1797B6E0EE4BFF76DBD0E0C8BE692F5C2ABA9D733FC558E8E1F74AFF4988E906DCD832723D774B779AE626718FDFCB0E3A472A8C3FBA702006DF92494CBFB95AB7C0B92C111B48DE28F0361DE31DF7950326F1B0D15C2923CDF218769BA341EFAB69D3E0D9888A1FCEF57527B6DA1FA63CF9C703EBA33899AAA58CAD63C020B1CA3372B6905DA5C57014B39560A87761BB3E5B5D8DC2C86F3397DC3B897C2C76A34BCFC0B37FEEEC976E63B90A27EEB30BE565A43F05C5ED33397DA08B118DFF13F3053913A60F46B30185A39E0EDA92DB9AB7017C895BF8166782A0CE2F8E1D5B252B4874FB42512006A7472AFC0BB25BBEC06637539E946D1F0F653BF5C753754FF2E5A0533FC490D54160128CDD35CDDE5694D3EAB8846E5CCA1D49312A98D76DFDC417F338C21635CAE4EDE390
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1080 342 rc
0 342 m
1080 342 l
1080 -209 l
0 -209 l
h
0 342 m
f
36 144 m
252 144 l
252 72 l
36 72 l
h
36 144 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
36 198 m
252 198 l
252 270 l
36 270 l
h
36 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 108 cm
/F1.1[ 16 0 0 -16 0 0]sf
-27.552 -3.947998 m
(!"#$%&'\()[ 14.224000 8.592000 3.552000 5.040000 4.448000 4.736000 9.184000 0.000000 ] xS
-103 15.5 m
(\)*+,#-.'/01%*"2,+03405$)[ 10.368000 13.936000 10.960000 6.224000 3.552000 8.896000 8.000000 9.184000 8.304000 8.592000 9.488000 4.448000 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 288 m
216 288 l
216 216 l
72 216 l
h
72 288 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
72 54 m
216 54 l
216 126 l
72 126 l
h
72 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 252 cm
-27.856001 -3.447998 m
(6\(02"\(0%)[ 10.368000 5.040000 8.592000 9.488000 8.592000 5.040000 8.592000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 279 m
432 279 l
432 225 l
360 225 l
h
360 279 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
360 63 m
432 63 l
432 117 l
360 117 l
h
360 63 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 396 252 cm
-12.888 5.776001 m
(9170)[ 4.144000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
576 288 m
720 288 l
720 216 l
576 216 l
h
576 288 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
576 54 m
720 54 l
720 126 l
576 126 l
h
576 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 648 252 cm
-27.552 -3.447998 m
(!"#$%&'\(%)[ 14.224000 8.592000 3.552000 5.040000 4.448000 4.736000 9.184000 5.328000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
864 288 m
1008 288 l
1008 216 l
864 216 l
h
864 288 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
864 54 m
1008 54 l
1008 126 l
864 126 l
h
864 54 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 936 252 cm
-50.231998 5.776001 m
(:21"$0%;";<0)[ 11.552000 9.488000 9.488000 8.592000 5.040000 8.592000 4.448000 8.592000 8.592000 8.592000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
576 144 m
720 144 l
720 72 l
576 72 l
h
576 144 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 342 cm
576 198 m
720 198 l
720 270 l
576 270 l
h
576 198 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 648 108 cm
-27.552 -3.447998 m
(!"#$%&'\(%)[ 14.224000 8.592000 3.552000 5.040000 4.448000 4.736000 9.184000 5.328000 0.000000 ] xS
-40.152 15 m
(*"2,='$#&8)[ 13.936000 8.592000 9.488000 6.224000 11.552000 9.184000 5.040000 3.552000 4.736000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
360 90 m
225.89999 90 l
S
0 i
CM
217.89999 252 m
225.89999 249 l
225.89999 255 l
h
217.89999 252 m
f
0 J
0 j
1 0 0 -1 0 342 cm
217.89999 90 m
225.89999 93 l
225.89999 87 l
h
217.89999 90 m
S
/Cs2 SC
0 sc
1 0 0 -1 289.87891 252 cm
-45.632 -3.447998 m
(+0;02$#'-%'&%)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 4.736000 0.000000 ] xS
-48.903999 15 m
(*"2,+03405$)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
432 90 m
566.09998 90 l
S
0 i
CM
574.09998 252 m
566.09998 255 l
566.09998 249 l
h
574.09998 252 m
f
0 J
0 j
1 0 0 -1 0 342 cm
574.09998 90 m
566.09998 87 l
566.09998 93 l
h
574.09998 90 m
S
/Cs2 SC
0 sc
1 0 0 -1 504 264 cm
-40.456001 5.776001 m
(;";<0%>#55)[ 8.592000 8.592000 8.592000 8.896000 8.592000 4.448000 13.648000 3.552000 8.000000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
720 90 m
854.09998 90 l
S
0 i
CM
862.09998 252 m
854.09998 255 l
854.09998 249 l
h
862.09998 252 m
f
0 J
0 j
1 0 0 -1 0 342 cm
862.09998 90 m
854.09998 87 l
854.09998 93 l
h
862.09998 90 m
S
1 J
1 j
0.60000002 i
648 198 m
648 135.89999 l
S
0 i
CM
648 214.10001 m
645 206.10001 l
651 206.10001 l
h
648 214.10001 m
f
0 J
0 j
1 0 0 -1 0 342 cm
648 127.9 m
645 135.89999 l
651 135.89999 l
h
648 127.9 m
S
1 J
1 j
0.60000002 i
576 234 m
261.89999 234 l
S
0 i
CM
253.89999 108 m
261.89999 105 l
261.89999 111 l
h
253.89999 108 m
f
0 J
0 j
1 0 0 -1 0 342 cm
253.89999 234 m
261.89999 237 l
261.89999 231 l
h
253.89999 234 m
S
1 J
1 j
0.60000002 i
144 198 m
144 135.89999 l
S
0 i
CM
144 214.10001 m
141 206.10001 l
147 206.10001 l
h
144 214.10001 m
f
0 J
0 j
1 0 0 -1 0 342 cm
144 127.9 m
141 135.89999 l
147 135.89999 l
h
144 127.9 m
S
1 J
1 j
0.60000002 i
431.53314 122.0195 m
576 207 l
S
0 i
CM
424.63766 224.03667 m
430.01208 217.3947 l
433.0542 222.5663 l
h
424.63766 224.03667 m
f
0 J
0 j
1 0 0 -1 0 342 cm
424.63766 117.96334 m
430.01208 124.6053 l
433.0542 119.43369 l
h
424.63766 117.96334 m
S
1 J
1 j
0.60000002 i
576.46686 192.9805 m
432 108 l
S
0 i
CM
583.3623 144.96333 m
577.98792 151.6053 l
574.9458 146.4337 l
h
583.3623 144.96333 m
f
0 J
0 j
1 0 0 -1 0 342 cm
583.3623 197.03667 m
577.98792 190.3947 l
574.9458 195.5663 l
h
583.3623 197.03667 m
S
/Cs2 SC
0 sc
1 0 0 -1 388 120 cm
-38.528 5.776001 m
(\)0-1%\)*+)[ 10.368000 8.592000 8.896000 9.488000 4.448000 10.368000 13.936000 0.000000 ] xS
1 0 0 -1 252.0625 180 cm
-100 -3.447998 m
(+0;02$#'-%'&)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 0.000000 ] xS
-100 15 m
(\)*+,#-.'/01%*"2,+03405$)[ 10.368000 13.936000 10.960000 6.224000 3.552000 8.896000 8.000000 9.184000 8.304000 8.592000 9.488000 4.448000 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 0 0 -1 447 167.5 cm
-45.264 -3.447998 m
(+0;02$#'-%'&)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 0.000000 ] xS
-34.304001 15 m
(*"2,='$#&8)[ 13.936000 8.592000 9.488000 6.224000 11.552000 9.184000 5.040000 3.552000 4.736000 0.000000 ] xS
1 0 0 -1 570.71497 201.5 cm
-49 -3.447998 m
(\)0-1)[ 10.368000 8.592000 8.896000 0.000000 ] xS
-49 15 m
(*"2,+0?#5$0\()[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.184000 3.552000 8.000000 5.040000 8.592000 0.000000 ] xS
1 0 0 -1 692.5 180 cm
-40.456001 5.776001 m
(;";<0%>#55)[ 8.592000 8.592000 8.592000 8.896000 8.592000 4.448000 13.648000 3.552000 8.000000 0.000000 ] xS
1 0 0 -1 790.41406 252 cm
-45.632 -3.447998 m
(+0;02$#'-%'&%)[ 10.960000 8.592000 8.592000 8.592000 9.488000 5.040000 3.552000 9.184000 8.896000 4.448000 9.184000 4.736000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 342 cm
144 54 m
144 27 l
387 27 l
387 53.099998 l
S
0 i
CM
387 280.89999 m
390 288.89999 l
384 288.89999 l
h
387 280.89999 m
f
0 J
0 j
1 0 0 -1 0 342 cm
387 61.099998 m
390 53.099998 l
384 53.099998 l
h
387 61.099998 m
S
1 J
1 j
0.60000002 i
936 54 m
936 27 l
639 27 l
405 27 l
405 53.099998 l
S
0 i
CM
405 280.89999 m
408 288.89999 l
402 288.89999 l
h
405 280.89999 m
f
0 J
0 j
1 0 0 -1 0 342 cm
405 61.099998 m
408 53.099998 l
402 53.099998 l
h
405 61.099998 m
S
/Cs2 SC
0 sc
1 0 0 -1 267.53143 315 cm
-18.672001 -3.447998 m
(\)0-1%)[ 10.368000 8.592000 8.896000 9.488000 0.000000 ] xS
-39.416 15 m
(*"2,+0278)[ 13.936000 8.592000 9.488000 6.224000 10.960000 8.592000 9.488000 3.552000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
