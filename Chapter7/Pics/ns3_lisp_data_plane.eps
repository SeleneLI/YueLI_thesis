%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1275.000000 621.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1275 621
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1275 621
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /p put
dup 35 /V put
dup 36 /four put
dup 37 /L put
dup 38 /three put
dup 39 /P put
dup 40 /r put
dup 41 /o put
dup 42 /t put
dup 43 /c put
dup 44 /l put
dup 45 /i put
dup 46 /s put
dup 47 /O put
dup 48 /v put
dup 49 /e put
dup 50 /T put
dup 51 /u put
dup 52 /n put
dup 53 /N put
dup 54 /D put
dup 55 /S put
dup 56 /d put
dup 57 /a put
dup 58 /k put
dup 59 /space put
dup 60 /f put
dup 61 /m put
dup 62 /A put
dup 63 /M put
dup 64 /b put
dup 65 /R put
dup 66 /colon put
dup 67 /H put
dup 68 /underscore put
dup 69 /C put
dup 70 /B put
dup 71 /F put
dup 72 /w put
dup 73 /x put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








002510B8000610B80000DCB8002510B8001FDC303137231E0333323E0235342E02272E0335343E0233321E0217332E0323220E0215141E0415140E0223222E02745502243C4E2B274F3F271D2F3D201E3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D30520000000001000E000001E602050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130129BD598D02915FC00205FE5101AFFDFB00010011000002E50205000F003500B800012FB800052FB800092FB800002FB8000B2FBA000400000001111239BA000800000001111239BA000E000000011112393031211323032303230323032313331333130240A55874026C5D6802755EA65C6802690205FE5901A7FE5901A7FDFB019BFE6500010009000001FD0205000B002700B800072FB8000A2FB800012FB800042FBA000300010007111239BA0009000100071112393031130333371733033723072723CBC26790906DC8B266817C6D0110FEF0D6D60117EEB5B500020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000C349F3935F0F3CF5011103E800000000B643600000000000D59BEF28FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000002B01F4003301160000022C001D022C001C011600530288FFFA02AD004E02D2002B02C0004E023E004E02D2004E01030052022C004E0367005002D2004D02F800260288004E

00>] def
/CharStrings 43 dict dup begin
/.notdef 0 def
/space 1 def
/three 2 def
/four 3 def
/colon 4 def
/A 5 def
/B 6 def
/C 7 def
/D 8 def
/F 9 def
/H 10 def
/I 11 def
/L 12 def
/M 13 def
/N 14 def
/O 15 def
/P 16 def
/R 17 def
/S 18 def
/T 19 def
/V 20 def
/underscore 21 def
/a 22 def
/b 23 def
/c 24 def
/d 25 def
/e 26 def
/f 27 def
/i 28 def
/k 29 def
/l 30 def
/m 31 def
/n 32 def
/o 33 def
/p 34 def
/r 35 def
/s 36 def
/t 37 def
/u 38 def
/v 39 def
/w 40 def
/x 41 def
/uni2B91 42 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec




7D6DDE95A61F63387218F4F5A603582E615A521BC9CCF8D6785A2D0020163A07EE657DF57B1CD36426B8019A47A667BC07D6F154B5911D7FADD1D7083DB5C72B1B738324DFE7510C5ED431912A591D199E660E03117EFFDC6719914170BFF3B4B04163839B87A869D4A34DA3C32A11768CDC3B11B346A363642B51D3FD39FE2B546DEA8857712FFEDDD51FA12489E6C52CAC5EA19BCFA6097BC1984D4B6960A4C5613942311E50DC46B29B82EB89AB876D41F80730D5B5FDB1E29172C67EEDFB01407126BB2015B04BEB4FBEA1DDDDEB18CB4159CF7C395C16E3C051F1D388FB835282688815CB8BEAE00A89CF6CBE846BF84A2EA62D84E1903900C315EA87BA2D6733DF2D28CD0476D8D2311AA5171DF822B5AD313333D30E7D193F7941E667C70F1932B38FE4BFD29A9B1618E05680F34196D080D0D5469F2CB87308D695E3E6DF667CE688925A6D89ECE2B20728EFE1A3794607B550804E83566C1466C8E0B40499B5852D5438926CB82B1DB29F960DEE77358701915774E3B8AAA79CA469E041E0CBD5D4841BA3CB78937EC4113353AEAA7263B8CF491F4D7F6781AA91957D9FE602683B0DE21B3B9AF40453A685CB390B8DAB384C065C487DCFCD998B89EF8F9B8FE7D42CF5665495522255F771DDAC7289FB7EB46EF38019907F9E417948D824158E70E889C1B9CFF1CFA8323E52BCC321741EE8E0314948EAAAB1E2C787B5A195CC17E9B10091FBEA4F8A50634CD03202452BFCC22A2B3DB35B32B1189F5BDB9B38D9E38AB3E2AA5BD6E181E8777C0FA3ED17BC20399FEFB266AE813646E20EB01918E8D27CC0380509AC3DEA7215F287050BD98452B79D2A5A9264491ED315D70466CA49ADBE8F33E727DEBA682AE5148F046810E9027B1E35E4003CCB9AE38D007F8AE7532BD1F4D94168DD64C79E899D498E7EE5DB5871D1FCC5CB1C2BD9F6861B8034DA27BE7B0FF6D8B4A3ED25A5B4590E994603DAD87C40ED52556FA6947B470C2A6B38913B9450E8E1AFBDB50F407073010A901072A047EB04BAC1D36135709BF17FE74DBECD4E5C8E6CA878377BAF12B54E8367E1EEC3EA36A16227AA77BD67ABF33FE6A308D994A95515FD551578E55BBE9A26470BBAE9A7E7526D09D18571EC3AB0097305B2D15D45EE6E2F8C0F28659F5761D6CFC770F8B726E15B1E4F3552413BA5BB90E034BBD4545A21C3C32A6F8C34B4F51C52BE972C218708D2F1C8AEF253FF684A984A28BC381FAC53F26912C23A2652D0BD8B433BB464B7810EDB2442E37709309A3E9534DD79EDD6AC8D1FC84E774A13AB596BE1BE4474C976A331316064DF963A4C99836DB75CFAB69B724BBA7DE32AA1CE7F5AB4A2D68811A0760FDD76035C8DC40C340896B50A8F176AA2CFA1AA69650B4DD247563FD6A57905F0A4F32F2CA61F07AF8231B17A44E46BDCED0C0F896D6AEF
4E848CA793E60295BBE801E812E35DC1E257A752C777774D7231499B3191C9068073BCC69DA7B8F14EE8A7AF6890D532D195D048AF0FD9C75C11C4DDC18631A509A1F0A810AFF38735CB60AB6B6FD46857567143EE576439E95575B0ABE64CCDFAE15D02BFBB28A022D72B99132C39D6250E346AF21D5FB73B213408B7CD2725B666E67B8E1BC020B4D2979CBA019F05633117E71B648019856A597E004B7098EC6B2C20A688C29D124546BBD4A254857D40858713AB3849C30DC74F601CF0C43D4C4D6B191FCEEEE9A5C03112E98CE3575C12F7017171EC4FF522CD23C6626353ED06F55B16DBE98A39899A03190F82ACEA1100E3C24FB4D0E9FAB1D30907B95053B75E31AFE739D070C7E04F830E3E50B1A1D351B6FB26E537DB7A8E10DD47D83EFA323A43B18C900B71FCC58381599FC7A2B482B17ACFB11E8173935BF4574078C5C1F1C2DAEBF51787F021FA8ACAA7FA5D7A8C7D0C269BBFB16412474C8A5C9FAF7B8D027C485F3B9C7281A70DB468B4ABC039D6D0072BFF0C21902CECE2539F11F5DD1884F6825A623CB36DEF4A0E296FC02F58D014873A54A68FFA07E3490FE2C69C436CAA9753D77921AAF1ECF85D140C85C069E894600D0A7228AE9F8741A7CB2C59A9A8E637E32B76B0063EB87ABC8B71230E742EA2AC57D05E6B976AA431A63E847DA82906F17E909964C6362612AB0F838FA82FECEBDFE1BA90A4444981B2AE0423B6A06E51C7B3ECDB1ECAFDC99844C45AED4E3EE0C7CE42F0F54A8E53C168B4A9F0AEEC9343C607A9EC39142796B85C9FF3BFAA58FF20C5FCF02EC3860A3C81B6B5D44A2A0D27B4E164CEBD05C97D05045038AA1F5BC15A97EE431630031EFF27293E4C5A71B7AD9D849E6A58439CE8CEBFE1CF0C032A0E9D79A0E561B096E213CBF7A25FCE0715530AAE43086B472F869F08311766E7EE1AEA971DC842F7775B7DA70545F87A6581097BD1FEEB31AAECAFB232AC4E76624719617E8680BC0B1B9E6B1D1BEE03F8E8E8F81F7E5D96195DF39EEBC65EBCE70056CD6FF754839F7D1B0448A8AD1B269F60F97032E044680DA153614899BFFF195030C099B7690FA25AB68581B0BB569CF63BEBE4D4D732488D30739CDE61668539F3F7F5E9F01DD433C43E39F77B3D5A1994EA6D10440C88AC4C79C67806B287912048032E2E5CE8123ACE8CE2D0C57FEA61AF3533EE938F0BB037681C578F21474B9EC049FB6818BD974215F7672119B09C02D099003E0FFBC38310A0EF9AF9E62EF99F91C9FEE7DACE8D037141A47E3F0CBDA360317E30F0F52B1E5F9A47A5618B90371E999D9FB1AA1CCF0AC640A101B3E8481E018EA2E2D0F8577B5AB9C63C4C423AE40492B188760A3116C443B8F64EE9A431A37B30C13F050AE965C125CC5C5F61A8A75E4173613399C65E83FE290D81AE25BF61FFC8451F7C29F9D6DB48
017CF13C307F8D3708E7404A03FFBC0BAFA775CB2917FF9799CE548703F25257D54088A3E575D683CD6E2F9FFB35466E378D6368AC0E8A19D001C9BF516A6AF62CD2BB27A8864E572B961A234E94BBD86C4EF4F5BC6DE199E13709F52110B43CDE369A5D2AEE3C7A48ED8F4D7CDBA3FBB018D0C47DDA7ADBCB69F033325D780516D09AFD27363B41722F089239B11AF8E4984F9C2F119FBCFECE41BDC301DD5B6784D3B134899F95EBBB878FF034535A45F30AA07EBA8265FDDEF6EE862C1AD9C331D693F0D8E603807E478D75B46002A85194124CA58EF4B40314DF45688D662898453D92E5DA26F515B63F95BE07A3AAD5E338264692ABFEEA59A246EEC30DE27444CC38EC7845EE3647F6DF804E838670D3414173E252B55509B9BB8DC6086F5A7DBC245603C1E65A9B06F3D4D6B2DBE0BB0CD210C9F785D9DF0CF88EA3A5A3D0F86126E90E937EE38BA2C8A28A2CC57C3C24190308C9EFD59F048C6A627B1999695FF1B80C76EC1425AB4D964D91ECF5704C35DB578394FE01BEB061CB5B6980319D527700DC39B44BCB04C4122C5DC3524956E73DEB39B7DC41AF99275051D399EABF198E00725AE6C5D7AB59F482D0B350C2ED8154F35F7C2AD52A4A39410022DD0274A4CD5C0FB8DC579F8C1F63E22CEF99840C08FA695F9FC76C2DB0C0C09288716BBC60EBB1CC06F663DF4E5FCB230C3791C58DA28F5804482D98AEF72BC143DE9A718C9A6BACF7E5CEC3C916F48439254271C021E6A17CD6A9C8DB049425A87CEAE48DE815D9D8F4C82EF8B3E5CB1DB2CC5152B27352235DC4195ECB562F18EFD9C9684B91
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1275 621 rc
0 621 m
1275 621 l
1275 0 l
0 0 l
h
0 621 m
f
72 504 m
216 504 l
216 450 l
72 450 l
h
72 504 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
72 117 m
216 117 l
216 171 l
72 171 l
h
72 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 477 cm
/F1.1[ 16 0 0 -16 0 0]sf
-55.119999 6.276001 m
(!"#$%&'\(\)*\)+\),)[ 4.144000 9.488000 9.776000 8.896000 8.896000 8.896000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 504 m
504 504 l
504 450 l
360 450 l
h
360 504 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
360 117 m
504 117 l
504 171 l
360 171 l
h
360 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 432 477 cm
-38.824001 6.276001 m
(%-."/01\(!")[ 8.896000 3.552000 8.000000 9.488000 12.160000 8.000000 8.592000 5.328000 4.144000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 315 m
216 315 l
216 261 l
72 261 l
h
72 315 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
72 306 m
216 306 l
216 360 l
72 360 l
h
72 306 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 288 cm
-49.639999 5.776001 m
(23451*610-+1)[ 7.712000 8.896000 8.896000 11.552000 8.592000 5.040000 11.264000 8.592000 8.000000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 126 m
216 126 l
216 72 l
72 72 l
h
72 126 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
72 495 m
216 495 l
216 549 l
72 549 l
h
72 495 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 99 cm
-36.888 5.776001 m
(51*610-+1)[ 11.552000 8.592000 5.040000 11.264000 8.592000 8.000000 3.552000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
144 171 m
144 296.10001 l
S
0 i
CM
144 316.89999 m
147 324.89999 l
141 324.89999 l
h
144 316.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
144 304.10001 m
147 296.10001 l
141 296.10001 l
h
144 304.10001 m
S
1 J
1 j
0.60000002 i
144 360 m
144 485.10001 l
S
0 i
CM
144 127.9 m
147 135.89999 l
141 135.89999 l
h
144 127.9 m
f
0 J
0 j
1 0 0 -1 0 621 cm
144 493.10001 m
147 485.10001 l
141 485.10001 l
h
144 493.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 174 382.5 cm
-18.672001 5.776001 m
(7148)[ 10.368000 8.592000 8.896000 0.000000 ] xS
1 0 0 -1 174 193.5 cm
-18.672001 5.776001 m
(7148)[ 10.368000 8.592000 8.896000 0.000000 ] xS
1 0 0 -1 145 579 cm
-85.648003 5.776001 m
('9+:1*;<\(\)=;>"",-+9*-\)4)[ 10.368000 8.592000 8.592000 8.304000 8.592000 5.040000 4.448000 4.736000 5.040000 9.184000 13.648000 4.448000 10.368000 9.488000 9.488000 3.552000 3.552000 8.592000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
144.85294 57 m
144.36176 107.10048 l
S
0 i
CM
144.28333 505.8999 m
147.36162 513.87012 l
141.36191 513.92896 l
h
144.28333 505.8999 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 621 cm
144.28333 115.10009 m
147.36162 107.12988 l
141.36191 107.07107 l
h
144.28333 115.10009 m
S
/Cs2 SC
0 sc
1 0 0 -1 288 501 cm
-37.056 5.776001 m
(,-."/3*"3*)[ 3.552000 3.552000 8.000000 9.488000 12.160000 8.896000 5.040000 9.488000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 315 m
504 315 l
504 261 l
360 261 l
h
360 315 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
360 306 m
504 306 l
504 360 l
360 360 l
h
360 306 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 432 288 cm
-34.824001 5.776001 m
(?9"29@,1)[ 13.936000 8.592000 9.488000 7.408000 8.592000 9.488000 3.552000 0.000000 ] xS
1 0 0 -1 525 404.5 cm
-78.816002 5.776001 m
(71,1+*61.*-49*-\)4A,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 11.264000 8.592000 8.000000 5.040000 3.552000 8.896000 8.592000 5.040000 3.552000 9.184000 8.896000 10.960000 3.552000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
666 378 m
810 378 l
810 324 l
666 324 l
h
666 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
666 243 m
810 243 l
810 297 l
666 297 l
h
666 243 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 351 cm
-55.119999 6.276001 m
(!"#$%&'\(\)*\)+\),)[ 4.144000 9.488000 9.776000 8.896000 8.896000 8.896000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
954 378 m
1098 378 l
1098 324 l
954 324 l
h
954 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
954 243 m
1098 243 l
1098 297 l
954 297 l
h
954 243 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1026 351 cm
-34.824001 5.776001 m
(?9"29@,1)[ 13.936000 8.592000 9.488000 7.408000 8.592000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
648 252 m
828 252 l
828 198 l
648 198 l
h
648 252 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
648 369 m
828 369 l
828 423 l
648 423 l
h
648 369 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 225 cm
-81.928001 5.776001 m
(5\)81BB'\(\)*\)+\),C948,1\()[ 11.552000 9.184000 9.488000 8.592000 4.448000 4.448000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 3.552000 11.552000 8.592000 8.896000 9.488000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
666 126 m
810 126 l
810 72 l
666 72 l
h
666 126 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
666 495 m
810 495 l
810 549 l
666 549 l
h
666 495 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 99 cm
-36.888 5.776001 m
(51*610-+1)[ 11.552000 8.592000 5.040000 11.264000 8.592000 8.000000 3.552000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
738 297 m
738 359.10001 l
S
0 i
CM
738 253.89999 m
741 261.89999 l
735 261.89999 l
h
738 253.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
738 367.10001 m
741 359.10001 l
735 359.10001 l
h
738 367.10001 m
S
1 J
1 j
0.60000002 i
738 423 m
738 485.10001 l
S
0 i
CM
738 127.9 m
741 135.89999 l
735 135.89999 l
h
738 127.9 m
f
0 J
0 j
1 0 0 -1 0 621 cm
738 493.10001 m
741 485.10001 l
735 485.10001 l
h
738 493.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 776.5 288 cm
-28.440001 5.776001 m
(A1+1-01)[ 10.960000 8.592000 8.592000 8.592000 3.552000 8.000000 0.000000 ] xS
1 0 0 -1 813 162 cm
-71.112 5.776001 m
(=DA1+1-01E9,,F9+:)[ 13.648000 8.000000 10.960000 8.592000 8.592000 8.592000 3.552000 8.000000 8.592000 11.552000 8.592000 3.552000 3.552000 10.960000 8.592000 8.592000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
810 270 m
944.09998 270 l
S
0 i
CM
952.09998 351 m
944.09998 354 l
944.09998 348 l
h
952.09998 351 m
f
0 J
0 j
1 0 0 -1 0 621 cm
952.09998 270 m
944.09998 267 l
944.09998 273 l
h
952.09998 270 m
S
1 1 1 sc
CM
954 504 m
1098 504 l
1098 450 l
954 450 l
h
954 504 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
954 117 m
1098 117 l
1098 171 l
954 171 l
h
954 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1026 477 cm
-38.824001 6.276001 m
(%-."/01\(!")[ 8.896000 3.552000 8.000000 9.488000 12.160000 8.000000 8.592000 5.328000 4.144000 0.000000 ] xS
1 0 0 -1 1119 423 cm
-78.816002 5.776001 m
(71,1+*61.*-49*-\)4A,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 11.264000 8.592000 8.000000 5.040000 3.552000 8.896000 8.592000 5.040000 3.552000 9.184000 8.896000 10.960000 3.552000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
666 504 m
810 504 l
810 450 l
666 450 l
h
666 504 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
666 117 m
810 117 l
810 171 l
666 171 l
h
666 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 477 cm
-55.119999 6.276001 m
(!"#$%&'\(\)*\)+\),)[ 4.144000 9.488000 9.776000 8.896000 8.896000 8.896000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
738 243 m
738 180.89999 l
S
0 i
CM
738 448.10001 m
735 440.10001 l
741 440.10001 l
h
738 448.10001 m
f
0 J
0 j
1 0 0 -1 0 621 cm
738 172.89999 m
735 180.89999 l
741 180.89999 l
h
738 172.89999 m
S
/Cs2 SC
0 sc
1 0 0 -1 777 414 cm
-36.287998 5.776001 m
(!"G\)\(H9\(8)[ 4.144000 9.488000 9.184000 9.184000 5.328000 12.128000 8.592000 5.040000 0.000000 ] xS
1 0 0 -1 882 501 cm
-39.728001 5.776001 m
(%-."/3*"3*)[ 8.896000 3.552000 8.000000 9.488000 12.160000 8.896000 5.040000 9.488000 8.896000 0.000000 ] xS
1 0 0 -1 885.5 363 cm
-36.287998 5.776001 m
(!"G\)\(H9\(8)[ 4.144000 9.488000 9.184000 9.184000 5.328000 12.128000 8.592000 5.040000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
1035 171 m
1035 233.10001 l
S
0 i
CM
1035 379.89999 m
1038 387.89999 l
1032 387.89999 l
h
1035 379.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
1035 241.10001 m
1038 233.10001 l
1032 233.10001 l
h
1035 241.10001 m
S
1 J
1 j
0.60000002 i
1017 243 m
1017 180.89999 l
S
0 i
CM
1017 448.10001 m
1014 440.10001 l
1020 440.10001 l
h
1017 448.10001 m
f
0 J
0 j
1 0 0 -1 0 621 cm
1017 172.89999 m
1014 180.89999 l
1020 180.89999 l
h
1017 172.89999 m
S
1 J
1 j
0.60000002 i
810 135 m
944.09998 135 l
S
0 i
CM
952.09998 486 m
944.09998 489 l
944.09998 483 l
h
952.09998 486 m
f
0 J
0 j
1 0 0 -1 0 621 cm
952.09998 135 m
944.09998 132 l
944.09998 138 l
h
952.09998 135 m
S
1 J
1 j
0.60000002 i
954 153 m
819.90002 153 l
S
0 i
CM
811.90002 468 m
819.90002 465 l
819.90002 471 l
h
811.90002 468 m
f
0 J
0 j
1 0 0 -1 0 621 cm
811.90002 153 m
819.90002 156 l
819.90002 150 l
h
811.90002 153 m
S
1 J
1 j
0.60000002 i
216 135 m
350.10001 135 l
S
0 i
CM
358.10001 486 m
350.10001 489 l
350.10001 483 l
h
358.10001 486 m
f
0 J
0 j
1 0 0 -1 0 621 cm
358.10001 135 m
350.10001 132 l
350.10001 138 l
h
358.10001 135 m
S
1 J
1 j
0.60000002 i
360 153 m
225.89999 153 l
S
0 i
CM
217.89999 468 m
225.89999 465 l
225.89999 471 l
h
217.89999 468 m
f
0 J
0 j
1 0 0 -1 0 621 cm
217.89999 153 m
225.89999 156 l
225.89999 150 l
h
217.89999 153 m
S
1 J
1 j
0.60000002 i
441 171 m
441 296.10001 l
S
0 i
CM
441 316.89999 m
444 324.89999 l
438 324.89999 l
h
441 316.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
441 304.10001 m
444 296.10001 l
438 296.10001 l
h
441 304.10001 m
S
1 J
1 j
0.60000002 i
423 306 m
423 180.89999 l
S
0 i
CM
423 448.10001 m
420 440.10001 l
426 440.10001 l
h
423 448.10001 m
f
0 J
0 j
1 0 0 -1 0 621 cm
423 172.89999 m
420 180.89999 l
426 180.89999 l
h
423 172.89999 m
S
/Cs2 SC
0 sc
1 0 0 -1 358.5 372 cm
-63.848 5.776001 m
(71,1+*7\)3\(+1A,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 10.368000 9.184000 8.896000 5.040000 8.592000 8.592000 10.960000 3.552000 9.184000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
216 522 m
656.09998 522 l
S
0 i
CM
664.09998 99 m
656.09998 102 l
656.09998 96 l
h
664.09998 99 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 621 cm
664.09998 522 m
656.09998 519 l
656.09998 525 l
h
664.09998 522 m
S
/Cs2 SC
0 sc
1 0 0 -1 435 111 cm
-112.912 5.776001 m
(7148;14+9".3,9*18;89*9;*\);I2A)[ 10.368000 8.592000 8.896000 9.488000 4.448000 8.592000 8.896000 8.592000 8.592000 9.488000 8.000000 8.896000 3.552000 8.592000 5.040000 8.592000 9.488000 4.448000 9.488000 8.592000 5.040000 8.592000 4.448000 5.040000 9.184000 4.448000 8.288000 9.184000 0.000000 ] xS
1 0 0 -1 948 405 cm
-63.848 5.776001 m
(71,1+*7\)3\(+1A,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 10.368000 9.184000 8.896000 5.040000 8.592000 8.592000 10.960000 3.552000 9.184000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
