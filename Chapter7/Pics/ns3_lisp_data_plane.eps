%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1275.000000 621.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1275 621
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1275 621
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /p put
dup 35 /v put
dup 36 /four put
dup 37 /L put
dup 38 /three put
dup 39 /P put
dup 40 /r put
dup 41 /o put
dup 42 /t put
dup 43 /c put
dup 44 /l put
dup 45 /i put
dup 46 /s put
dup 47 /O put
dup 48 /e put
dup 49 /T put
dup 50 /u put
dup 51 /n put
dup 52 /N put
dup 53 /D put
dup 54 /S put
dup 55 /d put
dup 56 /a put
dup 57 /k put
dup 58 /space put
dup 59 /f put
dup 60 /m put
dup 61 /A put
dup 62 /M put
dup 63 /b put
dup 64 /R put
dup 65 /colon put
dup 66 /H put
dup 67 /underscore put
dup 68 /C put
dup 69 /B put
dup 70 /F put
dup 71 /w put
dup 72 /x put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<









02510043014D003D01F4001F013B0009022C004001F4000E02F600110206000904BE0037000000480048012E017401A201D202960304036C039803D403EE040E04580498053805A0063006C406EA06FC0806089E091009AE0A160A620A8C0ABE0AD80B720BBA0C5A0CF20D200DC40E160E660E860EC00EEC0F22000000010000002A0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 42 dict dup begin
/.notdef 0 def
/space 1 def
/three 2 def
/four 3 def
/colon 4 def
/A 5 def
/B 6 def
/C 7 def
/D 8 def
/F 9 def
/H 10 def
/I 11 def
/L 12 def
/M 13 def
/N 14 def
/O 15 def
/P 16 def
/R 17 def
/S 18 def
/T 19 def
/underscore 20 def
/a 21 def
/b 22 def
/c 23 def
/d 24 def
/e 25 def
/f 26 def
/i 27 def
/k 28 def
/l 29 def
/m 30 def
/n 31 def
/o 32 def
/p 33 def
/r 34 def
/s 35 def
/t 36 def
/u 37 def
/v 38 def
/w 39 def
/x 40 def
/uni2B91 41 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DD8F68E7C9E6CE89571C79E22E977A5B42C931CC2176483889C4D7E8F08AD6A30D32F921F086F068997EEAC13FC5D4DB04433304F20EAF4CDEBFCC059713B591D123A2CB5C04D69A6F57D3F0C7D8146F138B1F7AD227781281AC46E7984398322682323445F24DD74ED8449B30411FCD31713A15BA78F0CE525B899A853A19F31706288E3786030486EAB866A84C4F29132894E809F8205BF553D314E9DDF0A73E676BC71D001A65DEDD93D2683C5EF6B3BC2C87A64AA77F2BA437CF744F6CC38271033A6F3A32ED815A8864FA0F081C971E96FA712263D75CA7F78043E9106539847D70FB70D154639ECF74C4EB7BBF69C85D556808E1C02A7B0EF200D62BAE9195B9F4D1FCDC2EF2C6224405505D8080BAE272D74C4C66FDDEFA26BB1A5575E8D8C80E93EDA60CD3EE1DE4956EB452CA4DC7A28200310AACF0C9A15A9B231BD66A7743D6030E0FCCAC280517B849C7860C341987DE2B01D2FA62FD7D9C1AB4B5D983070B2AF174E274527BFD7538C5EB0D7AC4A58CE8913DF4B6E623AB65D3B676BF90CB692D1A364748B47AEAA30B7F73D6D8FB6A9ADC5B6111070B4891679682393FF60E5746EDED340C11FCA3CDA5632EDF68B99411E709A86EA98EAD24ED3AD4450647A21C7183139EB2583BABE8351BD16D1F03EA483F7382626BBFF7A3A83EFD5538F990391F7C26B1117AB06DBEF84B3B422E7021F08FE38B3B74C9CA65743A00BAAF554D71AFDCE72CFA98D181DB8AF60E96BF25087FB08EEB4661
F20F2EB2A1BD1FD42E1349A2FEC4B46D494FB5A0B0E4DDBF923D66FC015A54AD1D947290FB6DF9EE0CDC6AD19A007218BB1899B470048BD026F913E10BBF74BD1B1BCA842E6E805F808A81E61D2DFD36CDA2C50CE89B6DE0DE27AF0CCB88898AD77310C8A0102A61603B2696F033DEF687D22704DBCEB98CE6108A1F91FBE6BA0C675D2842A70799C4ADEF38292ECDB1E7B6641BCDA839431B8EC4C56D74451C96FB10E78229CB5618BDABF716470A114FC8FBF8538FF79E588D49D521049BF072FAB91D5E08BEDA77F17B8839631EBB4BEAE2607448C7B569BCB044AE64410A2A8671EB3A417AD56A397C398112AF5909E0A6D3907B3703F550E8EF0C5356331387114848D4C8CF72A765E2D3FF9C29607ED12C0CAC8607451D6DC8C7741CC2F3E445784D5A7782985CB4249D5898B9D12C40058A6A3FE91B8FAB31DBE6CE876F4DA0773A1CA907CCD89EA9B2D5E0FA5FC0A576A789AF42E5403003AA37759FA5019DEC55B9C62B74C381B0BB703C296E5E164ECED8105BD49473E6FBF847676357A0C1DF90AFA01900DEFB51EAB488C50A839644FD6F90395498E5867A592CABA8E821680DB6F08BB431F685A9B53BA9245BC3963F48A32E5DEA3503D18854FF0F6FCA729DA5652C6C23A63EF2D65F650623CA81CABD7C8ED0760AB1595BEAC87C969EF11D941FA98CD42D26628F6B8C6126CDE6F482C1D7EF74F7765EB7449870B45064F90EE6252EE19A746E585395A550EACB13C3A3D3554AC4527A6C2131CB7369FEF2FCEB89342E536907E58597DEF92F1C80E8B76BC8BD04FC717EAFBA9CB061DF435B7BDF68A0E513D6160A6192F9AF252D3BE5E12DF152090F93A0E817428A9EA605F464526DCD1C7F761DC14687188E22EA97C83D8A49834F2CD5A8122B464619A5DAF81B0EE16E2066AF7F1E7684F93683D8ED3D916EDE175943E382D1616C2315F0384B7B16E52B9716CCB53687FDC746126E95B02AF3DD6F1C656E5309DEF04F527B60174B16F489910C80D2CE802E7724AAA7DD0F6619F8F0892477BB8118766FD1C71CF274187654B0D3572D2F7D9D442032D236008867BF366B4D6D5F9C0EF49EF530554E2A44DE33FF8697CF92F42700F921A8729B7AEDDD670D5841697F2155F35763B53D32E61B7AFEC135E42A9585DD67967582580BEC34762B8D9BD3C175630D5243674EA55AE89013FCAB6DDFC22F14904484343C4679FD2AD5D0F3A2B2DBA00D1833244177F4B9570A58F7FFE196C8DAF7BF757346C030055CF4940C05E70539538317C05891BF784D74FC7A81A5444016A1F966034D8B25D9835609C9731F9D59D1A08E167EB40C933278F8BA0804916499AA21EDCF420699D5702A19A5D277ED31A227187E0F67B41EFCBC367B685BD7356595B4B305A2A931511C494BB0B62AD6ACB1A85DEA1DE9F7156ACA414E80214F2291

5078021B10FF56AA4D28261848B59AA1E1095F99AD25E6C794EB804DF02C9A83627C91EAEDD3282EE96C545B8AF5D373057BA916AEB0D98CE1EFC7ADBD37D66555A71DA284C839459D47458B1F1896659AB5F7ADB62D0E5FD9465040418E34846AE195639994A3C5E8FABB685A616EF8C0E1A4818160E2F1049223DDA9C214BC77AADCA5D9809E9947CE5F6EA1251891C3CA25CBA82C4706066342BCAC4DF444582706F40B589C486D0F618D572176C96F25E7845524DE47BFEBAE42A58F104C320C17EE5CD0275C2670ACAA108B8E5E7861C1E26EC52C46CE4C635F74D1E3C76A31306387BB7B574025D3CA2299F1D606683BC3DA19C79F10EFFBF3C6DA4DC855322D1DA5640A82EB62318BD7333722A8CD4BE24DCA8B0DE64AD48B4E04C80844C2CD64AD6E9751EDFB354D4F7317CA2718EDD16813173C4D966BB262F74C67F5502A99EE359A5AC19A15CF10777F200665E1F5C3EEE0E6D7683704DE4AB2EF6F18836525379B4A5D2227DCEEA203B4EF50034D2D8C8B580E15DEA4727C5959A053462A723382FADCCE39243AF5986A1B5D2D39F23CF65C4E6460AE97CED2C302B94FA7A788812E76038785438F9DEFD06FFC2BC634FC6BDC956EDB344CCA780A666A048FC33A70AA67C8A6BE7091024AEF422E7543C2B5A614EDCFB4A89DA83DB130CFDBDFF5B1FFAAA480366643880C3537E3ADA50D457126CDD2A5400FF3AA7DB5C25C4A79F9F06EE6002088DF75C0145298DB4606A9C8E8FE1CE375158B71AFDA6A5A872974EF03DA7BFF2752610098DA1C88932D40768ED26707FCCBFDDD55D63D8E90CFD6066CFC787BAC5E98997CA93D972A4104FD74167AAA688756700E483171925AE6E8644D3DF89886D168A4D38494B1954BABE4E88522EC76C55C285CFB8FA92E34448254C3D7038A71623173E5E087A79A2E45BF60E9AFC252B9E04A4B682675C666046E74A259851B970AD8755324ABD317B319C5F3BAE0D966423D41B3FD9EB5C7D9FF34F03166BA06CDE82E02AEE9D7AA796A22AB74F7E8CE913FB210C098F53732B4F64145A788776EF838E9E0F5D266F3BD4466F090187BB7380506956457D88BD6CB522DA4F8AD3D058FFC3838B060766BCA7FFD2AD9A0072236DE407FE4CBF8E75E80345DFB5E2ADF052CDBE63C8DB5CA694CC237E4824B122C5D3EFC7C11D3EA1597AE5C49112FDACEDF3F2932D700ED70F8FDBAFF68E9E81F53C8E6A77C379B3FC622A36F3EC085BA48E905575B7703801AB08648B3FED079ACBA1D364B2F92C0144083BEA2366BCB9293D8CDD5552CD6B8A73202FF604BC038F02759F03096254BEF14EF55B90018832983C47CD58151F7875E05B71D185DE601A7085F15D2E0A66BC24D03BF15CDA06222722B4D2F4B7C336E3B1EA536863B10A56FE748065895D4BEDFCF5937DAA017438D04EFC825C764B05F
6E7FA93C35C0E10E1C4C4615968EBBE0B24FDF6F39567BD2B393749A766AB40B73C78F251C4079B56DB20CEAF0E1C79020D3719CB35BEC515004FCA4E600FE56BBDE38377233476E0897BF6A9BCE788E2D486BB72E778E513E06873BC463A53747C05EDE7A7FDCBA406E2808772BA308E2D37460C17ADAC4D3B889B3D817E7748EA60C65DD06A9BDFF43E4C96042783D67A02FC40D20068A2100DE03BC2CCE1A754827798C852FF7BC1C0EF21A82A840DBE1FECAD7A4C9CB72FCDD99B23AC47EF14BA6510D779BEABC68755036B066FD51D326C02C40771A3AE1816B4F2D74BDE964E7DDCE2F7C6FF8FDDD82371F27AC8C67663EC26F15DD5A7B17026330AD48BDCAB17C698765CF26D903694C09986E3C020E8E04652AAF5AA89B3B422186250E1AC3EA356F81878F2CB55A81682AFD69BAC78B81B982E1B61F24F1C71D467F654EC1F715849960681984482CD26F454B14FAA8AB543B1B53ECAE828C7BB8472281317ADB3AA5042CAC53D8D51BA37436ECA8A23852D837E6234203B60AD4240BE39DD11A20D7D64FF6E7889029EB82C66A42F865AD15A76979FA2068F6D30A992ACC187DB4131E06827BB70CA58A07D1190A96C4E7EB83AB8CBA113262BA901066A00DECAE5E9D011D4B6E5E13609E8CD3352A376491EF9D9E60D7003D18B398692624F6F78C03A4F73A92C3A7528A22E764B8F03612C0EE19D4EFE7CDBD707157B1E492F6F4B70CAC58E0291005DDAB237F2D2FE7D10003AE6E9FB27BE6728874EC889C09E3784A4783434EAD17223726F317289F160F67B118656578E5617EFB21C856718391436B7F19C4F8A0674F06606D8F35BF0B95AF8793E83C0A99DADC260DB557469E6C52F9177C2C1B2ECCC269342E956B87377A7F18BB3EC555F30926CEE5C1DCACA532FEF4B1C62EFED46BCB3813DF8C09F5B148C4E83CFEA4CEABF4E7AE80A7AFBF0EA0EF49819618D5B638649A07F01D74C9E24E8914273BF583955F279F35BAD4F1F44EE13E123928E9FA4C53CC347219A922110EB6B31A18CEF9C65285A8E43B9E374F2B186DA614C8AA4E9D8F059CD445BB267DD880E4536260D057F2502582A5F40ED6183419FDA3D9DDD7A217A7D0CA95BC188BC160EFAF8240AB2126FDEE6C407E28833B9D8827C1D928E269D654E88FEE6D1710C22F8C57B593CB1CADE6BFCB0D322EDD767A5BA59D46CCD632EDE5BE71EEC9F1DAC883423F8921EE04E0BEF3AEA96A82D123A50A8C4B9BE22C76BCC966A316BE04D721DD88BAD38EC645993B76CB5DC8C294B3F1E3AEECC6C283713875A2BEC6D03751C69B62530920924F7A59728889C2EF0CD7646A898D085A80EAB7E9AEC621A30CD1C3B6F27B37AB378A6FCE908B834CB6BAEA2318F7773CC285C1B96502E7AA5A2C03D6C0261B4346E81A77E847B3E220B3A19357FF0F8EB6C05D066C031C
EAC94F03450220B57D52EDA05426D0E625E784BEA2AFB2AD5063DBC39BC7FF05F951A86D30E0B3EFBCB284B4A91D28982192C879BF9694110BFF95C09BB67992E4E440770083BBDBEC106653905AEA5F7414A935691859257857083E7D16271AAF7713C7FDBD0092CA31653C2A63FD21583D5AE414C68825EA85A67D978059239F64611B3374D3452335F613274CF697C52D91A12C06EFCCB38AE847981055A53D23022B74A83F3D2F297B76AF58F765072B988E9B8DE958C080965B50B8A08E9AE76A1F70AF55B3842A20246E90A7D87B6ED05A673A2CBCE42760FAAB38D105B714C673E3A63DAC38D0A31B1F2484F4E3EF0E6E50ECA7479A92C2BE87FAE5763A2DE1AB3EAB2031E25CF36134E22F68AE40A86718001E779530E02AE596CB2A35D65036B4B387A74E007B67E6E330FEBE595720A1477B04CCCF597001960A34F55D563C5CA9C1BEB8E8A3EE899580AE14BB7D427348E93D8239CEDC21B176CC0C775E11612C8029EFFDC2BF6085F3C7BDB67486498260AD03447D5D51EDD82641AE49D3F34CEC1BEB862BDB3A4B1B695C57B349A78E4D3145B875D86063A5491309EC507E29819625A3F351C6E6757873E2655633C7BB651EC0B2C1CFAAA5D434626B2EEFB7F8E0098273A3C7B64AFBA76B3AD0E4EF1F10066529763370DF763B160E039E787A1A6BA1700031A257BED0A543221BA8B46D77E142D948D5538A972425FB640B299D5C17839F3AD86F945B42B1337A5973356DCE511B0D477BEA3B9AD063A9F76FDD2D0759A8E62DEEC47AD2387D5CC9636DADFF7C56640489BEDE4683B1F67500875D9CD78D17012ADD30BC72811860B29876AF625AC3D01715ECEB8DF04599D8C7B06EEB84D1F8B5F617BC2A6E7E9D666BC89D5AAF50C9138C16B395BD3A846C42C0230C466728CD4BC0ABA0EB3F3DFCF344CDD05648012724F8650AC8283E594124BBC357C91E8DC623D1E06BFFE2A9B8E8ED137BC3839532B58B31EAB1775934DDB1468390E8984A30CB079C2BE368E12258BDEAE60EC3200C9244D48791086C045F7821298B0BA021ECF6F546B8AE393236DB243C6FEFC8143ADF30397FEDAFE8FAAEF64489C48C68EAB81EA93FD68E218932F886688397C2704F0DA5B08DFA81E1F318254BB5590CC97B8CF858E46F5FD840F7F8AC4087C90AE07C59ED0873EF923851E937346BD544F28AA9C4AF0F8B5CB53BD3F173501B1AD095B5C40E967E9A2B95EB2C6D1F9CDEB625FE53217D492B97B36D46080D41168E5F4E541D46E8211D554E61F666C6FE42976081AACDF8ECB6EFD9C3274469F95EC04C8BBB1DB858D93CF6EC5121A5393A161FA8D768F3F5546FE2BEA3CBED232AEA7418666B30B5BEFB37D0BD913F36A926E649A398A21580C769E05FBC7DA2665107CFA77CF0DBD5DCBC80DAA9F608AC4FC1292A0108D5B7B612964292
252D577A64139487816A52470F325E98889410D43D7F395D4E28378B938E003DB3FA5D487C0207B53B46AC73A1F79A6F3959ACAD4B7427E289744F3AAA6D0AB99552CADC2E601B42551A68DACCA484BB51016BA38632C61D73AC244BA311416A9E5F425F4B5DB88E2FAC0269C6351B483915EC089BE132ADC67151182D09F06B67E6BA6811068568EB5DAC74DA9F01E6F82D024098A4D58CAA7E1F2115E3DAB4A20387AACD6EF30D29B0B57029EFFBEB6DEA4CF1F136A0D48C3DD4F92EC3E4381139C640290BDE823909DD512EABA6C3E2767C1F4BD5377B535A49AFE11FEEF7D9EE26235DB689D772621CFAECD50FC23ED36637D16808457036D287FF0DEFD95887087ED9F85B37E3DB633CBFF0B792F1A8CAD9F6E4D79D01D1B5A04952262407AFE273C8F357D7B77268888E694BE586B7EE06AFFB5D291A50BDDB02B9983AE9B97CF7532323FEC1B22F9276D5032A7FA86138B5AE25A0C31C8E8806831BB430F34DAC4E6F35FC932D6F1D15285DE0DA72EDD76211C0EFA5BE8375C8EF5D8B00A1B0609945203414CB89C492AE18D427F96401D8140B685044894E56EE98A80B1DE6CB10FEF1F1F621BD08F86911F0FC463FCBEB8E502C7194BAD72A33B3260B4FFA2D9482D7F8FCEF0AD846E6892824EDDCD46DB126FC4E13763B53B373A1595FED0C375DB230C25D8859D6D8787784FA6D4AA9D0F3DAAE64353E8C0B9761DEEA36D37E0881A150624D41BA9AA0D0BC2F088D0D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1275 621 rc
0 621 m
1275 621 l
1275 0 l
0 0 l
h
0 621 m
f
72 504 m
216 504 l
216 450 l
72 450 l
h
72 504 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
72 117 m
216 117 l
216 171 l
72 171 l
h
72 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 477 cm
/F1.1[ 16 0 0 -16 0 0]sf
-54.231998 6.276001 m
(!"#$%&'\(\)*\)+\),)[ 4.144000 9.488000 8.000000 8.896000 8.896000 8.896000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 504 m
504 504 l
504 450 l
360 450 l
h
360 504 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
360 117 m
504 117 l
504 171 l
360 171 l
h
360 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 432 477 cm
-38.824001 6.276001 m
(%-."/#0\(!")[ 8.896000 3.552000 8.000000 9.488000 12.160000 8.000000 8.592000 5.328000 4.144000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 315 m
216 315 l
216 261 l
72 261 l
h
72 315 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
72 306 m
216 306 l
216 360 l
72 360 l
h
72 306 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 288 cm
-49.639999 5.776001 m
(12340*50#-+0)[ 7.712000 8.896000 8.896000 11.552000 8.592000 5.040000 11.264000 8.592000 8.000000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
72 126 m
216 126 l
216 72 l
72 72 l
h
72 126 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
72 495 m
216 495 l
216 549 l
72 549 l
h
72 495 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144 99 cm
-36.888 5.776001 m
(40*50#-+0)[ 11.552000 8.592000 5.040000 11.264000 8.592000 8.000000 3.552000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
144 171 m
144 296.10001 l
S
0 i
CM
144 316.89999 m
147 324.89999 l
141 324.89999 l
h
144 316.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
144 304.10001 m
147 296.10001 l
141 296.10001 l
h
144 304.10001 m
S
1 J
1 j
0.60000002 i
144 360 m
144 485.10001 l
S
0 i
CM
144 127.9 m
147 135.89999 l
141 135.89999 l
h
144 127.9 m
f
0 J
0 j
1 0 0 -1 0 621 cm
144 493.10001 m
147 485.10001 l
141 485.10001 l
h
144 493.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 174 382.5 cm
-18.672001 5.776001 m
(6037)[ 10.368000 8.592000 8.896000 0.000000 ] xS
1 0 0 -1 174 193.5 cm
-18.672001 5.776001 m
(6037)[ 10.368000 8.592000 8.896000 0.000000 ] xS
1 0 0 -1 145 579 cm
-85.648003 5.776001 m
('8+90*:;\(\)<:="",-+8*-\)3)[ 10.368000 8.592000 8.592000 8.304000 8.592000 5.040000 4.448000 4.736000 5.040000 9.184000 13.648000 4.448000 10.368000 9.488000 9.488000 3.552000 3.552000 8.592000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
144.85294 57 m
144.36176 107.10048 l
S
0 i
CM
144.28333 505.8999 m
147.36162 513.87012 l
141.36191 513.92896 l
h
144.28333 505.8999 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 621 cm
144.28333 115.10009 m
147.36162 107.12988 l
141.36191 107.07107 l
h
144.28333 115.10009 m
S
/Cs2 SC
0 sc
1 0 0 -1 288 501 cm
-37.056 5.776001 m
(,-."/2*"2*)[ 3.552000 3.552000 8.000000 9.488000 12.160000 8.896000 5.040000 9.488000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
360 315 m
504 315 l
504 261 l
360 261 l
h
360 315 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
360 306 m
504 306 l
504 360 l
360 360 l
h
360 306 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 432 288 cm
-34.824001 5.776001 m
(>8"18?,0)[ 13.936000 8.592000 9.488000 7.408000 8.592000 9.488000 3.552000 0.000000 ] xS
1 0 0 -1 525 404.5 cm
-78.816002 5.776001 m
(60,0+*50.*-38*-\)3@,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 11.264000 8.592000 8.000000 5.040000 3.552000 8.896000 8.592000 5.040000 3.552000 9.184000 8.896000 10.960000 3.552000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
666 378 m
810 378 l
810 324 l
666 324 l
h
666 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
666 243 m
810 243 l
810 297 l
666 297 l
h
666 243 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 351 cm
-54.231998 6.276001 m
(!"#$%&'\(\)*\)+\),)[ 4.144000 9.488000 8.000000 8.896000 8.896000 8.896000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
954 378 m
1098 378 l
1098 324 l
954 324 l
h
954 378 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
954 243 m
1098 243 l
1098 297 l
954 297 l
h
954 243 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1026 351 cm
-34.824001 5.776001 m
(>8"18?,0)[ 13.936000 8.592000 9.488000 7.408000 8.592000 9.488000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
648 252 m
828 252 l
828 198 l
648 198 l
h
648 252 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
648 369 m
828 369 l
828 423 l
648 423 l
h
648 369 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 225 cm
-81.928001 5.776001 m
(4\)70AA'\(\)*\)+\),B837,0\()[ 11.552000 9.184000 9.488000 8.592000 4.448000 4.448000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 3.552000 11.552000 8.592000 8.896000 9.488000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
666 126 m
810 126 l
810 72 l
666 72 l
h
666 126 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
666 495 m
810 495 l
810 549 l
666 549 l
h
666 495 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 99 cm
-36.888 5.776001 m
(40*50#-+0)[ 11.552000 8.592000 5.040000 11.264000 8.592000 8.000000 3.552000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
738 297 m
738 359.10001 l
S
0 i
CM
738 253.89999 m
741 261.89999 l
735 261.89999 l
h
738 253.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
738 367.10001 m
741 359.10001 l
735 359.10001 l
h
738 367.10001 m
S
1 J
1 j
0.60000002 i
738 423 m
738 485.10001 l
S
0 i
CM
738 127.9 m
741 135.89999 l
735 135.89999 l
h
738 127.9 m
f
0 J
0 j
1 0 0 -1 0 621 cm
738 493.10001 m
741 485.10001 l
735 485.10001 l
h
738 493.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 776.5 288 cm
-28.440001 5.776001 m
(@0+0-#0)[ 10.960000 8.592000 8.592000 8.592000 3.552000 8.000000 0.000000 ] xS
1 0 0 -1 813 162 cm
-71.112 5.776001 m
(<C@0+0-#0D8,,E8+9)[ 13.648000 8.000000 10.960000 8.592000 8.592000 8.592000 3.552000 8.000000 8.592000 11.552000 8.592000 3.552000 3.552000 10.960000 8.592000 8.592000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
810 270 m
944.09998 270 l
S
0 i
CM
952.09998 351 m
944.09998 354 l
944.09998 348 l
h
952.09998 351 m
f
0 J
0 j
1 0 0 -1 0 621 cm
952.09998 270 m
944.09998 267 l
944.09998 273 l
h
952.09998 270 m
S
1 1 1 sc
CM
954 504 m
1098 504 l
1098 450 l
954 450 l
h
954 504 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
954 117 m
1098 117 l
1098 171 l
954 171 l
h
954 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1026 477 cm
-38.824001 6.276001 m
(%-."/#0\(!")[ 8.896000 3.552000 8.000000 9.488000 12.160000 8.000000 8.592000 5.328000 4.144000 0.000000 ] xS
1 0 0 -1 1119 423 cm
-78.816002 5.776001 m
(60,0+*50.*-38*-\)3@,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 11.264000 8.592000 8.000000 5.040000 3.552000 8.896000 8.592000 5.040000 3.552000 9.184000 8.896000 10.960000 3.552000 9.184000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
666 504 m
810 504 l
810 450 l
666 450 l
h
666 504 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 621 cm
666 117 m
810 117 l
810 171 l
666 171 l
h
666 117 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 738 477 cm
-54.231998 6.276001 m
(!"#$%&'\(\)*\)+\),)[ 4.144000 9.488000 8.000000 8.896000 8.896000 8.896000 10.368000 5.040000 9.184000 5.040000 9.184000 8.592000 9.184000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
738 243 m
738 180.89999 l
S
0 i
CM
738 448.10001 m
735 440.10001 l
741 440.10001 l
h
738 448.10001 m
f
0 J
0 j
1 0 0 -1 0 621 cm
738 172.89999 m
735 180.89999 l
741 180.89999 l
h
738 172.89999 m
S
/Cs2 SC
0 sc
1 0 0 -1 777 414 cm
-36.287998 5.776001 m
(!"F\)\(G8\(7)[ 4.144000 9.488000 9.184000 9.184000 5.328000 12.128000 8.592000 5.040000 0.000000 ] xS
1 0 0 -1 882 501 cm
-39.728001 5.776001 m
(%-."/2*"2*)[ 8.896000 3.552000 8.000000 9.488000 12.160000 8.896000 5.040000 9.488000 8.896000 0.000000 ] xS
1 0 0 -1 885.5 363 cm
-36.287998 5.776001 m
(!"F\)\(G8\(7)[ 4.144000 9.488000 9.184000 9.184000 5.328000 12.128000 8.592000 5.040000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
1035 171 m
1035 233.10001 l
S
0 i
CM
1035 379.89999 m
1038 387.89999 l
1032 387.89999 l
h
1035 379.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
1035 241.10001 m
1038 233.10001 l
1032 233.10001 l
h
1035 241.10001 m
S
1 J
1 j
0.60000002 i
1017 243 m
1017 180.89999 l
S
0 i
CM
1017 448.10001 m
1014 440.10001 l
1020 440.10001 l
h
1017 448.10001 m
f
0 J
0 j
1 0 0 -1 0 621 cm
1017 172.89999 m
1014 180.89999 l
1020 180.89999 l
h
1017 172.89999 m
S
1 J
1 j
0.60000002 i
810 135 m
944.09998 135 l
S
0 i
CM
952.09998 486 m
944.09998 489 l
944.09998 483 l
h
952.09998 486 m
f
0 J
0 j
1 0 0 -1 0 621 cm
952.09998 135 m
944.09998 132 l
944.09998 138 l
h
952.09998 135 m
S
1 J
1 j
0.60000002 i
954 153 m
819.90002 153 l
S
0 i
CM
811.90002 468 m
819.90002 465 l
819.90002 471 l
h
811.90002 468 m
f
0 J
0 j
1 0 0 -1 0 621 cm
811.90002 153 m
819.90002 156 l
819.90002 150 l
h
811.90002 153 m
S
1 J
1 j
0.60000002 i
216 135 m
350.10001 135 l
S
0 i
CM
358.10001 486 m
350.10001 489 l
350.10001 483 l
h
358.10001 486 m
f
0 J
0 j
1 0 0 -1 0 621 cm
358.10001 135 m
350.10001 132 l
350.10001 138 l
h
358.10001 135 m
S
1 J
1 j
0.60000002 i
360 153 m
225.89999 153 l
S
0 i
CM
217.89999 468 m
225.89999 465 l
225.89999 471 l
h
217.89999 468 m
f
0 J
0 j
1 0 0 -1 0 621 cm
217.89999 153 m
225.89999 156 l
225.89999 150 l
h
217.89999 153 m
S
1 J
1 j
0.60000002 i
441 171 m
441 296.10001 l
S
0 i
CM
441 316.89999 m
444 324.89999 l
438 324.89999 l
h
441 316.89999 m
f
0 J
0 j
1 0 0 -1 0 621 cm
441 304.10001 m
444 296.10001 l
438 296.10001 l
h
441 304.10001 m
S
1 J
1 j
0.60000002 i
423 306 m
423 180.89999 l
S
0 i
CM
423 448.10001 m
420 440.10001 l
426 440.10001 l
h
423 448.10001 m
f
0 J
0 j
1 0 0 -1 0 621 cm
423 172.89999 m
420 180.89999 l
426 180.89999 l
h
423 172.89999 m
S
/Cs2 SC
0 sc
1 0 0 -1 358.5 372 cm
-63.848 5.776001 m
(60,0+*6\)2\(+0@,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 10.368000 9.184000 8.896000 5.040000 8.592000 8.592000 10.960000 3.552000 9.184000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 621 cm
216 522 m
656.09998 522 l
S
0 i
CM
664.09998 99 m
656.09998 102 l
656.09998 96 l
h
664.09998 99 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 621 cm
664.09998 522 m
656.09998 519 l
656.09998 525 l
h
664.09998 522 m
S
/Cs2 SC
0 sc
1 0 0 -1 435 111 cm
-112.912 5.776001 m
(6037:03+8".2,8*07:78*8:*\):H1@)[ 10.368000 8.592000 8.896000 9.488000 4.448000 8.592000 8.896000 8.592000 8.592000 9.488000 8.000000 8.896000 3.552000 8.592000 5.040000 8.592000 9.488000 4.448000 9.488000 8.592000 5.040000 8.592000 4.448000 5.040000 9.184000 4.448000 8.288000 9.184000 0.000000 ] xS
1 0 0 -1 948 405 cm
-63.848 5.776001 m
(60,0+*6\)2\(+0@,\)+)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 10.368000 9.184000 8.896000 5.040000 8.592000 8.592000 10.960000 3.552000 9.184000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
