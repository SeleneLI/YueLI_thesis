%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1845.000000 964.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1845 964
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1845 964
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /t put
dup 39 /y put
dup 40 /x put
dup 41 /T put
dup 42 /R put
dup 43 /one put
dup 44 /space put
dup 45 /two put
dup 46 /C put
dup 47 /n put
dup 48 /r put
dup 49 /p put
dup 50 /a put
dup 51 /e put
dup 52 /D put
dup 53 /H put
dup 54 /d put
dup 55 /v put
dup 56 /s put
dup 57 /fi put
dup 58 /h put
dup 59 /u put
dup 60 /L put
dup 61 /I put
dup 62 /S put
dup 63 /P put
dup 64 /hyphen put
dup 65 /N put
dup 66 /m put
dup 67 /c put
dup 68 /g put
dup 69 /slash put
dup 70 /three put
dup 71 /f put
dup 72 /k put
dup 73 /q put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<


B80040DC00BA000D001600032BB8000D10BA0027003200032BB8002710BA003A000300032BB8003A10B8000310B80001D0B800012FBA001F0003003A111239B8003A10B8003DD0303113153633321E0215140E022322262723061E0233323E0235342627353E0135342E0223220E020733343E0233321615140E022B01222322DA181B20372818192A381F494C025501213E5836325942273F412A38213A4F2E3551361D02551021332236481625311B12050504019548031123332120332313574537563B1E1B365135405E0E02134A3031482E17223C54331F382A1939391C2C1D0F000001002BFFF002AA02DB0025006DBA001E000B00032BB8001E10411B0006001E0016001E0026001E0036001E0046001E0056001E0066001E0076001E0086001E0096001E00A6001E00B6001E00C6001E000D5D410500D5001E00E5001E00025D00BA0019001000032BB8001910BA0006002300032BB8000610303101332E0323220E0215141E0233323637230E0323222E0235343E0233321602445F08344E6438527F552C29527C53899E0E5F031E35492F405C3B1C1C3B5B404B6D01F339573A1E3B66894E4E88643996872C4C371F30516D3D386851304C0000000002004E0000029A02CA000E0019007DB8001B2FBA0001000F00032BB8000110B8001B10B80016DCB80007DC410500DA000700EA000700025D411B0009000700190007002900070039000700490007005900070069000700790007008900070099000700A9000700B9000700C90007000D5D00BA0000001000032BB8000010BA000F000100032BB8000F103031371133321E0215140E0423031133323E0235342623ADA0425A39191B2A35363010FDF559825428B2A550022A25476540425D3E241305027AFD36325F8B5AACA80000000001004E0000028402CA000B0047BA000B000000032BB8000B10BA0006000500032BB8000610B8000B10B80002D0B8000510B80008D000B800002FB800072FB800012FB800052FBA000A000300032BB8000A1030311311331121113311231121114E5F01785F5FFE8802CAFD360147FEB902CAFECD01330000010052000000B102CA00030017BA0003000000032BB800031000B800012FB800002F303113113311525F02CAFD3602CA0000000001004E0000022702CA0005001FBA0005000000032BB800051000B800002FBA0004000100032BB800041030311311213521114E01D9FE8602CAFD3650027A00000100500000031702CA000E0057BA0003000000032BB8000310BA000B000800032BB8000B10BA000D0000000B11123900B800012FB800052FB800092FB800002FB8000B2FBA000400010000111239BA000800010000111239BA000D000100001112393031131133113313331333113311230B01505A02DF51DF025A82E2E102CAFD3602







00>] def
/CharStrings 43 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/slash 3 def
/one 4 def
/two 5 def
/three 6 def
/C 7 def
/D 8 def
/H 9 def
/I 10 def
/L 11 def
/M 12 def
/N 13 def
/P 14 def
/R 15 def
/S 16 def
/T 17 def
/a 18 def
/b 19 def
/c 20 def
/d 21 def
/e 22 def
/f 23 def
/g 24 def
/h 25 def
/i 26 def
/k 27 def
/l 28 def
/m 29 def
/n 30 def
/o 31 def
/p 32 def
/q 33 def
/r 34 def
/s 35 def
/t 36 def
/u 37 def
/v 38 def
/x 39 def
/y 40 def
/fi 41 def
/uni2B91 42 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DCC1A72EBAA9FD2DD8062C0D7B70D35F8191632F50C1AD56FF8964A29AFFEE955E14B6D64F7DE926B93765D7F4DC14C23F78ED6B500671DECE4E428071F8A03CF5A8A1A9EDE30738CD6C9D22C0B9B5BE797EB61BA0D16F9F080D522CD85A283987447B5E87F6C19059AAE5E8D04B309B1E50384B99DE7E6FDC36316E4D5CE270B4DE6F472261D2F6352102AD13982595737CF0660B194C08F74DC7733171D49B44388493CD3A2EA781A1E35AD689B818C262457C9E130EABB2DC46217ABA981B8AE35E49A81509C1686651170699C1ED7AC949CC9E4A42F69483013E133FC183D6B02635AEFB3FA5EB7E2662EF4825500372DB3F5BE720CDBFE842B237EFFD4D216E5CD487BE90C744D1DB63E7B6ADDEBC6FB6B123D452FD059334C319FE3C3BCDCD65EA0910B9BBFF550EDF401451CA2376B543CA5A4DE6DE54582451D104EA8D6BCBE6606061017D577D4E91719DFBA4FA168EC68C01C4718952B900D7DA23B6AE664C2BC7ED434C8D14A047F331B00B28232EDEB9059D9032BA50A18AABDE8E2656EB7A5DFC2D221D626549F866604195A1BA415DE8655AF448A25EB185BDAE861D80329D82F95AE167A80CBC5CF2C83E52254EFA14126DCD7D61592DBD8E797141A75F0BDA1D53DDD27D822963C4071F95F544C258D4D08E63B09F837DFF0050EF1134C77A5040EFC2D48FAEB5B7D11A96B1DECFBE63FD53B3BBD1A9CA69F7C404511A4FF7726654210C0CE50F4762C1E5616473D1B56552008A3BED14A0
8826BACD3C81F0FFFB23D62F1355D41C9ED0F85FB94B80826BEDC7EAF96DCE50181AC65B45EF4B71F1CAF80DF3D6EC1E1E7D373472D7BD1BE4D01C924B3EC405D3CEF9A5576912C88D44BA181F814C567F557A17D7B785E1DDDB2BD03080C058BB7954D518123C546B89367DC2F61D81D43F2CAF9717067452035C8355DA07C61549DA4B5C39F88A41A899F2AD1521A56FAB7D990E9BA3B6461C4DF6394400886FAD182B60560A5FD6355D621F4083BA0E44E52DDFDBCF5C7D673259247F00B525D6B5B58AFA054DD4AD4E2A253641C403F7BCF4AE1CE3BC40564922F4057D81B86E7A7AE1834CCB3AB8CCDB22F14B4CFD8F1F74FE77E9496B5BD03640BE3B33A276A6E119BA2465A64BBCD75B9DE9C35FA8BEB51FD2D1BE8CDFE1E3BC813A08EB34EA1BAFBB404507512F052D12D3F82BAB5FCD2D438BC1E22D559A84AAF2EEB4EEA67EEF8FDA17116AFE9DCCB1D70FE929EBAD98CCD06D6A7CAD62ABABC54572C243919645B9C7CE8A07B0CD08105899B7812A741741C35206A5151709FD6804354937949FAB86890199D50E5CD18FBE57366162D7E26DB8D8B054B0677C4480F6140B2D02E75779FBD1762694713BA18A3BEE1D20A88876FE0F38F5703997C7E76E4AEF425B7F4713E65635A63B60AE24AA5F4A196006FC56461F6A68D75712825F78312CE696EB3FEF2AFB9A1F5559CEF357EEACF45CA35CC657C3B6FA6820E73E0B2022023D43205888196AD441C9ADC24349606EF0FA915FA8C45729C81797A2F452487EAE71C9C885AFCA17C343336B302DF304E71BF022E52A80F52DDAF69571B62C0B9E34A11956AE3E1B18FFC71D7BB047E51653A0EF3A1ECC6214EE6B3DC6EA5202EE02A0E36684CACB4595BA4259A435490FF6A0C4EA808F0E98EB04EAEBC83D7EB985FB68DF78C684DB47361C046728FEA3B230FFC664D632728081033179E302236489BEC64D41C12416887B20A90118A07882EC604493F6EB246938E50FF7D446FDA8394088E80B655F4568D8CC5E619AAE90B24F9264FEF0603764CF3201F70EEE376AB9D782C13A89B5E738F395110855670AB5726EB3778FD1F0664C76E6A28C19629F6904DF1F27DB46FB34CCFB5529F1AAF4EA3E03D730F4C0DAC101238A7319FDE0C5870DD254A75B48FBEC2EA76E21A0ABAE0DC7441BFAAA731121C1E3AB1551412BB23223329DA3F459D1F5A058E4FF84D13D6EDA7B7F7D21EDBA6B567CF982FC5C0F1ED8BC007359C9B24A1B381427C4875FD0D35F5E05A7CC3843CF65CD3C4D606F4425D947921C23435802C79D240F664389C386283C068675508FCE8191C9026FECF084EE080331E4F210D4B34A5D624F27BE2D1A960F1CCFE7926FE47B341F309AF3E3AF931A2C0FC17976B6280E51009F998CBA22EF30D795DECDD820348324ED0422A18031AE6981F29D72444D446DF277


8C0C2EB45FE75A9C190551A863318956EE2853D3783F0D6FD02BD35DABD80951E11F0F0405E6C657D182FDE7F5C5A0B98F57DEF9474BD2E36EC1BBEE1BC955CD0728FCEFF68DF81BDCE0F168D4B27403DB9DFAC5E59C35FBCD93B8C6780516091CE9EFB23B31554FA90F5C2BE7A4380941CE6424ACB229D4101B4EE53E793206C125CBC9490A3442E6EB8FAE33D2293946D888286307BA4861CC6ABF7F40BBF5C9A050B04F4A46C3E72A3CD0866800D31015D6BE27A4BE087632DD21FE97BFB60B2897E23248883582C232682A1FF3A39B0E4FF8DC93586C3C14CBEF1227867982F4C853C4E256AAEEF6466A23B98C1248FCF1328E4EF9F504C3AFE1A6BE383EA6CD9D463A3B14D944CEEBB20AF5814834ACB5850A65B6AFEEBDFC64B7A6987B41E85093E88E8ECEB17CC5C8207C4821352B88DC07AFD8D9C97C844B1C38FFDF9B21C732E42746D549DE1C47CE89A0FF5BD2CDC1FC1CBAE6D8CE6BB2231929AAC7B4F39DD36EC7B14ABA51B44A5E0A224F89D8A7290DD3C9F2F124F4A18E00EC1857D28E978AD6C27C9E9DCC5A602F245865162184DE20B45F6E69AED85FCB0B4E4BDB88CD68A916C573D4B1CE69E23A9109E31D797106A53CDAE23FEBF674795AF99081D805811182B4BFD448CBA52BF9AAF1E8AD0A0D19FE4A9FF571A59974879FAA381E9C468C42D84B05E333371F307F10F0AB21CEF9CFF754B23BCF5A7A6A1D33499E345C49DB482E2B1A7416D2AADDC7FBC1081AAD4A1FAA85A0F055B161C5352C231964E4F523D9DF7614C73FDFBC9E986D801F42801F53620A0641B40982D1F6866B07CBB83D30AB2A8BBA9DABA372854112CCB86597ECE7BD86A38A0B0849EC6E6139709928A80E64668EC0C298748A4446A3645EED917BA11B2A21A31910546F0061D574386C1755531B9DA55179DA775FEAC927CB3EE43D6A51FD2F93EDE5280587C44546C820827790F18C6960CE884E0F8DEA884576D66A16D09EA42F46E2B65F23045E414FDF59E1BD1892BC976179AB5DCCECF76D46E77D0E1A4A9B9AC06827607B8365659966EF3080FD15DEBDD0CA3BB5B1E276E37CFD29A9984FC3A89AE74AD77E40D6F396D4C464A5DC95C16D3D6EEDADCB88553A7CEC69A07BC7C3041EE4089E40A92D3FEB96B251452A35246609199A7E77A797B66AA22A63C284538E30408722D7C52DF1C8D4C4BE644705FC15833834BF76265796C802371FE97E80C0F03CA750B0E03AADE173CA51673081CF89D84752DE718575DEB163E87D92F5584F35EFB9564C61E1250F0CDBD70BB41D8AB56B17E2EB363BD3D47E01C1F84B8287D681B415C6D018C45E73A7292E9C03F465A986416765E3A1BED6361C39F600F6744E585AE9C7C58A88E17E6B43438CB4DC627CB59B47A5CC5B03BAE240C651B4E6F9309ADE45F03AC6D47ACF4AB048A8C08AB9E3B5D5C0
62D0D6D28F37210E17DE35BA8756CB1C5F6153BD414845440FB7536A19CEA06FDD639A7C8439206A21F4D7BFA69DFD1B22F743956DC0A556E9411CC9D3D144E574CFFDD3861E1D11A36FD3BDED58546835E7B19AEE487FB9930DCA112E6E725F118AB0E24C9EE352422A89908B07A975DA5744CB8B4D9137D5AA86FDA75A89C1DB5ED311BD0704D322BFC82E05F2DACFB6FBFEED063E3E6850426ABC02BB82855162AE169AF347944CAADB5A0D1CB3B1973129D1A9A21508C54D20BAD2BF31C0A6357E95CDC1F4756CEFE6ADFE75859C1C1DCBB8A60034B1C7522FD3E5B2CA3FE3AD1C12E673E6862AE7AC96BD3165F904AA515BDADD2001E98060D5BDA41C9C846E3D70428C457AC1196DEED9D511A8D87426DD05C7481FE6D98ACF435AE74BEB2C4CE77CF7F0E8BE37831F61E133597E2F6A61FF8E0D5A60F01C02BFD22A00792648E181F1214886C9060169A8663021FD48C1C22A8CDFC925C97926408B7E3FE97609777766CE464911F0EA5A6A06E1980147D7072D424796B52086117518369F2343C90000E5C74AF4C16B5E70953D09D490BDCEB34BCCBB3F9E8B762D4595CC57D9FA3122F980C6F2386C720083901F8C5BD2892D0F9EECD9F0ABDD00372112632DAA7AAD9FEACC6D6CB3949C6D0BDBD411772336FC5E84D58D6ED5A581E2109CA39043B4DAC42F4E499C366E881BE785E97C25FB95F30988A84263738980A8517E744C02D97F651D0AB229189175BDCC0E1FABCD435BA13544EC709168D67CCE0E09BA35B8DCFAE63DC1B7BFAB210513FF1F54E3397FFB4EA1184FE706153B956861015442FF13AA87ED323FD838E91FD570808A15407101DFDDFD319BCB0707FB3C049535178E6A3610770BC68DA8D8D534EEEFE6852B811E779946E39B721421E18BEDE8C38C303775CBC657DD6D0EF2E2149184D6E2BE1F02C4C57D71061BA2DC05B5579D2C4538B7DD369527553966186E37CB16DAEDAAF23210D9F73729A64B4D63AE9986D6588A8BB40751C7FF68010A54A63BB845B6296F2BBF1BAF3ECAC65A014FB7B0DE5ABD9DCAB7DC3EBCC8882CF253E4CDE2722984481903CB0210137AEEFF2365CED572D32242CEC27EF1DD61ECB77C7164460E01C68F6902B7CE4A793619F182CA93E5B13DC2D068A63215063F3E78DED529E097C9CD29329FC0B5EEFD6E0755B60C64B0DE9FDE87201C30AFB24E217E791F3D8B4AFF2D6F6E18736BFCE0ADE2C0931B60787560CBFF19B2220181CDECC69906091FD2188B80121880E964FC2EDD6E4468DDE55A16756606899315765699B0DEABEEC342B79819C890B6ED73714D24EB4C6EB24A845BE49484F32BF194404DD5584052A06EE19AD8C367EC76288D76DD9C35E2611B86F80ED67C1F6A8CD09D0374BC991C7F738D5BB5AD6BCB641586181B9A1E6FA3303B2080F7A989A6615EC714C4CE
92BCB57543076DAE75ABCA25DA63228A215F24C70C1E2FBC6E4CD00B660094DE8E6BA9C00BC316CCA83B3F0501F760831478A3CE904C931DF161A4EB89FBBADA95AB57D5FC6FB49A84CB05C43ABD5C08AFEB9D135E77E6E3270F519A9A4CB9293CED6A2FE355928580CD7E830DDBDFA7DF6E5900055D9D91991E13BF2C3AB30CB9A6078D75E63664087A1E1DB21B81ACAEED7F8577260A698CAF00F82EEA4A1FF87086FA6ADC32EE46FE36B4CFCC60F850D58BE55CD182F0DCDAF4B29E111F8B57DB6EDA00ADAD3C64B7B5E5CAA9308924551C198625BE5F57E87C217A7CE63BB036037A710078DA2293D4E95FB256CB6DA13B89EDFEC775B00E75990ABDF10E2EF863FC1EDD90111C092A62B2A6A383A236151A8F4A909A79F037F6723F32ECDDB2E2C79C4A4429312F19A826D9BAEBC83F825AD140C37702003CE95351F9C1F0851CC1133A10A9FEB998947F92A0F18D0F36198C4074B39CDD3F6167901A10BF0FABCC7505710F8FDC9E72EE14D2162958C6A971D8B4FE6BC355F6BB4F2995AC15EBF91E69FB42589E696BF542C080413AD41D35031CA0CD54993E9C396516708D3019059C56EA494FE38B3218836905772073EADA30878F40AF45915EBAFD4A48E3FD8188900883847A189F6D952FD564F046C2F83DEB6B0DA784C4CA71683E9B36DEC4BC055BDD4D394808A19AEBAEDB388DB0B478439DA84E820C10EA18190ED23FDC3165BF31DF0923E82024BED4FF2B69D7D0443576E85CD6F10105C3555D9C1F47EBA7EEDC26FF4C97C10247FD31F597420DB21810D823606034BA7728DC57057839ADB010F7BBEA53889F274EF93AA522E80277E40B7A2BEC520FA185925A8B4249FD66B97C18F0B0842C75CF9F942A18FB41FD44EA32CA6B8B66CC10E8BE1E083295D365DFDC56FFFCA938748E73E468C08D2189D14BC156B480F65360D66BBF9A543C76B0DA2A70A6011DA87CF6D849F1AD22EC5C5D6F792DED244788A4FB4EEFBEFD5C19F24AC2403D7F6AE1F52DEE73154369B1A27DD55DE0A725460597C3EF1439DA173B7E9BF79F7E6D6BED42093EAB57D71FA75321C975D2C22271089130CEEAE5A410CE45EFF660684B5DB38B499CEC21B9BEB18447D6D4BA6946CBE73F5ECBD0938D8BF2026FDB05B4B845497B9D6F3215B57746008CDE80EC4D51D32CC69BDAAF28C403A2AB333564C79EC4E8211024CA2B8FCD71C079508952405CB219086FDD706096C917D35DB77A064647465ECBA15612F842F1BE42E87C71E79879ADE2C205859590ABDE5C5A9EDEBC718172A9C013537E1DB506A9E2D4C952FBC608495269821D025100ECFC40A9E391C693BB830F7D68A14FEAB33D5C9FDFEAE6571620DBFAF32EB1C944783B11867B6CDB7D4BE015F2562F85E6BFF9FE8AE47291223728863E6B41C591BC44C09E25640D7674C321C7FF519D
06088B4D9FBE286670B7FD91FB7C1B0B264C34FDB4918EE2505BA66A0EEECFCEDBEF77F4EF8338286C2757EB3DBD2E6B72BE21656A51AD9F460B3EDC550B0C3CAF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1845 964 rc
0 964 m
1845 964 l
1845 0 l
0 0 l
h
0 964 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 964 cm
162 72 m
162 810 l
S
2 w
[
16
8
2
8
] 0 d
0.69411767 0 0.10980392 sc
162 142.17021 m
162 142.17021 99 152.09146 99 171 c
99 184.57205 131.45752 198.19347 149.77826 204.80109 c
S
0 i
CM
158.87227 756.13934 m
150.92136 762.61261 l
148.62547 755.78845 l
h
158.87227 756.13934 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
158.87227 207.86063 m
150.92136 201.38737 l
148.62547 208.21152 l
h
158.87227 207.86063 m
S
/Cs2 SC
0 sc
1 0 0 -1 253.5 761 cm
/F1.1[ 30 0 0 -30 0 0]sf
-86.5 -6.8399963 m
(!"#$%$&')[ 26.130000 17.220000 17.790000 6.660000 6.660000 6.660000 9.450000 0.000000 ] xS
-86.5 29 m
(\(\)*)[ 15.540000 17.220000 0.000000 ] xS
/F1.1[ 20 0 0 -20 0 0]sf
-33.189999 29 m
(+)s
/F1.1[ 30 0 0 -30 0 0]sf
-22.07 29 m
(,&",\(\)*)[ 8.340000 9.450000 17.220000 8.340000 15.540000 17.220000 0.000000 ] xS
/F1.1[ 20 0 0 -20 0 0]sf
74.589996 29 m
(-)s
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1108.8995 873.14313 m
1218.1005 873.85687 l
S
0 i
CM
1232.5001 90.049019 m
1218.1357 95.543022 l
1218.0652 84.743248 l
h
1232.5001 90.049019 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
1232.5001 873.95099 m
1218.1357 868.45697 l
1218.0652 879.25677 l
h
1232.5001 873.95099 m
S
CM
1094.4999 90.950981 m
1108.8643 85.456978 l
1108.9348 96.256752 l
h
1094.4999 90.950981 m
f
1 0 0 -1 0 964 cm
1094.4999 873.04901 m
1108.8643 878.54303 l
1108.9348 867.74323 l
h
1094.4999 873.04901 m
S
/Cs2 SC
0 sc
1 0 0 -1 1353.5 95 cm
/F1.1[ 30 0 0 -30 0 0]sf
-90.014999 11.080002 m
(."/&0"%,1%2/3)[ 21.660000 17.220000 16.680000 9.450000 9.450000 17.220000 6.660000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
7 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
313.89963 873.14606 m
449.10037 873.85394 l
S
0 i
CM
466.70013 90.053925 m
449.13495 96.745979 l
449.06583 83.546165 l
h
466.70013 90.053925 m
f
0 J
0 j
1 0 0 -1 0 964 cm
466.70013 873.94604 m
449.13495 867.25403 l
449.06583 880.45386 l
h
466.70013 873.94604 m
S
CM
296.29987 90.946075 m
313.86505 84.254021 l
313.93417 97.453835 l
h
296.29987 90.946075 m
f
1 0 0 -1 0 964 cm
296.29987 873.05396 m
313.86505 879.74597 l
313.93417 866.54614 l
h
296.29987 873.05396 m
S
/Cs2 SC
0 sc
1 0 0 -1 570.5 95 cm
-72.239998 11.080002 m
(42&2,1%2/3)[ 21.120000 16.110000 9.450000 16.110000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
3
9
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 964 cm
693 270 m
117 270 l
S
0.69411802 0 0.109804 sc
693 781.5 m
117 781.5 l
S
0.69411999 0 0.1098 sc
0 i
1 0 0 -1 88.5 647 cm
-65.279999 -6.8399963 m
(52/6"730)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-37.5 29 m
(8&20&8)[ 15.000000 9.450000 16.110000 9.990000 9.450000 0.000000 ] xS
1 0 0 -1 88.5 149.5 cm
-65.279999 -6.8399963 m
(52/6"730)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-50.834999 29 m
(9/$8:38)[ 15.540000 16.680000 6.660000 15.000000 16.680000 16.110000 0.000000 ] xS
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 964 cm
448 69.164642 m
449 261 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 449 925.02429 cm
/F1.1[ 50 0 0 -50 0 0]sf
-88.900002 17.800003 m
(*";&30+)[ 34.250000 28.700000 27.800000 15.750000 26.850000 16.650000 0.000000 ] xS
1 0 0 -1 170 925.02429 cm
-101.825 17.800003 m
(<=>?@!A)[ 27.800000 12.950000 32.400000 32.400000 19.450000 43.550000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
189.8997 134.87143 m
420.43661 133.80911 l
S
0 i
CM
438.03641 830.27197 m
420.40619 836.79083 l
420.46701 823.59094 l
h
438.03641 830.27197 m
f
0 J
0 j
1 0 0 -1 0 964 cm
438.03641 133.72801 m
420.40619 127.20918 l
420.46701 140.40904 l
h
438.03641 133.72801 m
S
CM
172.2999 829.04749 m
189.93011 822.52863 l
189.86929 835.72852 l
h
172.2999 829.04749 m
f
1 0 0 -1 0 964 cm
172.2999 134.95255 m
189.93011 141.47137 l
189.86929 128.2715 l
h
172.2999 134.95255 m
S
/Cs2 SC
0 sc
1 0 0 -1 862 858.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(."BB;/$C2&$/D)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
747 225 m
747 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 739 774.21143 cm
/F1.1[ 50 0 0 -50 0 0]sf
-88.900002 17.800003 m
(*";&30-)[ 34.250000 28.700000 27.800000 15.750000 26.850000 16.650000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1034 219.97746 m
1035 675 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1035 774.21143 cm
-84.699997 17.800003 m
(!*E!>)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1457 69.164642 m
1457 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1458 925.02429 cm
-57.825001 17.800003 m
(\(\)*F)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1754 72 m
1753 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1745 925.02429 cm
-35.599998 17.800003 m
(.A)[ 36.100000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
476.24234 134.78783 m
1429.101 127.06813 l
S
0 i
CM
1446.7003 837.07446 m
1429.0475 843.53168 l
1429.1544 830.33209 l
h
1446.7003 837.07446 m
f
0 J
0 j
1 0 0 -1 0 964 cm
1446.7003 126.92555 m
1429.0475 120.46835 l
1429.1544 133.66792 l
h
1446.7003 126.92555 m
S
CM
458.64291 829.06958 m
476.29581 822.61237 l
476.18887 835.81195 l
h
458.64291 829.06958 m
f
1 0 0 -1 0 964 cm
458.64291 134.9304 m
476.29581 141.3876 l
476.18887 128.18803 l
h
458.64291 134.9304 m
S
1 J
1 j
0.60000002 i
1484.8989 127.08878 m
1726.0232 129.22067 l
S
0 i
CM
1743.6226 834.62372 m
1726.0815 841.37909 l
1725.9648 828.17957 l
h
1743.6226 834.62372 m
f
0 J
0 j
1 0 0 -1 0 964 cm
1743.6226 129.37628 m
1726.0815 122.62093 l
1725.9648 135.82042 l
h
1743.6226 129.37628 m
S
CM
1467.2996 837.06683 m
1484.8406 830.31146 l
1484.9573 843.51099 l
h
1467.2996 837.06683 m
f
1 0 0 -1 0 964 cm
1467.2996 126.93317 m
1484.8406 133.68852 l
1484.9573 120.48903 l
h
1467.2996 126.93317 m
S
1 J
1 j
[
28
28
] 0 d
0.60000002 i
189.89922 350.79031 m
719.10077 346.8129 l
S
0 i
CM
736.70032 617.3194 m
719.05121 623.78693 l
719.15039 610.58728 l
h
736.70032 617.3194 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
736.70032 346.68063 m
719.05121 340.2131 l
719.15039 353.41272 l
h
736.70032 346.68063 m
S
CM
172.29971 613.07739 m
189.94882 606.60986 l
189.84961 619.80951 l
h
172.29971 613.07739 m
f
1 0 0 -1 0 964 cm
172.29971 350.92258 m
189.94882 357.39014 l
189.84961 344.19049 l
h
172.29971 350.92258 m
S
/Cs2 SC
0 sc
1 0 0 -1 443 633.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-41.939999 11.080002 m
(45.?)[ 21.120000 21.660000 21.660000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
162 424.33334 m
737.5 424.17163 l
737.49731 414.67163 756.49731 414.66629 756.5 424.16629 c
1012.5486 424.09433 l
S
0 i
CM
1026.9486 539.90973 m
1012.5471 545.30566 l
1012.5501 534.50568 l
h
1026.9486 539.90973 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
1026.9486 424.0903 m
1012.5471 418.69434 l
1012.5501 429.49432 l
h
1026.9486 424.0903 m
S
/Cs2 SC
0 sc
1 0 0 -1 461 565.1109 cm
-90.894997 11.080002 m
(!21@*3D$8&30)[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1034.6029 494.29596 m
756.5 494.94528 l
756.47778 485.44531 737.47784 485.48965 737.5 494.98962 c
183.89993 496.2822 l
S
0 i
CM
169.49998 467.68417 m
183.91255 462.31781 l
183.88733 473.1178 l
h
169.49998 467.68417 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
169.49998 496.31583 m
183.91255 501.68219 l
183.88733 490.8822 l
h
169.49998 496.31583 m
S
/Cs2 SC
0 sc
1 0 0 -1 902 493.11093 cm
-75.285004 11.080002 m
(!21@A"&$G')[ 26.130000 16.110000 17.790000 11.670000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 0 0 -1 457 412.11093 cm
-33.060001 11.080002 m
(>!*)[ 19.440000 26.130000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1457 631.78577 m
1056.809 633.57983 l
S
0 i
CM
1042.4091 330.35562 m
1056.8331 325.02023 l
1056.7848 335.82013 l
h
1042.4091 330.35562 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
1042.4091 633.64441 m
1056.8331 638.9798 l
1056.7848 628.17987 l
h
1042.4091 633.64441 m
S
/Cs2 SC
0 sc
1 0 0 -1 1249 358.11093 cm
-186.77499 11.080002 m
(>!*@$/7"H36,!21@*3I;38&)[ 19.440000 26.130000 20.550000 11.670000 6.660000 16.680000 15.000000 17.220000 15.570000 16.110000 17.790000 8.340000 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
162 698.45044 m
737.50012 695.65948 l
737.45404 686.15961 756.4538 686.06744 756.49988 695.56732 c
1435.1002 692.27643 l
S
0 i
CM
1449.5001 271.79343 m
1435.0741 277.1235 l
1435.1265 266.32364 l
h
1449.5001 271.79343 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
1449.5001 692.2066 m
1435.0741 686.87646 l
1435.1265 697.67633 l
h
1449.5001 692.2066 m
S
/Cs2 SC
0 sc
1 0 0 -1 457 291.88907 cm
-73.904999 11.080002 m
(!21@*31%')[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
162 576.45453 m
737.5 575.45728 l
737.48358 565.95734 756.48352 565.92438 756.5 575.42438 c
1025.2802 574.95862 l
1025.2637 565.45862 1044.2637 565.42572 1044.28 574.92572 c
1435.1 574.24847 l
S
0 i
CM
1449.5 389.77646 m
1435.0907 395.15152 l
1435.1094 384.35153 l
h
1449.5 389.77646 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
1449.5 574.22351 m
1435.0907 568.84851 l
1435.1094 579.6485 l
h
1449.5 574.22351 m
S
7 w
1 J
1 j
0.60000002 i
189.89999 763.11548 m
719.10004 762.59619 l
S
0 i
CM
736.70001 201.42108 m
719.09357 208.0038 l
719.10651 194.8038 l
h
736.70001 201.42108 m
f
0 J
0 j
1 0 0 -1 0 964 cm
736.70001 762.57892 m
719.09357 755.99622 l
719.10651 769.19617 l
h
736.70001 762.57892 m
S
CM
172.29999 200.86725 m
189.90646 194.28452 l
189.89351 207.48451 l
h
172.29999 200.86725 m
f
1 0 0 -1 0 964 cm
172.29999 763.13275 m
189.90646 769.71545 l
189.89351 756.5155 l
h
172.29999 763.13275 m
S
1 J
1 j
0.60000002 i
774.89911 762.12036 m
1429.1008 756.97693 l
S
0 i
CM
1446.7003 207.16144 m
1429.049 213.62286 l
1429.1527 200.42328 l
h
1446.7003 207.16144 m
f
0 J
0 j
1 0 0 -1 0 964 cm
1446.7003 756.83856 m
1429.049 750.37714 l
1429.1527 763.57672 l
h
1446.7003 756.83856 m
S
CM
757.29968 201.74129 m
774.95105 195.27986 l
774.84723 208.47945 l
h
757.29968 201.74129 m
f
1 0 0 -1 0 964 cm
757.29968 762.25873 m
774.95105 768.72015 l
774.84723 755.52057 l
h
757.29968 762.25873 m
S
1 J
1 j
0.60000002 i
1484.9 757.76251 m
1725.1705 757.92542 l
S
0 i
CM
1742.7705 206.06265 m
1725.175 212.67458 l
1725.166 199.47458 l
h
1742.7705 206.06265 m
f
0 J
0 j
1 0 0 -1 0 964 cm
1742.7705 757.93738 m
1725.175 751.32544 l
1725.166 764.52539 l
h
1742.7705 757.93738 m
S
CM
1467.3 206.24945 m
1484.8955 199.63751 l
1484.9044 212.83751 l
h
1467.3 206.24945 m
f
1 0 0 -1 0 964 cm
1467.3 757.75055 m
1484.8955 764.36249 l
1484.9044 751.16248 l
h
1467.3 757.75055 m
S
/Cs2 SC
0 sc
1 0 0 -1 925 228.88908 cm
-105.655 11.080002 m
(."BB;/$C2&$/D)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 964 cm
1034.9092 633.6546 m
756.5 633.99548 l
756.48834 624.49548 737.4884 624.5188 737.5 634.0188 c
183.89998 634.69659 l
S
0 i
CM
169.5 329.28577 m
183.9066 323.90341 l
183.89337 334.7034 l
h
169.5 329.28577 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 964 cm
169.5 634.71423 m
183.9066 640.09662 l
183.89337 629.29657 l
h
169.5 634.71423 m
S
ep
end
%%Trailer
%%EOF
