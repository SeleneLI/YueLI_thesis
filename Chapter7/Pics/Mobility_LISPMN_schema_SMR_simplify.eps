%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1854.000000 1031.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1854 1031
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1854 1031
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /t put
dup 39 /y put
dup 40 /x put
dup 41 /T put
dup 42 /R put
dup 43 /one put
dup 44 /space put
dup 45 /two put
dup 46 /C put
dup 47 /n put
dup 48 /r put
dup 49 /p put
dup 50 /a put
dup 51 /e put
dup 52 /D put
dup 53 /A put
dup 54 /c put
dup 55 /H put
dup 56 /d put
dup 57 /v put
dup 58 /s put
dup 59 /fi put
dup 60 /h put
dup 61 /u put
dup 62 /L put
dup 63 /I put
dup 64 /S put
dup 65 /P put
dup 66 /hyphen put
dup 67 /N put
dup 68 /m put
dup 69 /g put
dup 70 /slash put
dup 71 /three put
dup 72 /f put
dup 73 /k put
dup 74 /q put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<










00>] def
/CharStrings 44 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/slash 3 def
/one 4 def
/two 5 def
/three 6 def
/A 7 def
/C 8 def
/D 9 def
/H 10 def
/I 11 def
/L 12 def
/M 13 def
/N 14 def
/P 15 def
/R 16 def
/S 17 def
/T 18 def
/a 19 def
/b 20 def
/c 21 def
/d 22 def
/e 23 def
/f 24 def
/g 25 def
/h 26 def
/i 27 def
/k 28 def
/l 29 def
/m 30 def
/n 31 def
/o 32 def
/p 33 def
/q 34 def
/r 35 def
/s 36 def
/t 37 def
/u 38 def
/v 39 def
/x 40 def
/y 41 def
/fi 42 def
/uni2B91 43 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DB32BE3CF9B96EEE4DDC28114FB50FC585C362A19F51A7A6E4345D1A42DD3C1FA759732CC13EAB8EE103937983ECE0247EFA6CA188136295312DE524B8EE497969E74AB317006733A978EEE40A426B89916F61F396C64DE10F70047938E093FD151A4E3795149236601239185B947541FB727130A877E998968FA04BFD9C557E551A21CC3D18E5105C6C5E9B30A485B7D75EAF50FE179EE98E2B1DB9B869919448FD5539EA9078FB58FA4EFDE461D936B9082B20999EF007EF62C234AA65853BF1CA5E9F15DBA81EBF043CFD1EC4EEE31825CEF21DC85EC386C9D831E8B13123A58E0607F5F638988EBE5C092BEF52DE34FDD137ABCF33651D6FD20DE6B0C22C7D3F32AA16CC538DBC23B434582F79D4754E7C74EE4FC097EA18C104356A02C6B095942C5B6A117E0A9B29B482495A03322FEE0170CD4C55C3C8C24C43A44EA155DA9DD61DDDD23AAE58580F8A39D551D956670F2EF1397BB1499F502B2F1DBD8F3DF39D8DAE93BA5B08DAE1BF4E4CBE620DA9CF42E46D2F9E1DF779E7F9CC7E41DA913836CD63D4C5C72735AA9D9B5285DF7039539FB77E0FCA3F014B273744E7AB696AB5F103C2A5E9787A45DAB3CABA884923EF94CA1D66609163695E88FF5F511E802100982A4E1A1CCF7DC8EF0867269932E3444D3355863D0D4DBE4FA389B7C1E117CFAC32467609436729C496A80B9D6177C3F4748EFAF2EB4D43678FBA4E653A365D7C1353CA2707C2361FD63C56F034AC271233DE6C62B3D1B3157B

3495E1FC54B25F5EF00A010A6DCB6E86664CAC6424A32C9E787EA1239FF4F7070D088982E41633A2DCBF73A7EE199D0E03F30961FC55FDCA11416A03170AC048D99D220AD2FFE80DB413EDFAE2159647C8DAD67442F2D3887874CF261B305B034DBFB8867413D2F3956616742E09D6FC65E7B1B2E26FEE2E77009191FF09F617C00849FD8A45C2A20C38D7F80C94214BAE83676A3D5F88CF3A9A6011004E5529957A90C7BE501365CFA8C2FAF5D34A18D8CC1DD5764001F60AE9D821485BE9CBC1779ED5B7AD64178D05148FCB6176EC78285A99BB5DEA11AF512355B25FA3C3070336D89EB9791885E37023EC8210518DF879A41C6C7ED919417870232D02E7D1B6CE698C1F04016F2EDBACA0B9BFBF8E255AEBE50CEA6DAA5ED2B260266CC66BB3D99C779297FB5F90077D4A9F66C996CFA55EA7AC1EA2DBFD0F4D643D47E4342CDFBC89AC9CFB0E7B87F6390E5243DF5937A18761DC818B2C9F156E2225A241005E0CCEF69A64E082B954A3BE4AA2B2639ADD5356FE59D2CAB4626F882C9DAAE3ECC3194247B12A7B64788682249E45EAB60A9805D4D1B07FB0F5889CC62AD7EA1182BBBB99BAA8A57A5AD5D9E7CBB488FC0C199C487E164EE9868CF376DCCEA59A8803ED18B850277C6E23EE21318BAFF559369C225CFE1D7E404AAE0E48EE2CEC829E6680B95CB4D740CC32F88FF5CF281E225AE3F59469C5D464A5104807C4179E4EFB9FB532FC87D3CA3925D678BD05FF1585404645826AAEB774EBCDF48BD0178226ADB09896B8426486E4785737949980A18B0824EF2653AC9CF897C965E8BC17360DF99CBEB3CF507FF0EFF05A175A134FD93B4CF2C2221E18C069B0EC8755682A93F1CD7BCED97CF11A2790C06CA29AF5FA9E2F5792F9A95314E75A8CEECEA3568113535683D193D705F25C16AE70240C23F8A98EAB1C76BB87E6F9FAE2B169AD29915B9719918049F528797143FF79BAEB8440862464B5244306C7FDF4CD2D515E275EEE82F49D6445003BFFBDEC365662E303CFF95CF02DF06C8C53F9686DCA4EBAAC060BF7EAA61BD41FBA1DD760A521BB0922971F4C2353B0A8153AE1BFD7E27D7786BE553CC32E788EE269662B5D5729667D5E02398AEAE9D2979F9CA659DF644C5AF7EA1DEC6274EAAB78AA5F3E43DD2C9F0BA6E8AEDF4F925A1C51F6D0C922D08EE74F7F01D7EC16B519A209E6B543278B418F62471328F65735C1475515FE9D4620A7CA249B3E6C8BD239EC86670188F0F70925A32700323ABD73D3784901445A6E37BB19DC59FA722CC1042267AB07E1459701A628B6DA3D1669EB91A9093DA70E22CAA5EF072DC97EC8F73AD9A4FC506CA44818A3290295BEE3E0FD7DF51396B462B31F92DC2DB8EA59FDDC932DF90EA99BEDBAC6154C1343556109FECEC0BD047131C178B30445E13BF70AF5B7423C1BE9F978B99E
095DC7203D0D2F9DE1CED1DACCE466BA087EF4A0E341398D05FB3978143E2403E458C15BA8A8C2D6128603EAFFEC1B1F2F7661A35A91698708E3F90F3DC79C88967146944724288867BB176C9936D2F22643C3881E767280C3A89242367C4976DDAF9F759A0604056EBD00D88A6E701F5A3481969BF85073CFE04B6BCA067DC69E771894F3C05D425073564574AEEA37210D0ACFB4401178B9FAB156759C579FA65D7726D9F2FF55ECF850D6DAC7BD6AAB91B221C422CE26EBDF3974B114742D4BCD2EA3170F62D909F24A4158CB1667447CB46BB25EB2A8C9FEF3C3DE5A7ECBFE83D4A3A3264DE6AD3B97F67E3E99A90E040CD8AC1DFF2309070D3AC737144FEAC68DC4D1D3F06AAFDD553F1F911B06005377B4304BBB08B57B183DD4BDE8945065E178F3CA9843BF4C918754446EA85A73CFB7CFEA1318568AA322505442375005ADC22E4C39BF948A09A3CC9DD2CE39E685A3EDC1C60C1CF3C2D5171A069CA5B89CED9D6C122B9A2F2E377D2FC99E76CE3DC3F8DF8FBAF9CC01CFC36CD3A43F7917E32BA00AF9569106012144FCA95F460EF6C7CED53AFBA8B194A9A5EBD7DFF62DE7C4E3B9825B0151ADDF7FE6B0C0CBD30B656B69C00288086E35612A824DC1F4011453661D8B6832821A5FFCE7DE66167430052D64EA68E8DFF901C932550FAC6F11DC6CDCE0B082A24706527AF7AD8A361F8A3974D7F2911C815FF9A69DB4E4426823E7D875A4579BB3293D57C282C71B33536257073C46B85DCB247401C6F7B31FFFF07695A4781E11EAA152F2EBAF4D66D4B768B73537A0009411A6A7FE96FB634D6D21EC1AC0759E9AD645E014BC3ED86A7601C98732A55AA12FDE5330D51A9FF6C93F9720F70938607086B62CF136F7E73B48C482360FD5E6E407A6ADD9564DDA72072B172C7CDE32C1D3BBEA30E0E53957DE23B0F525C8FEEBDF06672FEE179152B3EC0D5E63E759F6025558CE287E752A6E1539E84A5E45A0D669A746CC0EC0565275D91B36FAD03338182BE96E94B97F1D4EC9A2A6337CD72A73286D2F02CD5DADDDCB994DA2967FE972BD0AF93EA5ABB653BE68B16437EF3C1849D3390DAF1CBAD81501EBD43A6D58EB6B240B55263FFDA36AB1AD89E68776F0F95A52471BFB18EC1BE739982CFB380A12AF255EF783F5E5FD2FDD568A93B69B2295EFC3E2ABB3ADFC775C5E1BE58600D061B24742FF5B8F157E35EB944CB6065F7E3F8AEDEBC78EAD181E082F64510DA34E6EB97642F7B8861BB13C1D7C56777CE7864E697685CA69C7C272009D9542763206AA6E10244DBE57D9875F2C1671E265D13DB6A9728944FBC96EB75B1D9CF7CF4F6D350E752F9CF8DB86EDD0172DF2C5D4247E620B991452820E5AA42111CB31CE0B660149A9CA9F5861F34D040531E2511250F5B8A47E53DA9E1437C8B292860A6E068C4CC0561396D7A59CE5


7904DFE44823DF81049EBF043BEBCD7FA61976A4386047E2AF90371ADA475B8A8BF29F20FB9DAA33A3C8E28CF16C47B7A35D5120D7E086C7B0AC9039B21193B83C8C65FED1AB478214AEE4E4C24827E7263DB725D91F2B05B39629784B835BDB99EE21FF3257A7A064603F53B200CB69A81CF9355F5B5EBFDF339A4DBD01E44D1DBCA22C26EDCBA9B252F5873773AB9512EDC4AC3133871EC5A635A56E6F38D5ED9F340183155C532C5B4355A79F940ED8ACDB20A76EAA321A0D9B294EDCDAAE46AFD062474D54D5B27B6AB4395A2CC455560052BA248F8A3DFB25A2DD40923F1BEB3472BD9F3F5C5711AABE672AD63BFAA20B87FCA7BE19421E99B0FB08F31BC1B77C1CE348E6521C13C2F10806B2B5145140D9AC330DE3142A28069152B182DBAE9E2ACDD71A3544D5FE69ECA5AB0655E8A2CD4F8D304FA0519D30621D00B9A0BFD41651B3DB828E8A13B6D7D4177FB757A65349CA28BD12D71DC11A27E7905B898897390FC950D3D2FDF77345A7C857E230F9F2961736048F166572AABAF2B39121386F3059C4B551EAC4E07E59FBE78DD96DDA1F1AB9184B18BC0BEA4058C8A5D9273BAA01B1180B42E5233380958174DD47AA6C0F5DC25BAA32A33303B5C9F1CBF44FA3B609513338289E089D298A50E2E036E3171B820108876C02B50D7116593E553A678C18A08F3936974AC1AD5DC0DFE321154ACD28E4E508C26E31EAE3BF03C32D278C9FBC54FBC81789DC550A9F25DB78416943AA1A8A2F86B455AB045B591CDD3F48B6ACEE9C84339CAEA9E1A3412A9C5FDBB329E57E870122C8B27DEEEC7DC07DA035638F06B8FCA77226F7423C4CB254125CF88753AFC2376877C82BAB28FE36BC318292B121BA843A05DECD9D2FEF09531A3D613E3A3D4246AACA44C70E9E70F73302D40F25060FA28DCCEBCBAA689337CF1C1CC04A28CD02449F72752598651D0C4CAE57BBEE80FAE0FC832B7C1F99D9F61A08C23145BD9B58F8CE5A5FAD8F2409E200E30111E5443C9920B1342189EE23569B42A93A74C0B18702FB8083D20CE682A6D800D3C38FB2A3412D1509FD0951D40411872059C9A35FFCC6EF6885871F758ED24B00111BF8B451C13F694C45624706964AACB98FEAD5DE6F1729EB8076A08BE98BE5A2DEE09193353F5E72F2DB6025CFCA4E5830896F2923CE6E5243CA553A2E460CD2DF964C43049C111B85B2C557CE54128E3A0E1B392F1D9D9C06F91D2E98D7CDDC99FF9F3E9899BB2DEACE26AD27484775F97F6D46726769E537E54BF806F3A32BD501A57FDC5579C7B424DBA3EC32AF2CF0110DC1902260A1EE35963EB8469497299678181D82720CC69E7E90BD6D4EF6D27C74716EE6630A6F7912F71E3F4CD31EA8A05695D7A8EDA1AF7DFEC4303E6D768B1FC827D8C1A60F98001AC6935BCCDDCDCE8558954A19C157E3051ECD8DF337
3B3274FD6182C4A7D25B51F36D2B885A6352808BFA024AF28FF2E2D8EAC10FB41F09A9E2D0FC33F88C6FDCEE2E39105DB69784D07E635CE4D5D559BA61AB3679AB6686AF4B85387F96365AB01B2A8814BEF1F60911BA6D5CB8798DA35943B25E07506CD5B1BE295AF2363462051C5446EC1FD1EBB595212F31AC29891EC2202F5FC9EEF8286E4BF31F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1854 1031 rc
0 1031 m
1854 1031 l
1854 0 l
0 0 l
h
0 1031 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 1031 cm
171 99 m
171 837 l
S
2 w
[
16
8
2
8
] 0 d
0.69411767 0 0.10980392 sc
171 169.17021 m
171 169.17021 108 179.09146 108 198 c
108 211.57205 140.45752 225.19347 158.77826 231.80109 c
S
0 i
CM
167.87227 796.13934 m
159.92136 802.61261 l
157.62547 795.78845 l
h
167.87227 796.13934 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
167.87227 234.86063 m
159.92136 228.38737 l
157.62547 235.21152 l
h
167.87227 234.86063 m
S
/Cs2 SC
0 sc
1 0 0 -1 268 801 cm
/F1.1[ 30 0 0 -30 0 0]sf
-92 -6.8399963 m
(!"#$%$&')[ 26.130000 17.220000 17.790000 6.660000 6.660000 6.660000 9.450000 0.000000 ] xS
-92 29 m
(\(\)*+,&",\(\)*-)[ 15.540000 17.220000 20.550000 16.680000 8.340000 9.450000 17.220000 8.340000 15.540000 17.220000 20.550000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
786.89954 936.14313 m
896.10046 936.85687 l
S
0 i
CM
910.50018 94.049019 m
896.13574 99.543022 l
896.06519 88.743248 l
h
910.50018 94.049019 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
910.50018 936.95099 m
896.13574 931.45697 l
896.06519 942.25677 l
h
910.50018 936.95099 m
S
CM
772.49982 94.950981 m
786.86426 89.456978 l
786.93481 100.25675 l
h
772.49982 94.950981 m
f
1 0 0 -1 0 1031 cm
772.49982 936.04901 m
786.86426 941.54303 l
786.93481 930.74323 l
h
772.49982 936.04901 m
S
/Cs2 SC
0 sc
1 0 0 -1 1031.5 99 cm
-90.014999 11.080002 m
(."/&0"%,1%2/3)[ 21.660000 17.220000 16.680000 9.450000 9.450000 17.220000 6.660000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
7 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
277.89963 936.14606 m
413.10037 936.85394 l
S
0 i
CM
430.70013 94.053925 m
413.13495 100.74598 l
413.06583 87.546165 l
h
430.70013 94.053925 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
430.70013 936.94604 m
413.13495 930.25403 l
413.06583 943.45386 l
h
430.70013 936.94604 m
S
CM
260.29987 94.946075 m
277.86505 88.254021 l
277.93417 101.45383 l
h
260.29987 94.946075 m
f
1 0 0 -1 0 1031 cm
260.29987 936.05396 m
277.86505 942.74597 l
277.93417 929.54614 l
h
260.29987 936.05396 m
S
/Cs2 SC
0 sc
1 0 0 -1 534.5 99 cm
-72.239998 11.080002 m
(42&2,1%2/3)[ 21.120000 16.110000 9.450000 16.110000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
40
20
5
20
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 1031 cm
1272.9 936 m
1382.1 936 l
S
0 i
CM
1396.5 95 m
1382.1 100.4 l
1382.1 89.599998 l
h
1396.5 95 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
1396.5 936 m
1382.1 930.59998 l
1382.1 941.40002 l
h
1396.5 936 m
S
CM
1258.5 95 m
1272.9 89.599998 l
1272.9 100.4 l
h
1258.5 95 m
f
1 0 0 -1 0 1031 cm
1258.5 936 m
1272.9 941.40002 l
1272.9 930.59998 l
h
1258.5 936 m
S
/Cs2 SC
0 sc
1 0 0 -1 1462.5 95 cm
-42.779999 11.080002 m
(56&$"/)[ 19.440000 16.110000 9.450000 6.660000 17.220000 0.000000 ] xS
3 w
1 J
1 j
[
3
9
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 1031 cm
702 297 m
126 297 l
S
0.69411802 0 0.109804 sc
702 808.5 m
126 808.5 l
S
0.69411999 0 0.1098 sc
0 i
1 0 0 -1 97.5 687 cm
-65.279999 -6.8399963 m
(72/8"930)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-37.5 29 m
(:&20&:)[ 15.000000 9.450000 16.110000 9.990000 9.450000 0.000000 ] xS
1 0 0 -1 97.5 189.5 cm
-65.279999 -6.8399963 m
(72/8"930)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-50.834999 29 m
(;/$:<3:)[ 15.540000 16.680000 6.660000 15.000000 16.680000 16.110000 0.000000 ] xS
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 1031 cm
457 96.164642 m
458 288 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 458 965.02429 cm
/F1.1[ 50 0 0 -50 0 0]sf
-88.900002 17.800003 m
(*"=&30+)[ 34.250000 28.700000 27.800000 15.750000 26.850000 16.650000 0.000000 ] xS
1 0 0 -1 179 965.02429 cm
-101.825 17.800003 m
(>?@AB!C)[ 27.800000 12.950000 32.400000 32.400000 19.450000 43.550000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
198.8997 161.87143 m
429.43661 160.80911 l
S
0 i
CM
447.03641 870.27197 m
429.40619 876.79083 l
429.46701 863.59094 l
h
447.03641 870.27197 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
447.03641 160.72801 m
429.40619 154.20918 l
429.46701 167.40904 l
h
447.03641 160.72801 m
S
CM
181.2999 869.04749 m
198.93011 862.52863 l
198.86929 875.72852 l
h
181.2999 869.04749 m
f
1 0 0 -1 0 1031 cm
181.2999 161.95255 m
198.93011 168.47137 l
198.86929 155.2715 l
h
181.2999 161.95255 m
S
/Cs2 SC
0 sc
1 0 0 -1 871 898.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(."DD=/$62&$/E)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
756 252 m
756 837 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 748 814.21143 cm
/F1.1[ 50 0 0 -50 0 0]sf
-88.900002 17.800003 m
(*"=&30-)[ 34.250000 28.700000 27.800000 15.750000 26.850000 16.650000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
1043 246.97746 m
1044 702 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1044 814.21143 cm
-84.699997 17.800003 m
(!*F!@)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
1466 96.164642 m
1466 837 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1467 965.02429 cm
-57.825001 17.800003 m
(\(\)*G)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
1763 99 m
1762 837 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1754 965.02429 cm
-35.599998 17.800003 m
(.C)[ 36.100000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
485.24234 161.78783 m
1438.101 154.06813 l
S
0 i
CM
1455.7003 877.07446 m
1438.0475 883.53168 l
1438.1544 870.33209 l
h
1455.7003 877.07446 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
1455.7003 153.92555 m
1438.0475 147.46835 l
1438.1544 160.66792 l
h
1455.7003 153.92555 m
S
CM
467.64291 869.06958 m
485.29581 862.61237 l
485.18887 875.81195 l
h
467.64291 869.06958 m
f
1 0 0 -1 0 1031 cm
467.64291 161.9304 m
485.29581 168.3876 l
485.18887 155.18803 l
h
467.64291 161.9304 m
S
1 J
1 j
0.60000002 i
1493.8989 154.08878 m
1735.0232 156.22067 l
S
0 i
CM
1752.6226 874.62372 m
1735.0815 881.37909 l
1734.9648 868.17957 l
h
1752.6226 874.62372 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
1752.6226 156.37628 m
1735.0815 149.62093 l
1734.9648 162.82042 l
h
1752.6226 156.37628 m
S
CM
1476.2996 877.06683 m
1493.8406 870.31146 l
1493.9573 883.51099 l
h
1476.2996 877.06683 m
f
1 0 0 -1 0 1031 cm
1476.2996 153.93317 m
1493.8406 160.68852 l
1493.9573 147.48903 l
h
1476.2996 153.93317 m
S
1 J
1 j
[
28
28
] 0 d
0.60000002 i
198.89922 377.79031 m
728.10077 373.8129 l
S
0 i
CM
745.70032 657.3194 m
728.05121 663.78693 l
728.15039 650.58728 l
h
745.70032 657.3194 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
745.70032 373.68063 m
728.05121 367.2131 l
728.15039 380.41272 l
h
745.70032 373.68063 m
S
CM
181.29971 653.07739 m
198.94882 646.60986 l
198.84961 659.80951 l
h
181.29971 653.07739 m
f
1 0 0 -1 0 1031 cm
181.29971 377.92258 m
198.94882 384.39014 l
198.84961 371.19049 l
h
181.29971 377.92258 m
S
/Cs2 SC
0 sc
1 0 0 -1 452 673.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-41.939999 11.080002 m
(47.A)[ 21.120000 21.660000 21.660000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
171 451.33334 m
746.5 451.17163 l
746.49731 441.67163 765.49731 441.66629 765.5 451.16629 c
1021.5486 451.09433 l
S
0 i
CM
1035.9486 579.90973 m
1021.5471 585.30566 l
1021.5501 574.50568 l
h
1035.9486 579.90973 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
1035.9486 451.0903 m
1021.5471 445.69434 l
1021.5501 456.49432 l
h
1035.9486 451.0903 m
S
/Cs2 SC
0 sc
1 0 0 -1 470 605.1109 cm
-90.894997 11.080002 m
(!21B*3E$:&30)[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
1043.6029 521.29596 m
765.5 521.94525 l
765.47778 512.44531 746.47784 512.48969 746.5 521.98962 c
192.89993 523.28223 l
S
0 i
CM
178.49998 507.68417 m
192.91255 502.31781 l
192.88733 513.1178 l
h
178.49998 507.68417 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
178.49998 523.3158 m
192.91255 528.68219 l
192.88733 517.8822 l
h
178.49998 523.3158 m
S
/Cs2 SC
0 sc
1 0 0 -1 911 533.1109 cm
-75.285004 11.080002 m
(!21BC"&$H')[ 26.130000 16.110000 17.790000 11.670000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 0 0 -1 466 452.11093 cm
-33.060001 11.080002 m
(@!*)[ 19.440000 26.130000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
1466 658.78577 m
1065.809 660.57983 l
S
0 i
CM
1051.4091 370.35562 m
1065.8331 365.02023 l
1065.7848 375.82013 l
h
1051.4091 370.35562 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
1051.4091 660.64441 m
1065.8331 665.9798 l
1065.7848 655.17987 l
h
1051.4091 660.64441 m
S
/Cs2 SC
0 sc
1 0 0 -1 1258 398.11093 cm
-186.77499 11.080002 m
(@!*B$/9"I38,!21B*3J=3:&)[ 19.440000 26.130000 20.550000 11.670000 6.660000 16.680000 15.000000 17.220000 15.570000 16.110000 17.790000 8.340000 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
171 725.45044 m
746.50012 722.65948 l
746.45404 713.15961 765.4538 713.06744 765.49988 722.56732 c
1444.1002 719.27643 l
S
0 i
CM
1458.5001 311.79343 m
1444.0741 317.1235 l
1444.1265 306.32364 l
h
1458.5001 311.79343 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
1458.5001 719.2066 m
1444.0741 713.87646 l
1444.1265 724.67633 l
h
1458.5001 719.2066 m
S
/Cs2 SC
0 sc
1 0 0 -1 466 331.88907 cm
-73.904999 11.080002 m
(!21B*31%')[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
171 603.45453 m
746.5 602.45728 l
746.48358 592.95734 765.48352 592.92438 765.5 602.42438 c
1034.2802 601.95862 l
1034.2637 592.45862 1053.2637 592.42572 1053.28 601.92572 c
1444.1 601.24847 l
S
0 i
CM
1458.5 429.77646 m
1444.0907 435.15152 l
1444.1094 424.35153 l
h
1458.5 429.77646 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
1458.5 601.22351 m
1444.0907 595.84851 l
1444.1094 606.6485 l
h
1458.5 601.22351 m
S
7 w
1 J
1 j
0.60000002 i
198.89999 790.11548 m
728.10004 789.59619 l
S
0 i
CM
745.70001 241.42108 m
728.09357 248.0038 l
728.10651 234.8038 l
h
745.70001 241.42108 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
745.70001 789.57892 m
728.09357 782.99622 l
728.10651 796.19617 l
h
745.70001 789.57892 m
S
CM
181.29999 240.86725 m
198.90646 234.28452 l
198.89351 247.48451 l
h
181.29999 240.86725 m
f
1 0 0 -1 0 1031 cm
181.29999 790.13275 m
198.90646 796.71545 l
198.89351 783.5155 l
h
181.29999 790.13275 m
S
1 J
1 j
0.60000002 i
783.89911 789.12036 m
1438.1008 783.97693 l
S
0 i
CM
1455.7003 247.16144 m
1438.049 253.62286 l
1438.1527 240.42328 l
h
1455.7003 247.16144 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
1455.7003 783.83856 m
1438.049 777.37714 l
1438.1527 790.57672 l
h
1455.7003 783.83856 m
S
CM
766.29968 241.74129 m
783.95105 235.27986 l
783.84723 248.47945 l
h
766.29968 241.74129 m
f
1 0 0 -1 0 1031 cm
766.29968 789.25873 m
783.95105 795.72015 l
783.84723 782.52057 l
h
766.29968 789.25873 m
S
1 J
1 j
0.60000002 i
1493.9 784.76251 m
1734.1705 784.92542 l
S
0 i
CM
1751.7705 246.06265 m
1734.175 252.67458 l
1734.166 239.47458 l
h
1751.7705 246.06265 m
f
0 J
0 j
1 0 0 -1 0 1031 cm
1751.7705 784.93738 m
1734.175 778.32544 l
1734.166 791.52539 l
h
1751.7705 784.93738 m
S
CM
1476.3 246.24945 m
1493.8955 239.63751 l
1493.9044 252.83751 l
h
1476.3 246.24945 m
f
1 0 0 -1 0 1031 cm
1476.3 784.75055 m
1493.8955 791.36249 l
1493.9044 778.16248 l
h
1476.3 784.75055 m
S
/Cs2 SC
0 sc
1 0 0 -1 934 268.88907 cm
-105.655 11.080002 m
(."DD=/$62&$/E)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1031 cm
1043.9092 660.6546 m
765.5 660.99548 l
765.48834 651.49548 746.4884 651.5188 746.5 661.0188 c
192.89998 661.69659 l
S
0 i
CM
178.5 369.28577 m
192.9066 363.90341 l
192.89337 374.7034 l
h
178.5 369.28577 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1031 cm
178.5 661.71423 m
192.9066 667.09662 l
192.89337 656.29657 l
h
178.5 661.71423 m
S
ep
end
%%Trailer
%%EOF
