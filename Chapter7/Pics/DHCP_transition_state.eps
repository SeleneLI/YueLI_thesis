%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 905.000000 834.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 905 834
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 905 834
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /B put
dup 34 /o put
dup 35 /u put
dup 36 /n put
dup 37 /d put
dup 38 /L put
dup 39 /I put
dup 40 /S put
dup 41 /P put
dup 42 /space put
dup 43 /a put
dup 44 /t put
dup 45 /b put
dup 46 /s put
dup 47 /e put
dup 48 /p put
dup 49 /N put
dup 50 /T put
dup 51 /R put
dup 52 /q put
dup 53 /i put
dup 54 /g put
dup 55 /w put
dup 56 /l put
dup 57 /c put
dup 58 /parenleft put
dup 59 /parenright put
dup 60 /W put
dup 61 /f put
dup 62 /r put
dup 63 /m put
dup 64 /x put
dup 65 /D put
dup 66 /H put
dup 67 /C put
dup 68 /v put
dup 69 /y put
dup 70 /A put
dup 71 /K put
dup 72 /M put
dup 73 /O put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








0723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B0009003100190031002900310039003100490031005900310069003100790031008900310099003100A9003100B9003100C90031000D5DB8000BDCB8000010B8002ADCB80015DCB8000B10B8003CDC00BA0036000600032BB8003610BA0025001A00032BB8002510B8000610B80000DCB8002510B8001FDC303137231E0333323E0235342E02272E0335343E0233321E0217332E0323220E0215141E0415140E0223222E02745502243C4E2B274F3F271D2F3D201E3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D30520000000001000E000001E602050007001900B800012FB800052FB800002FBA000400000001111239303121132303230323130129BD598D02915FC00205FE5101AFFDFB00010011000002E50205000F003500B800012FB800052FB800092FB800002FB8000B2FBA000400000001111239BA000800000001111239BA000E000000011112393031211323032303230323032313331333130240A55874026C5D6802755EA65C6802690205FE5901A7FE5901A7FDFB019BFE6500010009000001FD0205000B002700B800072FB8000A2FB800012FB800042FBA000300010007111239BA0009000100071112393031130333371733033723072723CBC26790906DC8B266817C6D0110FEF0D6D60117EEB5B500010008FF3101EC020500160086B800142B00B800014558B800112F1BB9001100083E59B800014558B800152F1BB9001500083E59B800014558B800052F1BB9000500063E59BA0009000500

00>] def
/CharStrings 43 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/A 4 def
/B 5 def
/C 6 def
/D 7 def
/H 8 def
/I 9 def
/K 10 def
/L 11 def
/M 12 def
/N 13 def
/O 14 def
/P 15 def
/R 16 def
/S 17 def
/T 18 def
/W 19 def
/a 20 def
/b 21 def
/c 22 def
/d 23 def
/e 24 def
/f 25 def
/g 26 def
/i 27 def
/l 28 def
/m 29 def
/n 30 def
/o 31 def
/p 32 def
/q 33 def
/r 34 def
/s 35 def
/t 36 def
/u 37 def
/v 38 def
/w 39 def
/x 40 def
/y 41 def
/uni2B91 42 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DCC1A72EBAA9FD2DD8062C0D7B70D35F8191632F50C1AD56FF8964A29AFFEE955E14B6D64F7DE926B93765D7F4DC14C23F78ED6B500671DECE4E428071F8A03CF5A8A1A9EDE30738CD6C9D22C0B9B5BE797EB61BA0D16F9F080D522CD85A283987447B5E87F6D9252950EAE1D78737719DE2AFED3434920CDB068F1E63EBF6936A03E09FC3F71ABFCD76262592C16511B53141E9073B8A7633C3CA311C1375D79951E8CF9AF42D24013441FAA1AC5C17262340D6A3D70809AF73542CAFC754E46AD52F2622461AC1C5E8C69E962B22EF2583BD7D1DE7BB75FABAF749B7F2047FAC2C70DDAF2B0B11577ECC1EEF820459F9935DC1F5753098D13AEC74463B9D57DEF5A7234F237A041DC04FC6EB938ECB5AF685876A8F300A7E122FB31D9E6C67CE8AA3941B8AD697A3D7B9333FBC6AB7A9003A5C9CDB136EB8C1FFFDF769130D587E60A862729827512947B6F8D23C49C4D1CFEDC8F48E7FE943FBC83A428C97425A07664A40CFFA72F22DC5DCB795861465456623915F7D00B7025775F516AFA6161D3BE26376AE26867CA7BF9B57ACC0CF27BB3902ECB6043B86228B5F96E0693CADBBBC1DB4DDBAB71EEC3CD341CC9E84B25D8B6C4C63157356F4D780FEEC7717CBFA08A1A009E74B94EDF4C5D85825E3BAD31DCE6800087EC459E6EE802FC0523E9EFE52DB8B457C285E083B7354B37252309BAB4E53FEBC36A9A9F14C1550E00494028338ADA428735E6D528542BB259479BCCD5AB73AE7D88D03500491


140121B97E0A9D0DD01C992553034E0C06DA2DCD7B67EA7CBCFC2AF690F109A32FED90A72183CAB58A507856D3F13772F2A311AD8BF05A980249B269CE911640D996AEA85ECD81916BEF816FE5F842E1D47B5CA66994077D4F728D219D44360C1FABCE04F8536AF125F5B9B9D18E2294484E539A6D02E4DE02757EEEC88C1A3C54760E6F7366CACE7FD3E187E3FC2E99E960E6ADBC5A7070749C49C3B705A4CAC2BD2D8D01464DC1942A4D939823665E7A7DC2B13DCAEC6F8E96BF08AE8710524BE06CDBE337BC8B0956D1DA77DF153D9461700A5C7E42DF8F6A791AC93548690CF313FCCA3E9705BDE2EFA836D0EF271D1F114A9E6D196F06787999FA67543B671BA16207C18A9235C4864A373D2E38D72821257083B8E723B132CC24944AE55ABEB6AF81FEA828DEE0BA36DEDEE7611E81317AA2004A14A4D80E9C65DB5DBEE61A0FEF6D243169F348EAB332A80DFBDA5F07C1EDC6D61F9E5773075E2A1937632982AFB83A1E9C17EA67B782892F36AF72E574BEB4AF2213DD2D879A2AE527BBD6CEFD872824DE214DCF40B239CE85422D539AEAE3030D46E88F272B43AC39DF803F1866C709D006300983DF28A34F521AAE74DABAF2F9B98631C74695404CD7E0F50A9B0BF7FADC4CEDB867E9BF53D7BA6705825E6DCDD2B9A40401874C51547047413ADF57AACBDB773A4CA416155A5D0AD2166D3D3330E5E0209C3AD46B638CEA382118616C76EBA0FF3DA4979D145EDE3BAC65FBB2899E2AD28854EA15C955E3E2D390191286A03736C26E40B2BF198766EEAD97FFE0D7BA9898CACF03E7AAA078D658DD09EE1696C64D25415554B6210C87FA6B3B5C59CAE7E9086043AE9492CFA6D5E1F0D8659CF5D2BC52444684C9F6B816B3B4E3CCE4CA7FA824007FD05021D8012ECBAA7CE752C3C1A4003A93CA093A7396F260D5DF168D57512587B529DD9896EA3E01CE33A05D5B2C7AC9A3DF690D975411990FE9367348F477B411834CEE636723506A1FF654C13D901CDA30545252F78574769A6F43250DAA21259E5F2D77BA418F153C62486066C1ECBC78ABD3A3CF71D84AD447CFEB0A8CEA02F3411430701765FF27045F25DDCFFBDAE864E470D0BF318D6ABF6B6ACCDBA22EEB1EEE237C937B28FECD778A08545D8057FB68574A0468AEBEC3A8D35F363243B5DCE2F00367BB0516FDE0FB3202096FC78F2A28FB2856DDBEE46E332B09C9975013F65B7376E89A1C724749BAB352E66B4501F8727524AA41BAC1595EE929340B25F269EDC1978D71FF1F69287EF8492672DD9472D860B5CF892796CE490BB6E8F6CD4DDF24398C0A3ADF96735F2599DAB0F46C83CEDFC02940AD6A6CDEA0896C6A6AF2580040FEC1DF9E1FD8F76B865A72DC29CAC911EB3AE4DD2ADE7DEFFF95EEEB4EB379E44ABA2D151A500401A46F69B31AAACEBC03C0EE7BBE11E9
61EAC370D88A22ACE90917385430ABDDB02981A3733D70A9E0B7E7F8DBE0B35FF015C4ADC524A9FD5DAF5B060B41E8DC705FFA0A1681DD10B532A015662874AA3509E50A66078B5E13E8817D88BA96D33E8D0F3AAB892F8B9219BD85736F4721C0A12D26A383950D40793FC0F6A6E6296BEA8589A8D1FE111435E28B563B1D4CECC7146BCA444FC230A785E9FCE18B430903E15932BD3C55B3504C655C31A0CECB5F6BD939685486237BF5AC73B3718EF05DFFBAB70C585AC07D7CBB7CC8A7BF3235157BC738DA6BBCE40F9F7A3F9EFC49945B6CE94FF4B25E955A5F688B1704BE918355B5DD3FC8EB67CF8340F860BF82F88EC7AF19ACA19F18F532341F0D7551083F2DC586C1E8D2D778BC7DB85BB241FB508F43A1BAAD2D849D58F7E65FBDA8D61498E27E0F307CE17E749033B1B92C3EB8864908C1BAE09468D73FF53130BCFEA2779DA250807FA6D209360102E16BFE5B4A02CFD3555FC7BCBDDDCC5EA722A98BA2CA1C06131240C677291B814C92675770404C304C925FD097D774215B8C921BEA6BAA5D29989356C241F3FCD31A8ECC257FD16B4B4EC264623E95F47CFC9D4AEB4B1D22874BC66E00FFF38D15511DE884AE0AA741650B8F1FC7D67BA1C7C531B3A22701D1F9439BCF2AE5F54A8E667D9246ECBCACCAC49E0BB8CAAA31529041D4879993DB35230A57647F911635CD846ABC5C503E732E3B9EE24406B4A2C48FDF27EFBC36A66A4AE8726441DE3EFE25E0BACE1529B1CC71325D7CAA9DD7D2630476035028A2A1BC625C61BECD597DC175DE4205F1E7CA78FD27BB1AEF6F5585872E9EE55EE0834E97A7D5A6BDA9B226995931D9D55297206EA0BC755A587ED9DFB3B09CA3D09DF60A3F7836D28774DF5C4258EAB20DAF8A40743F6AA075AF2AE185EB50585D94721FEA6DDA5584B3C351F74F49B4BA6C9B4F74E5983B924F629019575015F9FD591A058A6217C0FD11B925B5EBD1000B3A13120E60AA7224A7C6E52D72612CE9991ED03BA0E10199330667717C7FA4733BC2AD4402DC658C7A51B300095040D2048CA77F799D327A48483293424945739486A6F847CFFF0EAF4E6AD1642EF04FD94D73B4D7C35E1F9EF89DDCE5A3A0FB9F13F9AC438C10B19050FC8BEAE95BCD1069198474524F6A4352AFA45E274570655A7E8C8981586F516E615E65D905394BD4417BA71E5C68EFE4BDB73AA6754CBC756283514307DE0025EB580D5B0AD38F03C8EFA027C594FAB27B77ACEF560DD616900EEFC02E8FE2B28457900983110042A1718B5233C3718163F3002D1510A123B7279A7AC6521046451D8CE3C19D7F7A7B2E68CBF175DEB4A8B70B9680D7D12C1D3B743565C338E4F53817FA74F3FF340F886C998206531864E9753B839A173BFC0CFA942D51A393CEF6243C7DAAEB803CA8B3C092EE549EEFEF7342FA01ABAF46C93903
9F375E28557D7512D22AFF8AA79E4E3E23E05B832DCA572D73B6A547ED8DF1C9B06007917174C214B5550C60560B1BF0CF28D265E1B611C3532194C58E221430730730AD89746F87A911CE622375E3B2C16CAEF3B19678F27B3AE0913302C45293F27F2E3878E0092778E8892DC8DBAE272A99B1ADE34C5EF4E21FF7694913E66137644235EF7C9102D244C2B5A7036FC862EF70CF57BE557ED8150013B94C97EBB80E2DA726A05A84EE6FC61925C1F21AF6C185261A272CF2DB85F90DEA394F5041BDD0F49F5FBEFA995E5642ADD31B98B85AC75B0F512F58DB2E5B606A48F515A54671BE8340097F529377C72150E41E5DD97F33FBF6B5A2951C799948493765937225DFB4AE52D03C30144B79FBE82C7EADAF32DABF1BEA87E05208E811094A13884BFED1D3142F0F48EFE99FF66AA1D7FBED3ABEA58DA27C5A766C63B3A57B52F1132D0E255DE109349826E722D85FED84AAED019E6BDA91F8B0064C0707FAE5B9D4058A97B18BAC1FC321959FE2F82311EA479BFF366B0114A74B474905B041A1A71574F1CA4112736DECFB3B991C1856D596679EF14E78B3F902DFCF68C940D185CB76A9066BAD931925307B9DD1D855089D99ED4C4754276E63C0581D7ACA727FFECFA1EF4CB3F38043EBF729818299406CA0E4E25F630983B9945687ACB7878391B883799CFEA5766FDD50233E60EA90B4CC3BC9059400830D91961FFD2626607549BDB116E7EA5FC16EF60023E7F0A3FE811ECAB8EC9BAE3A9B86A41324819C80E76E4D58B28CDBE1D4887F73782BA6D33F10170CD70E76FC04B38C3C2D6BB15F465FA2462BC5C61AFDF214795F4B8DE7DC6F9854BEB2CBFE223E1D2134CE0084FCCA0636872DEC21FF4B1B4932035937B1532FCF94997310024CF55E768C15FC1A8D6DAB6F69341F95D171553E9055D1A8422A36405354D6AF76B41E91CCC6781D471506345268F38226E0FB19EC15BD55D33CA9B7F6962FA20D04F17F7D071473B8E7CC0DF7CB15FD3B6FE3D93574691884FDB645D93342E13F3A929EDF93402C5D55E64E7F5599CFDF3D487D7E51C54F022E8CB86DF5D0AF3ACD95CC55BB6FCAC96AA09930E148CFFB366D2B62E4640280BFD7A5B237B39D44B1A05C29401B16CBE4D7FEC8B3F37B19471C8126AE6648D975B82AE3D59EC410C1D7231B50D4AB3D9080A9DD4037D787A51034A73E14843419075972355913A7FE719B242556B85055849124E4B9142B6C84010A7435A187C29C175FD5F6238C4B0AC5AB60F7AF7489326944DF6DB4D2B8EDAAF59C8402FD0788261617FF4F13907449E02AA33985B9A13339FF33A4D01A61B1A9564DCF65995973DBED8E3323A1B389F6E9EFE320E3ACD33889C568A5EA3CA42698776C2D01A21C159CFBADF16BBABEC85BC3373A8CB542A542B6D1690F5278F40B227CB28FE06E46A30039D22C
514C1185E4874C8B716C765C2C440BCF2F2B1BB0C60285F47EEA75B514FFD62FC465F85C06697C694389681E3FBF5A50E3CEC389E80EE20BE82F819CFD0BD7CCD7D3578DF82614F747EF20F1AA90B37795C56831018536E71C9F6B1DE05D12FB00FA17170F53DFFC7CD6AC6F4BE152491FBD8FEDE83AFD896C3C92B55272D78A307127408B5AB679DC1A1946946EB94C1502C98E2483D10E80C86D8E3EBCA8B30C70C89D9DED14DA7A38BDA982624B1EE601891BDCD1645629705C822310DB5C8E709E877EC7B30863E3EE2E85FC2B5C35FC0BA07C563318259854F51D537748706D80C07D02865F62A74267DB619649F41B118C0EB18A9B89750F120FC913017DA6CBECF80455162CAA449D9C20F1EBFF5359BB6922340F81B55AA3F55DD7F8845C13AFFDE93EBA280AC35EDE568BC951DAAD2A811CC7B19E6F8CB7F5C6D8AB0DCCC844EFF095E0DF9BE75C1E7370F75A807336676D118F9F953EFB2F10B73310BB71FF09EDDB69FD3738BAED762C7BBAEC9ECB9CDD1D576173AFA552A61389BE55144D5B91A2462059229D49464BDAC99C1B8C9EB224FF04722F19FFF35020CC298841D993756C5134CFE26F16CE287B60A8C42002AE41DA0DABC4CD833AEDB010E15DE83D2CC6E0590AAE92657D25018B01205333CB235C91797399934288A941D7BADFAF0096DAA2F2054F737291F0A631B35B2A695B95D4F3D1FFB1A1B070563B06A892CBCA5E7AF8A41CE4D098E665A7210B6D0BE248D0DCABD389652A0EDA0C8230CEC60B304C7ADDC25B592F2A2D98FA8A6194D2A38E02F732EC45C7F20B501487507E4FBA1E949DA77871F1448134BD6BC7242C922D47B46A53DE4F9EFA2440515EB4755EA212C9430DDF423FCA85E640B623E4305210E0F9068FDE3CD3A0A99653BB0C30DCBC390D6FE54E595B20397B28414357399265615EC6E370D1A4998E151615E0722DF06873CE6AC0CE3ED8017669B92A050C4C57F10F431B6849D22D74245161B190C445A914C3F6B03F2B693DFE2ED977763DA71006A01F097F6CC839628FC95BD7D693B075E1295679F384AFEC73A65A4F0FBF05E31F7776DA76EFA7D820CC3F0B8C3FF3A6E17374BDA4002FF11FDC2A8718DFF8F43AB10826AA17B8A3C7AB42DF6C637CE8518D1707AE15ECBDFDA40344EBBF5B1C7EB7DCBB1126CF612666E77AEF4BF011B92080411C3E5D4CD1B94FB1693AD0BA9EDBC4570A2235D465E34D51E01E2C8B19B6D78D11BA323732D018FA4F414D26CD4A7895663E7C21BCFB6743539D5C1A7721097D8320780F1EAD67D35B3EB6022C0200AA2CE8A17D753ACA623F320747170AA07A33B789DDA22E244B30B14FCEFD7334C15F58B0D1DCFF85C492C00E55C0135B71D5E0FA37E1B51A5A199025FF299BAFB58DAC61
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 905 834 rc
0 834 m
905 834 l
905 0 l
0 0 l
h
0 834 m
f
279 393 m
594 393 l
594 132 l
279 132 l
h
279 393 m
f
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 834 cm
279 441 m
594 441 l
594 702 l
279 702 l
h
279 441 m
S
0 i
1 1 1 sc
CM
351 357 m
495 357 l
495 303 l
351 303 l
h
351 357 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
351 477 m
495 477 l
495 531 l
351 531 l
h
351 477 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 423 330 cm
/F1.1[ 16 0 0 -16 0 0]sf
-23.712 5.776001 m
(!"#$%)[ 10.960000 9.184000 8.896000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 213 m
495 213 l
495 159 l
351 159 l
h
351 213 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
351 621 m
495 621 l
495 675 l
351 675 l
h
351 621 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 423 186 cm
-52.304001 -3.447998 m
(&'\(\)*%+,+-+./*)[ 8.896000 4.144000 10.368000 10.368000 4.448000 9.488000 8.592000 5.040000 8.592000 9.488000 8.592000 8.000000 8.592000 0.000000 ] xS
-25.048 15 m
(#0%+,/)[ 8.896000 9.488000 9.488000 8.592000 5.040000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 735 m
495 735 l
495 681 l
351 681 l
h
351 735 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
351 99 m
495 99 l
495 153 l
351 153 l
h
351 99 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 423 708 cm
-14.512 5.776001 m
('1'2)[ 4.144000 11.552000 4.144000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 501 m
495 501 l
495 447 l
351 447 l
h
351 501 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
351 333 m
495 333 l
495 387 l
351 387 l
h
351 333 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 423 474 cm
-40.599998 5.776001 m
(3/4#/.,5$6)[ 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 5.040000 3.552000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
639 213 m
783 213 l
783 159 l
639 159 l
h
639 213 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
639 621 m
783 621 l
783 675 l
639 675 l
h
639 621 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 711 186 cm
-36.304001 5.776001 m
(3/-5$%5$6)[ 10.960000 8.592000 9.488000 3.552000 8.896000 9.488000 3.552000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
36 213 m
180 213 l
180 159 l
36 159 l
h
36 213 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
36 621 m
180 621 l
180 675 l
36 675 l
h
36 621 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 108 186 cm
-35.400002 5.776001 m
(3/$/75$6)[ 10.960000 8.592000 8.896000 8.592000 12.128000 3.552000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
351 618 m
495 618 l
495 564 l
351 564 l
h
351 618 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 0 834 cm
351 216 m
495 216 l
495 270 l
351 270 l
h
351 216 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 423 591 cm
-33.183998 5.776001 m
(\(/8/9,5$6)[ 10.368000 8.592000 3.552000 8.592000 8.592000 5.040000 3.552000 8.896000 0.000000 ] xS
1 0 0 -1 423.0625 801 cm
-25.775999 5.776001 m
(!"",*:*;)[ 10.960000 9.184000 9.184000 5.040000 4.448000 4.144000 4.448000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 834 cm
423 153 m
423 206.10001 l
S
0 i
CM
423 619.90002 m
426 627.90002 l
420 627.90002 l
h
423 619.90002 m
f
0 J
0 j
1 0 0 -1 0 834 cm
423 214.10001 m
426 206.10001 l
420 206.10001 l
h
423 214.10001 m
S
1 J
1 j
0.60000002 i
423 270 m
423 323.10001 l
S
0 i
CM
423 502.89999 m
426 510.89999 l
420 510.89999 l
h
423 502.89999 m
f
0 J
0 j
1 0 0 -1 0 834 cm
423 331.10001 m
426 323.10001 l
420 323.10001 l
h
423 331.10001 m
S
1 J
1 j
0.60000002 i
423 387 m
423 467.10001 l
S
0 i
CM
423 358.89999 m
426 366.89999 l
420 366.89999 l
h
423 358.89999 m
f
0 J
0 j
1 0 0 -1 0 834 cm
423 475.10001 m
426 467.10001 l
420 467.10001 l
h
423 475.10001 m
S
1 J
1 j
0.60000002 i
468 531 m
468 611.09998 l
S
0 i
CM
468 214.89999 m
471 222.89999 l
465 222.89999 l
h
468 214.89999 m
f
0 J
0 j
1 0 0 -1 0 834 cm
468 619.09998 m
471 611.09998 l
465 611.09998 l
h
468 619.09998 m
S
1 J
1 j
0.60000002 i
378 621 m
378 540.90002 l
S
0 i
CM
378 301.10001 m
375 293.10001 l
381 293.10001 l
h
378 301.10001 m
f
0 J
0 j
1 0 0 -1 0 834 cm
378 532.90002 m
375 540.90002 l
381 540.90002 l
h
378 532.90002 m
S
1 J
1 j
0.60000002 i
468 270 m
468 282 l
540 282 l
540 276 l
540 198 l
468 198 l
468 206.10001 l
S
0 i
CM
468 619.90002 m
471 627.90002 l
465 627.90002 l
h
468 619.90002 m
f
0 J
0 j
1 0 0 -1 0 834 cm
468 214.10001 m
471 206.10001 l
465 206.10001 l
h
468 214.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 604 591 cm
-59 -12.671997 m
(<+5,*+=,/>)[ 14.224000 8.592000 3.552000 5.040000 4.448000 8.592000 4.736000 5.040000 8.592000 0.000000 ] xS
-59 5.776001 m
(,5?/>*/@05>+,5"$)[ 5.040000 3.552000 13.648000 8.592000 5.328000 4.448000 8.592000 8.288000 9.488000 3.552000 5.328000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
-59 24.223999 m
(ABC\)*%5.9"D/>E)[ 11.264000 11.552000 11.552000 10.368000 4.448000 9.488000 3.552000 8.000000 8.592000 9.184000 8.000000 8.592000 5.328000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 834 cm
495 351 m
675 351 l
675 135 l
504.89999 135 l
S
0 i
CM
496.89999 699 m
504.89999 696 l
504.89999 702 l
h
496.89999 699 m
f
0 J
0 j
1 0 0 -1 0 834 cm
496.89999 135 m
504.89999 138 l
504.89999 132 l
h
496.89999 135 m
S
1 J
1 j
0.60000002 i
104.97134 675 m
104.97134 720 l
104.97134 738 l
711 738 l
711 684.90002 l
S
0 i
CM
711 157.10001 m
708 149.10001 l
714 149.10001 l
h
711 157.10001 m
f
0 J
0 j
1 0 0 -1 0 834 cm
711 676.90002 m
708 684.90002 l
714 684.90002 l
h
711 676.90002 m
S
1 J
1 j
0.60000002 i
351 504 m
180 504 l
108 504 l
108 611.09998 l
S
0 i
CM
108 214.89999 m
111 222.89999 l
105 222.89999 l
h
108 214.89999 m
f
0 J
0 j
1 0 0 -1 0 834 cm
108 619.09998 m
111 611.09998 l
105 611.09998 l
h
108 619.09998 m
S
1 J
1 j
0.60000002 i
711 621 m
711 117 l
504.89999 117 l
S
0 i
CM
496.89999 717 m
504.89999 714 l
504.89999 720 l
h
496.89999 717 m
f
0 J
0 j
1 0 0 -1 0 834 cm
496.89999 117 m
504.89999 120 l
504.89999 114 l
h
496.89999 117 m
S
1 J
1 j
0.60000002 i
423.05969 48 m
423.03125 79.5 l
423.02258 89.100006 l
S
0 i
CM
423.01535 736.90002 m
426.02258 744.89728 l
420.02258 744.90271 l
h
423.01535 736.90002 m
f
0 J
0 j
1 0 0 -1 0 834 cm
423.01535 97.099998 m
426.02258 89.102715 l
420.02258 89.097298 l
h
423.01535 97.099998 m
S
/Cs2 SC
0 sc
1 0 0 -1 772 576 cm
-56 -21.895996 m
(3/8/+./)[ 10.960000 8.592000 3.552000 8.592000 8.592000 8.000000 0.000000 ] xS
-56 -3.447998 m
(,5?/>*/@05>+,5"$)[ 5.040000 3.552000 13.648000 8.592000 5.328000 4.448000 8.592000 8.288000 9.488000 3.552000 5.328000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
-56 15 m
(">)[ 9.184000 0.000000 ] xS
-56 33.447998 m
(ABC\)*1FCG)[ 11.264000 11.552000 11.552000 10.368000 4.448000 11.552000 10.368000 11.552000 0.000000 ] xS
1 0 0 -1 192.47134 330 cm
-82.367996 -3.447998 m
(3/$/7*,5?/>*/@05>+,5"$)[ 10.960000 8.592000 8.896000 8.592000 12.128000 4.448000 5.040000 3.552000 13.648000 8.592000 5.328000 4.448000 8.592000 8.288000 9.488000 3.552000 5.328000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
-54.375999 15 m
(ABC\)*3/4#/.,)[ 11.264000 11.552000 11.552000 10.368000 4.448000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 0 0 -1 467 411 cm
-40.888 5.776001 m
(ABC\)*FCG)[ 11.264000 11.552000 11.552000 10.368000 4.448000 10.368000 11.552000 0.000000 ] xS
1 0 0 -1 343 258 cm
-16.007999 -3.447998 m
(H+0)[ 13.936000 8.592000 0.000000 ] xS
-29.624001 15 m
(3/65.,/>)[ 10.960000 8.592000 9.184000 3.552000 8.000000 5.040000 8.592000 0.000000 ] xS
1 0 0 -1 526.5 258 cm
-50.952 -3.447998 m
(1/7*+88"9+,/%*)[ 11.552000 8.592000 12.128000 4.448000 8.592000 3.552000 3.552000 9.184000 8.592000 8.592000 5.040000 8.592000 9.488000 0.000000 ] xS
-26.232 15 m
(&3&IC)[ 8.896000 10.960000 8.896000 12.160000 0.000000 ] xS
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 616 408 cm
-70.552002 5.776001 m
(I#>*5?08/?/$,+,5"$)[ 12.160000 8.896000 5.328000 4.448000 3.552000 13.648000 9.488000 3.552000 8.592000 13.648000 8.592000 8.896000 5.040000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 488 658.5 cm
-59.848 5.776001 m
(ABC\)*A5.9"D/>E)[ 11.264000 11.552000 11.552000 10.368000 4.448000 11.264000 3.552000 8.000000 8.592000 9.184000 8.000000 8.592000 5.328000 0.000000 ] xS
1 0 0 -1 480.5 528 cm
-54.375999 5.776001 m
(ABC\)*3/4#/.,)[ 11.264000 11.552000 11.552000 10.368000 4.448000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
1 0 0 -1 595 471 cm
-46.664001 5.776001 m
(ABC\)*1FCG)[ 11.264000 11.552000 11.552000 10.368000 4.448000 11.552000 10.368000 11.552000 0.000000 ] xS
1 0 0 -1 426.4173 96 cm
-83.272003 -3.447998 m
(3/-5$%*,5?/>*/@05>+,5"$)[ 10.960000 8.592000 9.488000 3.552000 8.896000 9.488000 4.448000 5.040000 3.552000 13.648000 8.592000 5.328000 4.448000 8.592000 8.288000 9.488000 3.552000 5.328000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
-54.375999 15 m
(ABC\)*3/4#/.,)[ 11.264000 11.552000 11.552000 10.368000 4.448000 10.960000 8.592000 9.488000 8.896000 8.592000 8.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
