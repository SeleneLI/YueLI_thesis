%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1851.000000 941.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1851 941
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1851 941
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /t put
dup 39 /y put
dup 40 /x put
dup 41 /T put
dup 42 /R put
dup 43 /one put
dup 44 /space put
dup 45 /two put
dup 46 /C put
dup 47 /n put
dup 48 /r put
dup 49 /p put
dup 50 /a put
dup 51 /e put
dup 52 /D put
dup 53 /H put
dup 54 /d put
dup 55 /v put
dup 56 /s put
dup 57 /fi put
dup 58 /h put
dup 59 /N put
dup 60 /m put
dup 61 /u put
dup 62 /c put
dup 63 /g put
dup 64 /slash put
dup 65 /S put
dup 66 /three put
dup 67 /hyphen put
dup 68 /f put
dup 69 /k put
dup 70 /q put
dup 71 /P put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8001610B8000AD0B8000A2FB8001610B80018D0B800182FB8001610B8002AD0B8002A2FBA002B00220015111239B8001610B8002CD000B800152FBA000F002700032BB8000F10BA001D000500032BB8001D10303137343E0233321E0215140E0223222E0205112311232E0323220E0215141E023332363733157E10243C2B2C3E271211263C2B293D2713019055020E292E2E143B593B1D1E3B593C365A1502FE264838222136472624463722203645DA02CAFEF6171F13082B49623737624A2C262B46000000020024FFF502030211000A0026005BBA0014001F00032BB8001410BA0015000000032BB8001510B8001410B80001D0B8000010B8000CD0B8000C2F00BA000F002400032BB8000F10BA001A000600032BB8001A10BA0001001400032BB8000110B8002410B8000CDC303101213E0333321E0217230E0123222E023721362E0223220E02151E0333323601A7FED702162635212035271754540B45362A3E28120101830215375B4535594124021F3E5B3E587401341E352817172736AE33321C2F3D222F6858392848623B3B644828580001000C0000012902D20017004FBA0003000000032BB8000310B80006D0B8000010B8000DDCB8000010B80014D000B800012FBA0011000A00032BB8001110BA0015000000032BB8001510B8000010B80003D0B8001510B80005D030311311331133352335343633321617352E012322061D01231563556464221F0B1A0B0C1F0C46495701BAFE4601BA4B48221803044A0404413F4D4B0000020024FF2F01FE02110028003C00BDBA002E000C00032BB8002E10BA0001000200032BB8000110B8000210B80038D0B800382FBA000400020038111239B8000210B80015D0411B0006002E0016002E0026002E0036002E0046002E0056002E0066002E0076002E0086002E0096002E00A6002E00B6002E00C6002E000D5D410500D5002E00E5002E00025DBA0021000C002E111239B800212FB80020DCB8000110B8003EDC00BA001B002600032BB8001B10BA0007003300032BB8000710BA0029001100032BB8002910303125112315232E0123220E0215141E02333236373315140E0223222E0227231E0333323627222E0235343E0233321E0215140E0201FE5001175231435C38181D3A563A3259160211263A2A152E271B015502283D4B247C74EE2A38220E11253A292838231011243B2C01D94A2B2B334F612E355F472A2D30222B48331D091420172A3A24107E98233946232544341F20354222244839230000010040000001EC02CA001A0051BA001A000000032BB8001A10BA000E000B00032BB8000E10B8001A10B80002D0B8001A10B80018D0B800182F00B800002FB800012FB8000C2FBA0013000800032BB8



03000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000C349F3935F0F3CF5011103E800000000B643600000000000D59BEF28FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000002901F400330116000001850032014DFFEF022C0057022C0018022C001D02D2002B02C0004E02D2004E0367005002D2004D0288004E02AD004E02880025023E000202190024025100430219002402510024021900240128000C023E0024022C004000DE00450207004500DE004503550040022C0040023E00240251004302510024014D003D01F4001F013B0009022C004001F4000E0206000901F400080206000C04BE0037000000480048005A00700096011E0204027202DA0316036003A004080498052C0552065C06F407660804086C08B8096A09BC09E60A180A320ACC0B140BB40C4C0CE20D100DB40E060E560E760EA20F0C0F860FBC0001000000290096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 41 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/slash 3 def
/one 4 def
/two 5 def
/three 6 def
/C 7 def
/D 8 def
/H 9 def
/M 10 def
/N 11 def
/P 12 def
/R 13 def
/S 14 def
/T 15 def
/a 16 def
/b 17 def
/c 18 def
/d 19 def
/e 20 def
/f 21 def
/g 22 def
/h 23 def
/i 24 def
/k 25 def
/l 26 def
/m 27 def
/n 28 def
/o 29 def
/p 30 def
/q 31 def
/r 32 def
/s 33 def
/t 34 def
/u 35 def
/v 36 def
/x 37 def
/y 38 def
/fi 39 def
/uni2B91 40 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DE5E409528374E9E7E673E1353F43ED87BF92F553B34192352D69445B049DF4AB09101D67806CE36628C53D0EAC58B4F9F1D4A36AB015D6D9F65DB18C339D44154B041802ACBB99D9C9C286B306A1FDACD6694D079614C735BF437010413C1A2590F134EFC0C54CC0011013D27D1A9EE0AC1ED9C83F32E2C5FB6964B21F627AC715F3534969F4A907587EB718FCB3F79A037F0A49BB9A136868694FBF2C9682BFDAA2F2220FAD7540EB8FAD687D761E6B7413CE98DA72B9DE65073CD2F9B150233060CA8F456470922E26FFA36E17E2BA4850322D29654EBF1A119F1A6D6DB188BB82BC2BE290933C98B89F440E22B2D0D93A923C537F50DDF4C43708756D21786B7CF1D01B63242D0ED0186FB73DA00CF84CB7F8564A8F52BCBD0AA291468606D0336FC089FF50286014B04C0B15DD0EBAA709444E934A7965E11CCC0BE8AE2A3FC24800134C41368D3E7ED828063DDEBA30E79C0E9F69C3793E8863A70A084E22B8163E2D7E27C5C682459DC0C3AA94C31A71206AAA5A366F18BB1CC12285F3FF510E32B963336E3CA6D138071F0F72DC3CB39EBD2FA95A684D59A1279C32A0A34C4E82347060860F711567394DFCCAE787809E47BEED5F9663722DCFB8AEE8933C0FE8F4861BC39AC8224321CE5AFCBCDD17DF57E4C2B646C3D86D4111C78BF07D193FA7E77DB22BC6ED47C664E293F6BE193D7697F5DC41D563D72444514B8133C5F508AF1C75FDB6DEEDA9A3BA3502ACFB973A920109BCEED2912AEA07C
D27A593CF56A028E292ADDD5F36799A65DB4B2941AC6ABC9401895C9AB34A32B7554FAA6B386B83C73095D08A0AA1301D090CAA31F4F66C114055D9D6BA7D0CF8A07650A8C5C591CF6C11F2039E36CC75729AA7A70816090FD512EB26D8F1F3177F04CB9DF45C99B5FAB17D46AA3E31F5C6895991B93D7D6CDC0261E90328B7076B58E1DE2EC23C3F166CC286E918B08486F80B97D053738AFA4FE04C6A529393CB846428F4B38838F82362DBB092640A7E6349E43B7867AD700F7B7B70CF98E150AE49BF7B82F18D9EFBFDB3148EF0F55A06A47BE3692C7C975523F7EDEC7F7A6051CEE705B4795DB1646CFE7801C447321092D48644ED4B6FA84EB6004B72CD87BEB50AF1D3D5697AD48F7B1FE07E0886655857DD4973AF7444C05EDF3AB1181B1C8AE6D24BC5C67D229C2EA7DE435FDF569A5AD693AA30480F81D2E4258B91D10A13C766C0B5317EA6DB2CEBA5BD0A9DB1AE79C0AB8C698391A28C54B8F332E6F1770D2DAEC2131AAEAF36DCAE48822E154F92C6A68BF86739826147B7F33122DD85B3C57CF5E11ABD7CB11B1D912087DF2B30A5A9007285D96E0227B4049E3BFFD556D8AC05E8DD800B4A0ED2E67C6D03883EF0881058BCFBAB8024DD9267723C97E4B95ADEBD48A91C0F7113BF657A19E56CA8532019D683DD6491052E63F503492FC6D396DFF5AD1FF163DC2E97DFF877BDF8964179CF279B547FB995B7EC2BF4CAD4014D1A1AE5ECF39FBF9CC83BFEEE051CDB10EC1255D1FA54F8E861290E39351257466DCCD9B5861F60196F60907A1D0E9B8386DB02D85DBB1236715F577F9CA6CA211D829C413119C24B26D2A7AE6F0E97526B27D8E328A3C162B505108C5FCF3B6B86E3BE8057A6871715C65055D741F062E9CC6DCB67735FC61F518DC5828277258D6EF24977D39FB0DE6515EA603818BEC2DF9E3FE22E03B711F21A325964B1C7CBEB7F90EB3D0E2327388D2AB7DF1C58DCE41F69E97E7A614ECA31D0AA275A547506ABCABF11F73AD3E1C70A9F9D2113CEED980F0F75EF0A6B28937EC63100AD4FB5FC603C073C54023F3D8BD6C8C9EEC2B07CAB7090B540F94D5043DF8292625E003A6F581DA9EF52D804ED73558494EF05C8B7DFBEB301FF0F59D3BE19FEB61AB75CF9DD68FA751F1FD5E8BE597B76981907F842F551BC56805A04D0B170AA5FCBE8C4D0AF596D536447B448FA725E68191D376EFB278D98B49E3A9C66AE0091E10B864D889C8353FA13FB1CB498FCE91346C4F2325AC3D518EEC2917148C4175AC6B89F964E3C041AE313C8C84E2FFCFD46C8B68BA4B172F16CA167FB6F35C7EE1AF78EEDC82DE298DF8D640B53B340EE62563B5BD61028A5B1A092EF0209AB16C96FA4CC92C9B631A72E974DFBD000B5F1F4F06014B338178EC1BE735C83DA337FF1EDF879EBFD186794CB186AF05FB7414754153F0E3
EB9E50A6D0136C35FA85B47099A05F485A628BF4748D24F387C549D2250A1B9A8D9835DB149460DBD58F8A5D2418AE046C316A5BEB693DD21DDE699B1E3976725B937B125CD77DC8B5682FDBFF8F97BE907B19C6F8E614B16C889D6F1CC9F003DCD6E3803D819604276A49CB6E774718BC3CD4E167EF0B610CD19EA1DD30A6E23E99606EE87D03B65CB530F4393A82603987D01D42D6514C2380A9D87DD2513F0550E42C1623F3D1060B91426D981C143AA9A8D19F4D1AAB9B788374EA5C8DB16042FCCE9E6D744AC63107867E2A1F22D57B34D34F1C944E416E873B3B513FC8BC5BE2EF37709F7A5DA90A046AA742AB3E455AF584D012A8A200E223CF1FB3994F27F6015F9644BAE5005FE9209B1EF4C1F297D408186B851F102D6AF0AF41CCC5B30A91E1DA8AF0AC7FC6CE63E2EFA99BA13727F7AD7E47AC3965392CBA1EAE8E8A896774FC098FACBA68AE2B1A79DC26F1B4D08BA4A6244BA643C2F6493E65D765197C02CFD92BD2FA0609EBAA92ACBD9E32E5E2873C61977B62CC40E39C6F661240847620498167FE7A50930FA136EB808F052F647C6D030D9A439B1599752E1767053FC40698B6737FDE36BFE22E2FB2EB186EF437C954B7C8C916FB58EEEC756FB8DEFD903C8307FC6982551B6569A7ED5D1AE5C4F313578EE1BEC379F3A94F0A229FE22E74DDB3EEA51AE4E15A49163ECAA497B0A4245B9B1BA4A150FD67C45B275814C0EC094F5C89171165FDDF6E58D420BFC4B57759E6BB379A242409633C70AC14E4240BE11631379D1E422EB781EADB05CB5B0F5BBE2251DE63E85D7D0E4D3A543571B8060DC6616693BAAF45B1558F5783A00E62F7287DE350E256FF4BAB0237ABFB1903A5BD192A59E496F5EAF1F6557F29EE80F8D16668E0FCF49025C120DD10E8FEFF1BD6D4D9848D966BDEBB3ABA844655111A712F369BBCAED7C7565E8CB4954FF775D1212CCE999250D33DBFD760890C9030750872F474DEB57AB22B774409B15416B8807A3017ABE75A59A9EAE4B31A8A3CE962BCBA78505B188CB4022793C471320BF94E717DEFBC368094589DB6F02BE9B2E57D99F6E72E781D105F22EB182479BC625F53BEE85B9A1380F615BABADB67730A43AEB19884C1744A79EAE947E43BC17009D122D9D5FB3AFDA1E40E90747242377AE161B3C1D7719C43EBF5FFF71F5719ADE4669523DE140D2AB25A04B1692DE7D3C20272F0A51BE846045B8CB0F807061DC0B24097CF6A553ABFEB847518B46FAC35B73C03E2E1DAFA046525417768CBE672158C56EE60560E40B040F2624A7C947AAB461C6EC7940870ED3CC3B265D0779D1F96B76264997110EA8FFB9F93E6FDFA02FA015B968C568300F505A581DD04E7A7CA1B3653F1C9AD0AE0F80B2C081F844A72B836F25DEAE50AB8F8F3CEB65B53E1B9D53C1920CBB51B38A1B4D396712B9B
93FA23629BC3324283F33F14EBBFFA88C7C8BB0EB4EDE824FD105D6E97C401D515FB96CBF301EED38D45C263A10C2355CDCC23FFF14F594C68CA4146977FD0C0EFDD4602B22B6F1CBC974848C7884C8467A7644EE5B02A4E6051B5DD0A2329360A787B3DEEB6B29AD4716007C7FA407B6A8FF70930796A310FB3C2E822F62D3ECE1949CD3625D018AAF0B28466FD9BC4C560B1299DD11186151790994C04DA2926B12EF73933ADD15F66E058DC6CBC32454214FC68DC3B52C7B88EE5CC674BED459B1139ADFC1D7763C9534F6722CF0543796B5841E0D60BDB475B466286E56E94E5528A07AEA752E1B5B8801C7891DEB838C8DBCE18CDDA061A714B86E6109202A58AF082DD2233AF51C2ED549E6DDF0182C4C5836FDFCD1FD470E5F4B5711FCA354B4836021426021E5BD6102FD38AF0259EF160B8477C04B90E42D8DADE200EA5979E6F9127062B2A3BCECC3F341B6FD54A71B8F0FF440C8EBDC5631858512DF978C0436EE171662088F916943E5CAC8F8AB0B3E70A43C45B308469211BF56E679E19CABDFCB42CF56818F6C8FF729F0126473083A7B590D5F07E0F2847C880E35DAE43482A8A2CC7040453B29EC33A411C6C3515A62E8138037686B108AF4F7D1BF711F9A7BE37E8CCB4CF501C8D54D8FDD0CADC4C8A2A3AD5C0E146C26F89C82418B1C9AA33B3DD2317E2C7086C2571F2A0C1BDE27A208ECF21798650BEB04EEC1B8521F8B8E06C3EBC974BE4083499930B4CC4A36B996C6F9713A525CFCC764BC37790A6E46A870D8CE69426B887087FBEC91353A25B4EC6568ED529CC9390D9D01B6D293F0B1DF20D7BF8F8C4AE3B6456C537A1B49157ADCEC9A70E7D182CD09D8777244357B271F6498CC2E12172DDE861BF3360E14480DE991E4DCD28172AA7B24E683FCB6DA7916EAE671BB21A0564122F1806043BB0FFE784569FEA806161C6F6160F586FCD62BF8ED18007579B8AC540AF7754ECC8A7BF7EC15DC77FFDEB056C59CACDF1C92E8465F32B9D9088A07D030BD4D1DE230AA20FA9C9D840D6667F17F41F2772335F66371152065C18630993722CACC739A50954669FF9221A9FB40B8BB4D91A3E70C6F2506EDF7E8CABCB4B684DB7BB5E05106AA216AF3B7E46F5C211F4142BD9C032DAF26AC4A4810A7C730AD8AD6420CFDF5EB261E585511EC602A5B2B1ECD841C3525AD6C95B108F7C2A9E9558D11AF53324451A7515DAFFA21E38C29246E957A1C04409217CA2A88F55903778C3A93D0AD180832AC66CB56B8FA9F6731D6F3CA1E77446F050164C3A3DA72952961990150D31160050BA6EDAA773410AA030E439EEC9D3409E6AF7C133040369469BD2267A70E02E4A265983D11CD3C1C0B261B23759E6F6BCAE7CE42BE1D12840D044EF690BAA8061E2A5EB801B48F50919ED759CA14AA4DAD7106C41F6E91E60C6F733D477EA

8AA79B28FF6F27338172D8A6B908E32EA9F9D60C7C10396B187A32DA3F8EFB5E6BD155617A9A65DD5F7A38AD9BB71662A2153948049A1EF121F0C920342586CDCC1FCC7B4CBBDC5AF1DA1F1C6F17038E920F0C0C97AAE0752D2619BF69AC597B5A9A26644BC624A4BDE60AAFC85F72DECDC52F03FC40C46BCAAFBD9DA52F4CE9B65EDA0BB1B9383C6A40663699AAFC46A8A66951BFB11E142757D24A7EBEFAC4BFEE36E141D0B792B27B3F036B7FA4A692B941CEAC9F6728AA4B8A955576E96694AF4010101AFBBDB0A1ECFF341DD0BFA4AB568423CE9878D54DAF9CC5397659BC5689E0FF2B68FC755EC8CADEDD8345AD8455498A071D2785C73348FF965B31AC4589CEB2726656426E49818B75D6E1DF6FE86A3A8FBABA84FB1D4595861CBEBB222790B6A629EB9DEEB34E29DC7F79570AD2BDF70E900E68EAA099AF1B140C757D9948586B03AAD74864FDD734BBE935F4A4C5772C1F799C2CE446EFB29ED305479A8E97AAAEF28AC7A8C6B7BAE6042F8914898E6CBDE9874FAF0F32EAFC58B5777A2BBB1055B78BF1FF645FD4A97C6E1323D4FAACB203A458571D2348ACFB32B2B1C95796C8B6B75A9325CA7BA4582EF4F3938E9317F51E721B6D14AC317ED6A37F4637FC2385A071672B88D218E0348288D7892B1421F448A1520AE3092FD9E7D4E01254A2B02503CCAFCAEF37D2A3A19526F6D4F064141D2486CC134B748827811DC90E1AF98E9D99921BA67C81E0210DA1497DF013D9F67EA06B5D06CBC31915742B278A7F009CBAA75FF821F1E53F15037736AD306511695E91DFA7CC7C7E507A1AC05D402813840AEA9E3C36E0CE7C6035199EA35B07383E0113CA2A55D745EEE125F33CFB4EE9758D8CB9748E3D39033A4DEF419C7EE64D58A4545C897017312A0B454F4624894E9E068C3C68A678E450B14D1FCA9B65DA778CA143615EF61FCA2A9CA3FB96DC21AEABBBFFD5319A49F13389A487A43189620A222260A4E8EEB70A1AA1B5B99D2B978DC4CEE93FBBC9CF14DC4E4AE5C72DCA4151D23289B27616E24721CCC95979BD45EBFF9FE86FB24A75EA8AF7342D1DFDAE75FF2F41B97F22ADECC3B649C57531E55CF6DDB46C1EC3EC857519298A922ACB34FEF3D39EF3A8DB5F3B8A7A8289ACF72A18104A44EBBD6804412D17F8FC2C46A2AE822F9BD8F8A1239E36A4677B7530D9B2DBB2DF35016EC65DD73F7C00EB97C2C80F3B878266F1EDC1593D24FD414460AA48B8887EAA87E02E6DBECAF0EFEB064745659149AF36F78253D9C24081FB441F09448ABF2140FA8861D9218F22BE9ABD1D24C358827035E73ED65175EFF6D415FA6DB8802809BBFD20B3FAF9EDED28ECE8255C555674C1860A40479901A6C9090036A45F44A317C727092F1844FFC6B897029DE0E8002C396EA65DA84C0F31D8DFED47A8D05B383E5F0DA51D364EDF0E
5610E2B8EF16C93A8ED0A0EEF2A69A31BA6BB02AB303B57D5BE83D2285E236A68226A137860A0119CD87BE9491C812097DBC30AB4E39F3F4E5EBD9565B53D8C23668623577B3C31F2CB580F2F1BE300AE928295CC18445DC4421CCBB68E34D41DEE03015DF122FC2AA533F8DA5DF689E81165BE386594AA55CE5B9A03068BA2CB95615177377CDBB3C117562754033A6003DD46E55AF4DD71F761B47C3CA861FFF2CF9646823D57B082F73D4883DAF9DB2EC3ECE8EA2FF83FDA17501C49562F67F8D8313C07146C33BC5EA6E92618D073A8FFDB1880A4305284C8238531E19A93DE207CD3E556A74B4C8D271A67CD661D3016CB4C1A85CB2AAA0C41EAD9D6108B79380E24FED9E09BAEEEB0F163B9F975CBE5DF480C0A93FC844973571B8E3AC5B82F7A037E48F6C2803702314360836EFDBB80067DFCA732675056C1A8B38AFD6BA79EE5CFB1E9CB6D483A391BB992C92D19CA3B467B6FBE1BD6197E8F8C988119DCCE15D8A367021C98EF86B017AEFC8609059F8DE85AC9DF55D37E0593DA9FDD03EB88BD06482C15D741931F997BCAA8A15A74B05CA340681A03EC32693930273FF02794920533D70A3020FF1202739A3BF8E4F2D877D4A00D7043E895670A70837FCEB6CFC9BD3DB2D25DCA31DF667AEDD7B316AB414AA0AC17FCC1001FFA694CD0420595AD3F0B0A877F3844C457F49B00A3A78EFC484FC3AE2888DE2F35EB3FA5B714803B26793B3F2BE5174DF1CABCBC80AA9E54D1A9E13CC8517873D23FADF2261F78045F5F26E418DB67487593B4CEFBE6F20581736E5C3D8946571EE785CF784678EF702C20FD379C41968EBD12C269E012AD6317DB554881304D16179FFA2979A1EEB5E4B74AAEB31C55C025A34AABFF71E61307D3744AC5655F43ACE712CDE899C3B92995CD713C50DBDD7F7BB5DE5E91A8B7DBE164EB5F9D1EE3EAD3C96210E0C7B573BBF04977C05F702C4D1A2F61BE79A0AC96530857EF63A34B1DD6462231E45C5787888816FAD375976BFA2EC01618F0451FFB94ED54E63FED418EB560E68CF3B8D5BE23A9093EAC739E538C9B1F0A394BF504AADDF81A414BE3029BC8FAE870D5DAAE954E03170660033B678E9796FD259A566C2BE221C3F10EB533F275D49EF997EFEF488AE0EDFE85BA33082B236C871950B60BDD96E3F4C1809D862D6A39E6D31468E9BE6881B1113AE866CB5F64E2A26AA2135B30D879FC7447C5BA95A5282F6CFE984513D4339CB1A36F182D3115FFB8B58621F7E2D766D3E8EE18D50D2D22578DD8EFA101356E4553E097944B0073E5247951E74CF9F3C3F5A8BEBD2EDA5DC62A77701E4FD280367B32A74B0B0BFE9865F5C6FA5B9193F611CFE0E3CD1A7FED2BBC0FA914A46EC73BB02BFB81790BC16334F3FE61423559F6968AAF8911F23F9EE27D4C2823AFF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1851 941 rc
0 941 m
1851 941 l
1851 0 l
0 0 l
h
0 941 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 941 cm
160 72 m
159 792 l
S
2 w
[
16
8
2
8
] 0 d
0.69411767 0 0.10980392 sc
159.90924 137.34535 m
159.90924 137.34535 87.023598 172.00731 87 189 c
86.982712 201.44914 126.07847 200.12593 146.98677 198.52831 c
S
0 i
CM
156.54033 743.36664 m
146.64641 746.0556 l
147.31793 738.88696 l
h
156.54033 743.36664 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
156.54033 197.63335 m
146.64641 194.94443 l
147.31793 202.11304 l
h
156.54033 197.63335 m
S
/Cs2 SC
0 sc
1 0 0 -1 259.5 757 cm
/F1.1[ 30 0 0 -30 0 0]sf
-86.5 -6.8399963 m
(!"#$%$&')[ 26.130000 17.220000 17.790000 6.660000 6.660000 6.660000 9.450000 0.000000 ] xS
-86.5 29 m
(\(\)*)[ 15.540000 17.220000 0.000000 ] xS
/F1.1[ 20 0 0 -20 0 0]sf
-33.189999 29 m
(+)s
/F1.1[ 30 0 0 -30 0 0]sf
-22.07 29 m
(,&",\(\)*)[ 8.340000 9.450000 17.220000 8.340000 15.540000 17.220000 0.000000 ] xS
/F1.1[ 20 0 0 -20 0 0]sf
74.589996 29 m
(-)s
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1123.8995 850.12061 m
1233.1005 850.83435 l
S
0 i
CM
1247.5001 90.071548 m
1233.1357 95.565552 l
1233.0652 84.765778 l
h
1247.5001 90.071548 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
1247.5001 850.92847 m
1233.1357 845.43445 l
1233.0652 856.23419 l
h
1247.5001 850.92847 m
S
CM
1109.4999 90.973511 m
1123.8643 85.479515 l
1123.9348 96.279282 l
h
1109.4999 90.973511 m
f
1 0 0 -1 0 941 cm
1109.4999 850.02649 m
1123.8643 855.52051 l
1123.9348 844.7207 l
h
1109.4999 850.02649 m
S
/Cs2 SC
0 sc
1 0 0 -1 1368.5 95.02253 cm
/F1.1[ 30 0 0 -30 0 0]sf
-90.014999 11.080002 m
(."/&0"%,1%2/3)[ 21.660000 17.220000 16.680000 9.450000 9.450000 17.220000 6.660000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
7 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
409.89963 850.12354 m
545.1004 850.83142 l
S
0 i
CM
562.70013 90.076454 m
545.13495 96.768509 l
545.06586 83.568695 l
h
562.70013 90.076454 m
f
0 J
0 j
1 0 0 -1 0 941 cm
562.70013 850.92352 m
545.13495 844.23151 l
545.06586 857.43134 l
h
562.70013 850.92352 m
S
CM
392.29987 90.968605 m
409.86505 84.27655 l
409.93417 97.476372 l
h
392.29987 90.968605 m
f
1 0 0 -1 0 941 cm
392.29987 850.03137 m
409.86505 856.72345 l
409.93417 843.52362 l
h
392.29987 850.03137 m
S
/Cs2 SC
0 sc
1 0 0 -1 666.5 95.02253 cm
-72.239998 11.080002 m
(42&2,1%2/3)[ 21.120000 16.110000 9.450000 16.110000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
3
9
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 941 cm
681 234 m
105 234 l
S
0.69411802 0 0.109804 sc
691 709 m
115 709 l
S
0.69411999 0 0.1098 sc
0 i
1 0 0 -1 79.5 666 cm
-65.279999 -6.8399963 m
(52/6"730)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-37.5 29 m
(8&20&8)[ 15.000000 9.450000 16.110000 9.990000 9.450000 0.000000 ] xS
1 0 0 -1 89.5 190 cm
-65.279999 -6.8399963 m
(52/6"730)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-50.834999 29 m
(9/$8:38)[ 15.540000 16.680000 6.660000 15.000000 16.680000 16.110000 0.000000 ] xS
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 941 cm
447 72 m
447 576 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 437 902.02429 cm
/F1.1[ 50 0 0 -50 0 0]sf
-57.825001 17.800003 m
(\(\)*+)[ 25.900000 28.700000 34.250000 0.000000 ] xS
1 0 0 -1 158 902.02429 cm
-39.825001 17.800003 m
(!;)[ 43.550000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
187.82602 124.75529 m
419.10104 126.75837 l
S
0 i
CM
436.70038 814.08923 m
419.1582 820.84137 l
419.04388 807.64191 l
h
436.70038 814.08923 m
f
0 J
0 j
1 0 0 -1 0 941 cm
436.70038 126.9108 m
419.1582 120.15862 l
419.04388 133.35812 l
h
436.70038 126.9108 m
S
CM
170.22668 816.39716 m
187.76886 809.64496 l
187.88318 822.84448 l
h
170.22668 816.39716 m
f
1 0 0 -1 0 941 cm
170.22668 124.60286 m
187.76886 131.35504 l
187.88318 118.15553 l
h
170.22668 124.60286 m
S
/Cs2 SC
0 sc
1 0 0 -1 850 835.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(."<<=/$>2&$/?)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
735 225 m
735 792 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 727 751.21143 cm
/F1.1[ 50 0 0 -50 0 0]sf
-57.825001 17.800003 m
(\(\)*-)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1022 219.97746 m
1023 621 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1023 751.21143 cm
-84.699997 17.800003 m
(!*@!A)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1472 72 m
1472 792 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1464 902.02429 cm
-57.825001 17.800003 m
(\(\)*B)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1760 72 m
1760 792 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1751 902.02429 cm
-35.599998 17.800003 m
(.;)[ 36.100000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
474.89969 125.86981 m
1444.1003 121.34735 l
S
0 i
CM
1461.7001 819.73474 m
1444.0695 826.25256 l
1444.1311 813.05273 l
h
1461.7001 819.73474 m
f
0 J
0 j
1 0 0 -1 0 941 cm
1461.7001 121.26523 m
1444.0695 114.74742 l
1444.1311 127.94728 l
h
1461.7001 121.26523 m
S
CM
457.2999 815.04803 m
474.93048 808.53027 l
474.8689 821.7301 l
h
457.2999 815.04803 m
f
1 0 0 -1 0 941 cm
457.2999 125.95194 m
474.93048 132.46974 l
474.8689 119.26989 l
h
457.2999 125.95194 m
S
1 J
1 j
0.60000002 i
1499.8999 120.673 m
1732.1001 121.07359 l
S
0 i
CM
1749.7001 819.89606 m
1732.1115 826.52643 l
1732.0886 813.32642 l
h
1749.7001 819.89606 m
f
0 J
0 j
1 0 0 -1 0 941 cm
1749.7001 121.10396 m
1732.1115 114.4736 l
1732.0886 127.67358 l
h
1749.7001 121.10396 m
S
CM
1482.2999 820.35736 m
1499.8885 813.72699 l
1499.9114 826.927 l
h
1482.2999 820.35736 m
f
1 0 0 -1 0 941 cm
1482.2999 120.64264 m
1499.8885 127.27299 l
1499.9114 114.07301 l
h
1482.2999 120.64264 m
S
/Cs2 SC
0 sc
1 0 0 -1 872 677.1109 cm
/F1.1[ 30 0 0 -30 0 0]sf
-90.894997 11.080002 m
(!21C*3?$8&30)[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 0 0 -1 872 592.8891 cm
-75.285004 11.080002 m
(!21C;"&$D')[ 26.130000 16.110000 17.790000 11.670000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 0 0 -1 602 484.88907 cm
-33.060001 11.080002 m
(A!*)[ 19.440000 26.130000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1472 576 m
1044.7826 574.10016 l
S
0 i
CM
1030.3827 366.96387 m
1044.7585 361.49988 l
1044.8066 372.29977 l
h
1030.3827 366.96387 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
1030.3827 574.03613 m
1044.7585 579.50012 l
1044.8066 568.70026 l
h
1030.3827 574.03613 m
S
/Cs2 SC
0 sc
1 0 0 -1 1255 389.11093 cm
-186.77499 11.080002 m
(A!*C$/7"E36,!21C*3F=38&)[ 19.440000 26.130000 20.550000 11.670000 6.660000 16.680000 15.000000 17.220000 15.570000 16.110000 17.790000 8.340000 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 0 0 -1 877 317.11093 cm
-73.904999 11.080002 m
(!21C*31%')[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
447 481 m
725.5 481 l
725.5 471.5 744.5 471.5 744.5 481 c
1013.1509 481 l
1013.1509 471.5 1032.1509 471.5 1032.1509 481 c
1450.1 481 l
S
0 i
CM
1464.5 460 m
1450.1 465.39999 l
1450.1 454.60001 l
h
1464.5 460 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
1464.5 481 m
1450.1 475.60001 l
1450.1 486.39999 l
h
1464.5 481 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
735 293.86404 m
1000.2846 293.9938 l
S
0 i
CM
1014.6846 646.99915 m
1000.2872 652.40619 l
1000.282 641.6062 l
h
1014.6846 646.99915 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
1014.6846 294.00085 m
1000.2872 288.59381 l
1000.282 299.3938 l
h
1014.6846 294.00085 m
S
7 w
1 J
1 j
0.60000002 i
186.9908 726.64587 m
707.10004 727.31842 l
S
0 i
CM
724.70001 213.65883 m
707.10858 220.28159 l
707.09149 207.08159 l
h
724.70001 213.65883 m
f
0 J
0 j
1 0 0 -1 0 941 cm
724.70001 727.34119 m
707.10858 720.71844 l
707.09149 733.9184 l
h
724.70001 727.34119 m
S
CM
169.39081 214.37686 m
186.98227 207.7541 l
186.99933 220.9541 l
h
169.39081 214.37686 m
f
1 0 0 -1 0 941 cm
169.39081 726.62317 m
186.98227 733.24591 l
186.99933 720.0459 l
h
169.39081 726.62317 m
S
1 J
1 j
0.60000002 i
762.90002 726.47296 m
1444.1 726.50562 l
S
0 i
CM
1461.7 214.49356 m
1444.1003 221.09441 l
1444.0997 207.89439 l
h
1461.7 214.49356 m
f
0 J
0 j
1 0 0 -1 0 941 cm
1461.7 726.50647 m
1444.1003 719.90558 l
1444.0997 733.10559 l
h
1461.7 726.50647 m
S
CM
745.29999 214.52791 m
762.89966 207.92706 l
762.90033 221.12706 l
h
745.29999 214.52791 m
f
1 0 0 -1 0 941 cm
745.29999 726.47211 m
762.89966 733.07294 l
762.90033 719.87292 l
h
745.29999 726.47211 m
S
1 J
1 j
0.60000002 i
1499.8994 726.68634 m
1732.1006 728.17969 l
S
0 i
CM
1749.7002 212.70712 m
1732.1431 219.42017 l
1732.0581 206.22044 l
h
1749.7002 212.70712 m
f
0 J
0 j
1 0 0 -1 0 941 cm
1749.7002 728.29291 m
1732.1431 721.57983 l
1732.0581 734.77954 l
h
1749.7002 728.29291 m
S
CM
1482.2998 214.42682 m
1499.8569 207.71378 l
1499.9419 220.9135 l
h
1482.2998 214.42682 m
f
1 0 0 -1 0 941 cm
1482.2998 726.57318 m
1499.8569 733.28625 l
1499.9419 720.08649 l
h
1482.2998 726.57318 m
S
/Cs2 SC
0 sc
1 0 0 -1 859 245.11092 cm
-105.655 11.080002 m
(."<<=/$>2&$/?)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1022.4214 388.99896 m
744.5 389.48245 l
744.48346 379.98245 725.48346 380.0155 725.5 389.5155 c
468.89996 389.96188 l
S
0 i
CM
454.5 551.01306 m
468.90936 545.63812 l
468.89056 556.43811 l
h
454.5 551.01306 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
454.5 389.98694 m
468.90936 395.36188 l
468.89056 384.56189 l
h
454.5 389.98694 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
1022.384 373.99405 m
756.89984 373.07574 l
S
0 i
CM
742.49994 567.97406 m
756.88116 562.52429 l
756.91852 573.32422 l
h
742.49994 567.97406 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
742.49994 373.02594 m
756.88116 378.47571 l
756.91852 367.67578 l
h
742.49994 373.02594 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
181.60817 281.91217 m
437.50006 280.90686 l
437.46274 271.40692 456.46262 271.33228 456.49994 280.83221 c
713.10016 279.82413 l
S
0 i
CM
727.50006 661.23242 m
713.07898 666.57581 l
713.1214 655.77588 l
h
727.50006 661.23242 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
727.50006 279.76755 m
713.07898 274.42416 l
713.1214 285.22409 l
h
727.50006 279.76755 m
S
CM
167.20828 659.03125 m
181.62938 653.68787 l
181.58696 664.48779 l
h
167.20828 659.03125 m
f
1 0 0 -1 0 941 cm
167.20828 281.96872 m
181.62938 287.31213 l
181.58696 276.51221 l
h
167.20828 281.96872 m
S
/Cs2 SC
0 sc
1 0 0 -1 593 677.1109 cm
-41.939999 11.080002 m
(45.G)[ 21.120000 21.660000 21.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 941 cm
1022.8828 573.9928 m
756.89948 575.84735 l
S
0 i
CM
742.49982 365.05228 m
756.93713 359.75281 l
756.86182 370.55255 l
h
742.49982 365.05228 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
742.49982 575.94769 m
756.93713 581.24719 l
756.86182 570.44745 l
h
742.49982 575.94769 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
735 649 m
1450.1 649.97028 l
S
0 i
CM
1464.5 291.01019 m
1450.1073 296.42972 l
1450.0927 285.62973 l
h
1464.5 291.01019 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 941 cm
1464.5 649.98981 m
1450.1073 644.57031 l
1450.0927 655.3703 l
h
1464.5 649.98981 m
S
ep
end
%%Trailer
%%EOF
