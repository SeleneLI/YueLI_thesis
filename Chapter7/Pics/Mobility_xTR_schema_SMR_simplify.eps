%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1872.000000 981.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1872 981
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1872 981
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /t put
dup 39 /y put
dup 40 /x put
dup 41 /T put
dup 42 /R put
dup 43 /one put
dup 44 /space put
dup 45 /two put
dup 46 /C put
dup 47 /n put
dup 48 /r put
dup 49 /p put
dup 50 /a put
dup 51 /e put
dup 52 /D put
dup 53 /A put
dup 54 /c put
dup 55 /H put
dup 56 /d put
dup 57 /v put
dup 58 /s put
dup 59 /fi put
dup 60 /h put
dup 61 /N put
dup 62 /m put
dup 63 /u put
dup 64 /g put
dup 65 /slash put
dup 66 /S put
dup 67 /three put
dup 68 /hyphen put
dup 69 /f put
dup 70 /k put
dup 71 /q put
dup 72 /P put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<









3335230111331133352335343633321617352E012322061D012315016D55555555FEF6556464221F0B1A0B0C1F0C46495702055D68FEF0FE4601BA4B48221803044A0404413F4D4B00020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000C349F3935F0F3CF5011103E800000000B643600000000000D59BEF28FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000002A01F400330116000001850032014DFFEF022C0057022C0018022C001D0288FFFA02D2002B02C0004E02D2004E0367005002D2004D0288004E02AD004E02880025023E000202190024025100430219002402510024021900240128000C023E0024022C004000DE00450207004500DE004503550040022C0040023E00240251004302510024014D003D01F4001F013B0009022C004001F4000E0206000901F400080206000C04BE0037000000480048005A00700096011E0204023402A2030A0346039003D0043804C8055C0582068C072407960834089C08E8099A09EC0A160A480A620AFC0B440BE40C7C0D120D400DE40E360E860EA60ED20F3C0FB60FEC000000010000002A0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 42 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/slash 3 def
/one 4 def
/two 5 def
/three 6 def
/A 7 def
/C 8 def
/D 9 def
/H 10 def
/M 11 def
/N 12 def
/P 13 def
/R 14 def
/S 15 def
/T 16 def
/a 17 def
/b 18 def
/c 19 def
/d 20 def
/e 21 def
/f 22 def
/g 23 def
/h 24 def
/i 25 def
/k 26 def
/l 27 def
/m 28 def
/n 29 def
/o 30 def
/p 31 def
/q 32 def
/r 33 def
/s 34 def
/t 35 def
/u 36 def
/v 37 def
/x 38 def
/y 39 def
/fi 40 def
/uni2B91 41 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DD8F68E7C9E6CE89571C79E22E977A5B42C931CC2176483889C4D7E8F08AD6A30D32F921F086F068997EEAC13FC5D4DB04433304F20EAF4CDEBFCC059713B591D123A2CB5C04D69A6F57D3F0C7D8146F138B1F7AD227781281AC46E7984398322682323445F251800F0288138BE66971FC3C11421A978F783EFEA3C47000617560E5F8CA1EA5309196DAAA5C22767A5B8C197BF7C86597C3604EA80D5F7DAB020319A1FADEC64A1ADBE349186D1005C4F02AFC2CA9E26784D365E8F18CFDB671ECEF479C6E6512FBF8121B03C5CF564CB76FA3736343F5B59445CE2F12B18C1CAC9117EAD8F85C588D8BCCE5001C2F4FC3D03855E1F3A00725A23CDFE90E157247304344B9A165FB3425C5D2D74883E80EBADC2E720731F358B2F68BC07AA542D7D5E4DCD41C774F9D73847D20A8507378538F3115AB600A142659A8E8B9F1657862C01AF0A9140439041332703491A0B9957B31A1D74B7C2DDDC589328E151063CAA1CF3242C124C4A0A4CEF38863FF152A187B88DCDA1FA546FCC8405B93085FFC6BCB887D5D258E2A926E9C32D8AA3C5047567E6EC8C2255EAFB78A45F0D63DB28F49276350A576A199E4411B4A4BA397AC1BF589985E2F6B5D63567245BACB3D3A3049ABCCC58E5C3C1E2C93A3846089D23BF4B00AB5DDE0756839DF8067E613934EF1C9A6A158D567BF0C52B2943D84C5D8B46D64B3CBE91F8CC0BFC64D772A56728B407C16F37EC26DFCFB38884EE75493A438B45DED1CCC919E45F52F

31CF43922BD7A7589432FFCB7219A9EE49BE25AF7E8A0E2ED00B064F9284918C37BA8E3A3ACB6DD2A76149FF3D15F0FEDE50D996EC8A6CCB2F4779894427B0010C9991129D600D6F34A42510BFFDA357DBAB6D2E4EEE92D597278B11DEC2994BEED11D156665AFFF3D1B4AEDBC264393BDBC8836BD47A63AC24A622C7949F2AC4267B668E328E6C9A4EA1BBBD23E5C4300E2811FCBC6C3F95D8BCB32D562ABE0912A2F31E23273DFEB695D2E192E287CC55F73D0C04417D5C8A289A98AE5D21C43CD6F484500B3E130C54C42309EEFC24004958733147C4AD9211C1126335880E64F5261247359EC8A5BE120920982497BF4CE7608A5819B7CAE2F484CB1BF097AD598351C52B68EA2E6CFB28E5093F497D40AC463D30392011BB399BDA49A06C239A7086FD0EC4A1ECBD78C772BA6B0DB68C6BE4921CCAF5FDB41F5F108B1202B9596CF9992A1ABB214803D47DEF06C89B07F3AF6381B56ECADA63811BF79CC78E229EC5F74EAD6ECE8A50DA9A13DCFF3CD05F9959153BBC2A871A58B9FD7FA6CFA3B36A6000E7C22B3811B5BB9B92D1CAF76E0D0AEB3751D0A89B8C381BB7E5BA051210738C202F22E4FC472432887BBB1C1A6E6BE3B475207F6D4B7E01216A51EC2906D5EA638912DD53B3176D681E21E6CDD4EC91C84D9E83577455EB30F2790DB3691269AB4741B0345AAA78BE9086016CC492C18D58E0E1164F0D6A8A94938E23B85BE2ED783E6C194E2607A2FC2B670AA32F73436FF278329F19A791DF92E62890F1E1873D6419F5A210196C4CB8F496A59BCF9909540778E55B622BB6BAB32464D329BEB474F64635901AFCE38EDE27DE05057FE38E86E12FCA2ECE2C340F590E3F1223952CBBFCB3D5538D9A9F713ED377F7F5907582DAF2FD13B2F30B42552BDDD8B17D80FBC75FB4F2919133651D5813192C9AED701D52BACCF086273FBF0FBAF18AABAD3123D65AA01BCF1841550E9C33B81F1101496871ADA61B1773984EAF2CAD195D46F7FFC2474C5794D231DED7F7C16C32E31A80DDD547D77265A3DB46C5B0273F44C4584014F8C765B7379789F50FFDB010475BB00307F1CC064C1F710C12DFD6930351B6D16A7AD6B499AE7574FD9B727F34B98AABA635783BC920CD5C980EBE7409AD49B3D836FF135EFBA743CA0CF3A98B266963C465BF2BF23B688A45EEE1C661C97A5A0C36611C827EBADAA313DACCEFFD74AB9E19078548B75CBAE3BFB65436638222E040255F95219CE2BE9E3BBEBEE1EA5E0C3402A9FFC5F6E117F6755DF335CED1F83ED5A4D00C20C20FAF71424B354918F648FCEE49DEE36187BCD59B3CF9DEAA6B6E8D414563A106FCE87560ADCB14548CC277F123A8285E9598FEC9689341FC16606CD6F5CF2DC153FAEAD3FA1795BBA6B1CBBA21961D729FF9EF0537327B5FB00BF4BF91ACBB6F61AD052DAC40CA44465

FBBF422DEA8205C9722AB3653644D0D3DEFE16B14C7C50CC53D5460F983560349C6715607FAE6446BD2CE1161C4953B3F0B8338ADAD963B4E9B792C1EDD00251CCB4B9F5F630B7B8857E211F83FB2965970B63B43B73C3FDE3C7AA14ACE622F8B951A167A469DD700640A031BD10375162C1E47097240834F528AC60DAA71387D6224FD73629526F5CA7510EA9F182A7E87DF0A516A749953EA8B7F31316890999CE90468A7822F079434F04392304643153CCB447BEF78AF1E61D9672A8CA1704F5B02483B0549FB3BCF03C2FAC2046D127A8257279EAFD6D8ED758B888F28CB9F743589B8172B576D0B093C04E2ECFA0B8DD8A9DCFE1DCF84D3A2F832B62BA0E71CEF78BDD8C56EC72C94FC3DFC3C0B4187CE34836DA022A9878F0C30457658E8861213B5AE0ADF91215D19785FD6B20B4F1569598E09D8FBEDBC5033B2DEBC66DAC1329DA79E5D3E754A6F7B08C554EC683142BCE664D3C35BB7DBF7CBA8B5E33C225BA483EF3A006B86462D1F3E7A78EEF201AEDAB69D98FF913637822F5FF240C9C2C5278F203A501F3755A4580E24660BD3DC0C80C933A1A6895C6F82B6115E0471123599824135C29A39ED2262D43C6A12D1DE833F24A302102707D161978988AB7D7CA2B05F75EA8CA5A375AF86044BCD2B4D2780ACDDB1C01CD17DF53F7D954C8D14AE11AB604F1D5E3B576A49AF0F8167B0B52CB0714538670267CAF9DFAC618D2ACA0E7BF0FC7261B742667CE4F19F7260F83FAE1DF2EC4ED9B5CD1F79B471A5A6F8ECDB4E45B8BF45BBCF1D74D299031EDB4555985BD268DFA48BF73DA9EC833AF05793681BB1B519E26D66E0FA76B1100B9C988C87EB8801501D3FAA28AC2258358E1D833475CA1D2A6E5F446F06F0F306B9448A88A8B12C2B2E25EA7FB3EA8E874EA9AF15EE67B80F1147448BEC93495B2F040FA56C5FABCC2CE2620114C560BC8B88FB8EEE8A68F82712127850F0DD335998F09A152A147F5C011BE570BF132D551258C4BC3789C66BC9F95143157690B8ECDFF62C99F26EA6CC7226ECDEB8AF6D82A771A7C4CFA3EB12C807D6D007542C863B62083AA660D301CC3BBD2A7428151E764F37674910FDFA108774326085875306D8222799967F0C9EADDF6E0256FA9094669CC03938CDE274A4C2E076C76D6DECF57BF8B769875CB3F1E15A6F1600A36D57E3B7B5925F9E8949774D6D62CF02C1FADC7537B24DB29C121D5E84B4AF50330E36F155CCA9FD22BE941724E6B359021B3DFC6BDD7ED7132FD22428AC7BED81240A8431B4D0D5FE4DB910BE7BDDE6D56DF5B18CC593016689C7B8C89DD31A4852808128D68B17D6031910A07016BB5683A6A0A4A14D9CBAAB71EED1FDCEDBF55F7713AB38A7BD52CAA05A5A1316ED808CC08ED305D1C3ACB06608602657FF8F75C612BD82066E86750DAE0647DE715BE63A8F2C283
5386E767E420C79051AC81416B2EFDA4BD066FD35B2811A6FE9DDD10A5B7E6A193AFB5536F49F4FD61CF3288F2D1420DD972BC320DB7EF4A2386AC33C8EB29885A79A417658838EBCF5B72CA853C9CB50D81E047C36AD35ACB8FA12F4C7FF117546A50B30CE5FC64641E655524393254EEABA5154A6575D6A09492A5C0AC307E2BCF108BBD126AEEE5682C2498D422213C3D24036149785B115C1AC0DF2D4A3E9CC6050DDA0000AABEF126B9B620953D9F0CE3076298EC5FE824BE9F4CD9E602C4763274C00B963992C4882E32D41A67AB41705739F4C32843ADD4633F31A4F108082CC9F846B15359C435D04BCBC1973E7952E9A9ABD8F52955CEEADED26C11F60320DBB7547C0CD7440FC93078071DDC44F776D5EA8770CB6E4A6314418DB764B2F7E0EEB4C7EE8D8EEC9041BCEDF98598EB392FBB26E1DF2E6B02AF9989C73D94CBC31DFF4CFAEE9B308F62B8C6B9352B6960272787B3CE485077FFECAA7CCBD8A8AB3BA13A6F391AAB2F224D57FDEC8CE93D073321261543F2BEB8BBC718DF9D15C466D6749CC0FB4C5F59F7F933E544C1107702FBDCEE4881F5B89FF534BABEA1D8A384F0B4004563935433175DD9F51F468A8DA153BDCB6A186392E242EE8F357C842572B523492BE76CD2CCCA5D59417D5B4BB94B9E614318EE5E833628B8E4179E8DA761ACB24A9209C328B88660B82D265278AEAD20895729C91A3866E9EB7C87AFDE97E5033B32D6DA08828477D5116B2520CF603543C9C0DEB5B1D747F6AB792C16B1883EC0B253A25B9AFCEBD709565D9D9EEA55F9A8A2501A04482ECF07D672B7A961E5675CF56017DEE9181663B2C1FA6C6FB244B0A65462C785FFC2614C44370DFF9B90683057BE895110873247E051556AEFA898AD5F52D0B395B0623F315412D6A81B6B473A4CEA6275C43EF385F5EB6E828FF2CA378977DD333AB37D35A0733228AB624686A82BC310C6065FDB2A26CABCB2ADF330BC3958C1B7F36BF7ABC55507E69DAAA4D393F6BF64D52D2269FED81DE434FC1FFCE87272DC8C4CC4316E272586C3DDE9CE558CEE38EB0183C55CCFC64AF58205485CE75C79B7D8B41276FC48226B480AE02D3B1F47FCE6FE2E73F36745BCE15DCA661FE9C83A134CEB97A8018B08EED0325696FFAA8DE7BEEBE78C5EA39014757532E479F749C67658C5E803BE40AF2BD286B920E3762586D4F772DB13BDD9A9F87D9F0B7BB492190BACBB72E02BEDEEB04411683E19574C77C02FE51CA4380983A5CD6A110C2BB5254D99D526C249A377C7F461BFD3574A6133CE190774F3D2130C38EEF8A2785B518D972F556EEFAA44CAFCBE81BC51F686DF826B9DF2EB2F0BE7AD9943716144A0B82656FDE11FF9361C1EA002753D497170437170304033D2802F805CE4F15F0AA2F8E2BD91FECFE5C184B3588DA9D8D944FC38107A0230DF18
A4B0DCF15E6F4C337390B7557604DB39DB79606ADB7BBADDA8DDA44B221E85B6ACBA24F6E7DBE9AFF2E6EBE8FA5ABAA94890C2268098274873F295A22789863ACF9231C9CB8CC8A2277F59BB2FC99D3F23C32692A1347D4E3A5E05FA59BB853500F06FA784EC1A59F68384FD3082ABEEF3345560FAC91B1B84EF382330174687CEAB9F39B728716F8A201EDBD637CDB153529797B78B462006E31435B6ED8E99AAA774756A850437C19DEDB765DBD4F63B8BA804B33B4D006EE95000881CCCBEF51D80C21EF1A3560AD1A584114105B06C0CF4F40DB561E79A24727CBC996EB1D931AFE856957ECE10F72C6E8C469BE7BBE20D07D122B688E5CD988650DECE9F007A2B62843651A2A3346462D78EFDFE4AA4BAB4D7C9A549D2653F72E1C94FA50F8CB2A55831ADF75600AE6181FC77FEC5D34418EFBB1AB13F1B3E88B7C23C6E0818E141CB2E0AC1A319D3A3321280C6A6A71F3BB64728622FFD266F66B9F32F6D3DCD90A82F08DE63D5BF099E821E5DDFBC0474AF81E889F5AFE361EA8009E568BE1F4AE01B027810190A218CFAA2311979E4887099AEB8C4F231C69ADAB4FBE3F51AD120CE535D2F30076FA2B1347944AEAC03894DA69868B2C1F0A8A69F0DCC4C416BDBBA5F6095FCA9A2E90F418CEF00D962CEB7DEFF3C363237BE93C7A28CC857099D1E37A0DF357DB86E508AB53553DB32EF3B878D687D00A1E6A05FF8797A0E0A6CAAD4307D80E2C0B4F91DBACEEC9D92C138DB4B496EC3FD74901104A52CE721E0DB303EF44F0958BA26F5414168B2A4E75A4B3AC713BFBF9EAC8D2F81A5EB6FF21C1B74AB9BC4AADDAE3C3DE60EA0B1460D768A97164666375B7E77619F41E858943E0F01ABE88B94874DD94AB8EF651C5A41C396F5B740CF831B1B1F2B478A2551CF17BE31A825E3BEF146F744B232DD711736FD7D03ED7DA9870B0B5CFAB5DA7BE7C19C64E76BB7353F292CA92DFFE2EDAF803A3FC4C373FCD6AA1D12E32AD22679720D5A780D7D47378BD5688E279576811C586996BB1A93A92350D80622A8BD26534C1BA85DC54B2B4DBF548D4292ED0D0357E4979F405ED04C373364E1267570587F9457D6EBD673D982553C5D7EF4C15D7D43A4BC5BAC3A5E24FA0E9B77126660B4F0DE436D11CFA9232BD5F02C1E754D4E8833F1E395ADA7F7EE1DE0F6ACB1EF87B9C83BA0068F1EC325FA6768A05C5C27F3A186AD6FF925290D0D8EDD9149359D6255F34E18C267BC85DC87C6B53775A3375CF158224CDF682489677E1E8AC5053BA61D51B8D71A09692021A0C83E5A79614399972CA8AE2383470F31772203D12245A743C118A67EB7D101E85CA348AEA320740800C8E711319C6CCF368D280BFBE931B542B9399BAC1BAC57CC3B7B0FC6A1D53198007734828A51AF5578DAF2C4F24618001328DDB7471D3C1362AD5AA2E5B2F432B029
28FA2378B3C2EED21F6392A61FE75A2FC14DCD2EBEA049FEBCA8E63C9FF6B2743FCF092D7618E994A3B826CEE13CB8A8777E40B2965A633BC01971
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1872 981 rc
0 981 m
1872 981 l
1872 0 l
0 0 l
h
0 981 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 981 cm
181 90 m
180 810 l
S
2 w
[
16
8
2
8
] 0 d
0.69411767 0 0.10980392 sc
180.90924 155.34535 m
180.90924 155.34535 108.0236 190.00731 108 207 c
107.98271 219.44914 147.07848 218.12593 167.98677 216.52831 c
S
0 i
CM
177.54033 765.36664 m
167.64641 768.0556 l
168.31793 760.88696 l
h
177.54033 765.36664 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
177.54033 215.63335 m
167.64641 212.94443 l
168.31793 220.11304 l
h
177.54033 215.63335 m
S
/Cs2 SC
0 sc
1 0 0 -1 268 779 cm
/F1.1[ 30 0 0 -30 0 0]sf
-92 -6.8399963 m
(!"#$%$&')[ 26.130000 17.220000 17.790000 6.660000 6.660000 6.660000 9.450000 0.000000 ] xS
-92 29 m
(\(\)*+,&",\(\)*-)[ 15.540000 17.220000 20.550000 16.680000 8.340000 9.450000 17.220000 8.340000 15.540000 17.220000 20.550000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
831.89954 886.12061 m
941.10046 886.83435 l
S
0 i
CM
955.50018 94.071548 m
941.13574 99.565552 l
941.06519 88.765778 l
h
955.50018 94.071548 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
955.50018 886.92847 m
941.13574 881.43445 l
941.06519 892.23419 l
h
955.50018 886.92847 m
S
CM
817.49982 94.973511 m
831.86426 89.479515 l
831.93481 100.27928 l
h
817.49982 94.973511 m
f
1 0 0 -1 0 981 cm
817.49982 886.02649 m
831.86426 891.52051 l
831.93481 880.7207 l
h
817.49982 886.02649 m
S
/Cs2 SC
0 sc
1 0 0 -1 1076.5 99.02253 cm
-90.014999 11.080002 m
(."/&0"%,1%2/3)[ 21.660000 17.220000 16.680000 9.450000 9.450000 17.220000 6.660000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
7 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
259.89963 886.12354 m
395.10037 886.83142 l
S
0 i
CM
412.70013 94.076454 m
395.13495 100.76851 l
395.06583 87.568695 l
h
412.70013 94.076454 m
f
0 J
0 j
1 0 0 -1 0 981 cm
412.70013 886.92352 m
395.13495 880.23151 l
395.06583 893.43134 l
h
412.70013 886.92352 m
S
CM
242.29987 94.968605 m
259.86505 88.27655 l
259.93417 101.47637 l
h
242.29987 94.968605 m
f
1 0 0 -1 0 981 cm
242.29987 886.03137 m
259.86505 892.72345 l
259.93417 879.52362 l
h
242.29987 886.03137 m
S
/Cs2 SC
0 sc
1 0 0 -1 516.5 99.02253 cm
-72.239998 11.080002 m
(42&2,1%2/3)[ 21.120000 16.110000 9.450000 16.110000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
40
20
5
20
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 981 cm
1443.9 885.97748 m
1553.1 885.97748 l
S
0 i
CM
1567.5 95.02253 m
1553.1 100.42253 l
1553.1 89.622528 l
h
1567.5 95.02253 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1567.5 885.97748 m
1553.1 880.57745 l
1553.1 891.37744 l
h
1567.5 885.97748 m
S
CM
1429.5 95.02253 m
1443.9 89.622528 l
1443.9 100.42253 l
h
1429.5 95.02253 m
f
1 0 0 -1 0 981 cm
1429.5 885.97748 m
1443.9 891.37744 l
1443.9 880.57745 l
h
1429.5 885.97748 m
S
/Cs2 SC
0 sc
1 0 0 -1 1633.5 95.02253 cm
-42.779999 11.080002 m
(56&$"/)[ 19.440000 16.110000 9.450000 6.660000 17.220000 0.000000 ] xS
3 w
1 J
1 j
[
3
9
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 981 cm
702 252 m
126 252 l
S
0.69411802 0 0.109804 sc
712 727 m
136 727 l
S
0.69411999 0 0.1098 sc
0 i
1 0 0 -1 100.5 688 cm
-65.279999 -6.8399963 m
(72/8"930)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-37.5 29 m
(:&20&:)[ 15.000000 9.450000 16.110000 9.990000 9.450000 0.000000 ] xS
1 0 0 -1 110.5 212 cm
-65.279999 -6.8399963 m
(72/8"930)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-50.834999 29 m
(;/$:<3:)[ 15.540000 16.680000 6.660000 15.000000 16.680000 16.110000 0.000000 ] xS
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 981 cm
468 90 m
468 594 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 458 924.02429 cm
/F1.1[ 50 0 0 -50 0 0]sf
-57.825001 17.800003 m
(\(\)*+)[ 25.900000 28.700000 34.250000 0.000000 ] xS
1 0 0 -1 179 924.02429 cm
-39.825001 17.800003 m
(!=)[ 43.550000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
208.82602 142.75528 m
440.10104 144.75836 l
S
0 i
CM
457.70038 836.08923 m
440.1582 842.84137 l
440.04388 829.64191 l
h
457.70038 836.08923 m
f
0 J
0 j
1 0 0 -1 0 981 cm
457.70038 144.9108 m
440.1582 138.15862 l
440.04388 151.35812 l
h
457.70038 144.9108 m
S
CM
191.22668 838.39716 m
208.76886 831.64496 l
208.88318 844.84448 l
h
191.22668 838.39716 m
f
1 0 0 -1 0 981 cm
191.22668 142.60286 m
208.76886 149.35504 l
208.88318 136.15553 l
h
191.22668 142.60286 m
S
/Cs2 SC
0 sc
1 0 0 -1 871 857.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(.">>?/$62&$/@)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
756 243 m
756 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 748 773.21143 cm
/F1.1[ 50 0 0 -50 0 0]sf
-57.825001 17.800003 m
(\(\)*-)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1043 237.97746 m
1044 639 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1044 773.21143 cm
-84.699997 17.800003 m
(!*A!B)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1493 90 m
1493 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1485 924.02429 cm
-57.825001 17.800003 m
(\(\)*C)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1781 90 m
1781 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1772 924.02429 cm
-35.599998 17.800003 m
(.=)[ 36.100000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
495.89969 143.86981 m
1465.1003 139.34735 l
S
0 i
CM
1482.7001 841.73474 m
1465.0695 848.25256 l
1465.1311 835.05273 l
h
1482.7001 841.73474 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1482.7001 139.26523 m
1465.0695 132.74742 l
1465.1311 145.94728 l
h
1482.7001 139.26523 m
S
CM
478.2999 837.04803 m
495.93048 830.53027 l
495.8689 843.7301 l
h
478.2999 837.04803 m
f
1 0 0 -1 0 981 cm
478.2999 143.95193 m
495.93048 150.46974 l
495.8689 137.26988 l
h
478.2999 143.95193 m
S
1 J
1 j
0.60000002 i
1520.8999 138.673 m
1753.1001 139.07359 l
S
0 i
CM
1770.7001 841.89606 m
1753.1115 848.52643 l
1753.0886 835.32642 l
h
1770.7001 841.89606 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1770.7001 139.10396 m
1753.1115 132.4736 l
1753.0886 145.67358 l
h
1770.7001 139.10396 m
S
CM
1503.2999 842.35736 m
1520.8885 835.72699 l
1520.9114 848.927 l
h
1503.2999 842.35736 m
f
1 0 0 -1 0 981 cm
1503.2999 138.64264 m
1520.8885 145.27299 l
1520.9114 132.07301 l
h
1503.2999 138.64264 m
S
/Cs2 SC
0 sc
1 0 0 -1 893 699.1109 cm
/F1.1[ 30 0 0 -30 0 0]sf
-90.894997 11.080002 m
(!21D*3@$:&30)[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 0 0 -1 893 614.8891 cm
-75.285004 11.080002 m
(!21D="&$E')[ 26.130000 16.110000 17.790000 11.670000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 0 0 -1 623 506.88907 cm
-33.060001 11.080002 m
(B!*)[ 19.440000 26.130000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1493 594 m
1065.7826 592.10016 l
S
0 i
CM
1051.3827 388.96387 m
1065.7585 383.49988 l
1065.8066 394.29977 l
h
1051.3827 388.96387 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1051.3827 592.03613 m
1065.7585 597.50012 l
1065.8066 586.70026 l
h
1051.3827 592.03613 m
S
/Cs2 SC
0 sc
1 0 0 -1 1276 411.11093 cm
-186.77499 11.080002 m
(B!*D$/9"F38,!21D*3G?3:&)[ 19.440000 26.130000 20.550000 11.670000 6.660000 16.680000 15.000000 17.220000 15.570000 16.110000 17.790000 8.340000 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 0 0 -1 898 339.11093 cm
-73.904999 11.080002 m
(!21D*31%')[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
468 499 m
746.5 499 l
746.5 489.5 765.5 489.5 765.5 499 c
1034.1509 499 l
1034.1509 489.5 1053.1509 489.5 1053.1509 499 c
1471.1 499 l
S
0 i
CM
1485.5 482 m
1471.1 487.39999 l
1471.1 476.60001 l
h
1485.5 482 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1485.5 499 m
1471.1 493.60001 l
1471.1 504.39999 l
h
1485.5 499 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
756 311.86404 m
1021.2846 311.9938 l
S
0 i
CM
1035.6846 668.99915 m
1021.2872 674.40619 l
1021.282 663.6062 l
h
1035.6846 668.99915 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1035.6846 312.00085 m
1021.2872 306.59381 l
1021.282 317.3938 l
h
1035.6846 312.00085 m
S
7 w
1 J
1 j
0.60000002 i
207.9908 744.64587 m
728.10004 745.31842 l
S
0 i
CM
745.70001 235.65883 m
728.10858 242.28159 l
728.09149 229.08159 l
h
745.70001 235.65883 m
f
0 J
0 j
1 0 0 -1 0 981 cm
745.70001 745.34119 m
728.10858 738.71844 l
728.09149 751.9184 l
h
745.70001 745.34119 m
S
CM
190.39081 236.37686 m
207.98227 229.7541 l
207.99933 242.9541 l
h
190.39081 236.37686 m
f
1 0 0 -1 0 981 cm
190.39081 744.62317 m
207.98227 751.24591 l
207.99933 738.0459 l
h
190.39081 744.62317 m
S
1 J
1 j
0.60000002 i
783.90002 744.47296 m
1465.1 744.50562 l
S
0 i
CM
1482.7 236.49356 m
1465.1003 243.09441 l
1465.0997 229.89439 l
h
1482.7 236.49356 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1482.7 744.50647 m
1465.1003 737.90558 l
1465.0997 751.10559 l
h
1482.7 744.50647 m
S
CM
766.29999 236.52791 m
783.89966 229.92706 l
783.90033 243.12706 l
h
766.29999 236.52791 m
f
1 0 0 -1 0 981 cm
766.29999 744.47211 m
783.89966 751.07294 l
783.90033 737.87292 l
h
766.29999 744.47211 m
S
1 J
1 j
0.60000002 i
1520.8994 744.68634 m
1753.1006 746.17969 l
S
0 i
CM
1770.7002 234.70712 m
1753.1431 241.42017 l
1753.0581 228.22044 l
h
1770.7002 234.70712 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1770.7002 746.29291 m
1753.1431 739.57983 l
1753.0581 752.77954 l
h
1770.7002 746.29291 m
S
CM
1503.2998 236.42682 m
1520.8569 229.71378 l
1520.9419 242.9135 l
h
1503.2998 236.42682 m
f
1 0 0 -1 0 981 cm
1503.2998 744.57318 m
1520.8569 751.28625 l
1520.9419 738.08649 l
h
1503.2998 744.57318 m
S
/Cs2 SC
0 sc
1 0 0 -1 880 267.11093 cm
-105.655 11.080002 m
(.">>?/$62&$/@)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1043.4215 406.99896 m
765.5 407.48245 l
765.48346 397.98245 746.48346 398.0155 746.5 407.5155 c
489.89996 407.96188 l
S
0 i
CM
475.5 573.01306 m
489.90936 567.63812 l
489.89056 578.43811 l
h
475.5 573.01306 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
475.5 407.98694 m
489.90936 413.36188 l
489.89056 402.56189 l
h
475.5 407.98694 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
1043.384 391.99405 m
777.89984 391.07574 l
S
0 i
CM
763.49994 589.97406 m
777.88116 584.52429 l
777.91852 595.32422 l
h
763.49994 589.97406 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
763.49994 391.02594 m
777.88116 396.47571 l
777.91852 385.67578 l
h
763.49994 391.02594 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
202.60817 299.91217 m
458.50006 298.90686 l
458.46274 289.40692 477.46262 289.33228 477.49994 298.83221 c
734.10016 297.82413 l
S
0 i
CM
748.50006 683.23242 m
734.07898 688.57581 l
734.1214 677.77588 l
h
748.50006 683.23242 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
748.50006 297.76755 m
734.07898 292.42416 l
734.1214 303.22409 l
h
748.50006 297.76755 m
S
CM
188.20828 681.03125 m
202.62938 675.68787 l
202.58696 686.48779 l
h
188.20828 681.03125 m
f
1 0 0 -1 0 981 cm
188.20828 299.96872 m
202.62938 305.31213 l
202.58696 294.51221 l
h
188.20828 299.96872 m
S
/Cs2 SC
0 sc
1 0 0 -1 614 699.1109 cm
-41.939999 11.080002 m
(47.H)[ 21.120000 21.660000 21.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1043.8828 591.9928 m
777.89948 593.84735 l
S
0 i
CM
763.49982 387.05228 m
777.93713 381.75281 l
777.86182 392.55255 l
h
763.49982 387.05228 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
763.49982 593.94769 m
777.93713 599.24719 l
777.86182 588.44745 l
h
763.49982 593.94769 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
756 667 m
1471.1 667.97028 l
S
0 i
CM
1485.5 313.01019 m
1471.1073 318.42972 l
1471.0927 307.62973 l
h
1485.5 313.01019 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1485.5 667.98981 m
1471.1073 662.57031 l
1471.0927 673.3703 l
h
1485.5 667.98981 m
S
ep
end
%%Trailer
%%EOF
