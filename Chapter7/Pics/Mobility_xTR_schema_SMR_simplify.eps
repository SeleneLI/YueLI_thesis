%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 1702.000000 981.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1702 981
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1702 981
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /t put
dup 39 /y put
dup 40 /x put
dup 41 /T put
dup 42 /R put
dup 43 /one put
dup 44 /space put
dup 45 /two put
dup 46 /C put
dup 47 /n put
dup 48 /r put
dup 49 /p put
dup 50 /a put
dup 51 /e put
dup 52 /D put
dup 53 /A put
dup 54 /c put
dup 55 /H put
dup 56 /d put
dup 57 /v put
dup 58 /s put
dup 59 /fi put
dup 60 /h put
dup 61 /N put
dup 62 /m put
dup 63 /u put
dup 64 /g put
dup 65 /slash put
dup 66 /S put
dup 67 /three put
dup 68 /hyphen put
dup 69 /f put
dup 70 /I put
dup 71 /k put
dup 72 /P put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000000186670676D00000000000000B400000428676C796600000000000004DC00001EE06865616400000000000023BC000000366868656100000000000023F400000024686D74780000000000002418000000A86C6F636100000000000024C0000000566D6178700000000000002518000000207072657000000000000025380000004D14000014004B005A00000011FF3A000B0205000C02CA0011B800002C4BB800095058B101018E59B801FF85B844001DB9000900035F5E2DB800012C2020456944B001602DB800022CB800012A212DB800032C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800042C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800052C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800062C2020456944B001602020457D691844B001602DB800072CB800062A2DB800082C4B20B003265358B0801BB040598A8A20B003265358B0022621B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B80003265358B0032545B8014050582321B8014023211BB003254523212321591B2159442DB800092C4B535845441B2121592DB8000A2C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB8000B2C2020456944B001602DB8000C2CB8000B2A212DB8000D2C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB8000E2C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB8000F2C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB800102C2020456944B001602020457D691844B001602DB800112CB800102A2DB800122C4B20B003265358B0801BB040598A8A20B0032653582321B0C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB800132C4B535845441B2121592DB800142C4BB800095058B101018E59B801FF85B800441DB9000900035F5E2DB800152C2020456944B001602DB800162CB800152A212DB800172C2046B003254652582359208A208A49648A204620686164B004254620686164525823658A592F20B00053586920B000545821B040591B6920B000545821B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546






E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A0079000A0089000A0099000A00A9000A00B9000A00C9000A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E027E192C3B21213B2C19192C3B21213B2C195A20405E3D3E5D402020405D3E3D5E402001022F49321A1A32492F2F49311A1A31492F39624929294962393963492A2A4963000000020043FF3B022D02110018002C00ADB8002E2FBA0018000000032BB8001810B80002D0B8001810B80004D0B800042FB8002E10B8000EDCB8001810B80016D0B800162FB8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8001810B80023D0B800232F00B800012FBA0013002800032BB8001310BA001E000900032BB8001E10303113113311331E0333323E0235342E0223220607233505140E0223222E0235343E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B293D27130205FD36010A171F12082A49623737624B2C272B46FE2648382221364726244637222036450000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E02333526060723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B0009003100190031002900310039003100490031005900310069003100790031008900310099003100A9003100B9003100C90031000D5DB8000BDCB8000010B8002ADCB80015DCB8000B10B8003CDC00BA0036000600032BB8003610BA0025001A00032BB8002510B8000610B80000DCB8002510B8001FDC303137231E0333323E0235342E02272E0335343E0233321E0217332E0323220E0215141E0415140E0223222E02745502243C4E2B274F3F271D2F3D201E3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA00040005


00>] def
/CharStrings 42 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/slash 3 def
/one 4 def
/two 5 def
/three 6 def
/A 7 def
/C 8 def
/D 9 def
/H 10 def
/I 11 def
/M 12 def
/N 13 def
/P 14 def
/R 15 def
/S 16 def
/T 17 def
/a 18 def
/b 19 def
/c 20 def
/d 21 def
/e 22 def
/f 23 def
/g 24 def
/h 25 def
/i 26 def
/k 27 def
/l 28 def
/m 29 def
/n 30 def
/o 31 def
/p 32 def
/r 33 def
/s 34 def
/t 35 def
/u 36 def
/v 37 def
/x 38 def
/y 39 def
/fi 40 def
/uni2B91 41 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94DD8F68E7C9E6CE89571C79E22E977A5B42C931CC2176483889C4D7E8F08AD6A30D32F921F086F068997EEAC13FC5D4DB04433304F20EAF4CDEBFCC059713B591D123A2CB5C04D69A6F57D3F0C7D8146F138B1F7AD227781281AC46E7984398322682323445F251800F0288138BE66971FC3C11421A978F783EFEA3C47000617560E5F8CA1EA5309196DAAA5C22767A5B8C197BF7C86597C3604EA80D5F7DAB020319A1FADEC64A1ADBE349186D1005C4F02AFC2CA9E26784D365E8F18CFDB671ECEF479C6E6512FBF8121B03C5CF564CB76FA3736343F5B59445CE2F12B18C1CAC9117EAD8F85C588D8BCCE5001C2F4FC3D03855E1F3A00725A23CDFE90E157247304344B9A165FB3425C5D2D74883E80EBADC2E720731F358B2F68BC07AA542D7D5E4DCD41C774F9D73847D20A8507378538F3115AB600A142659A8E8B9F1657862C01AF0A9140439041332703491A0B9957B31A1D74B7C2DDDC589328E151063CAA1CF3242C124C4A0A4CEF38863FF152A187B88DCDA1FA546FCC8405B93085FFC6BCB887D5D258E2A926E9C32D8AA3C5047567E6EC8C2255EAFB78A45F0D63DB28F49276350A576A199E4411B4A4BA397AC1BF589985E2F6B5D63567245BACB3D3A3049ABCCC58E5C3C1E2C93A3846089D23BF4B00AB5DDE0756839DF8067E613934EF1C9A6A158D567BF0C52B2943D84C5D8B46D64B3CBE91F8CC0BFC64D772A56728B407C16F37EC26DFCFB38884EE75493A438B45DED1CCC919E45F52F


FD146D9A774530E0E8EC2E6BE142FEA8FEF0ABEC3BD8BE39376C44D6DD4EC5B5F161BEE4E8DA41866EC63FAF3B893D3BAEE447B17F671EDB3B5D44FBF64931319F475352BE153CC49473746642E3B4183C65EF6087D13496DB7A96133B46B6B6D379E6A94845F651163AB884292F3B815C2560B1FBCF9674E995EE10130D6C8BD1BE885C31D7EA4A48DEC308D2E76DE2610C5A067AB55A3F264779F4B0FA60EDF2D24A3CDEE7DB65F55DB0E90248B940A079AF7A61A2B62EF1ABDB3320D9CF81153324AA42FDA0511A213874B13A66B8E6068DA3F53A78C9BEDBA4422423D5C6952752DE83876A21F55CBB43EC5868F92410612EB9FC5707C7131FAB22B333C5694DD8CD6C04528B8892141083FB0AF2DC13D59A711D960054933C11D2DFA5C948904BF66530EBB716C5D95510379256F8E506E8E41FEEA58720D3D5ACD1B506193356AD19D1A4C8366D2B7ABF1BC13AE6050EC2A1D86A314B880F0A3C2A83CB3709F07364753D63704B42D1F5D04455513D6BC3927D4CDDCD2ED630F3FFD641920A41C6856D84D4C7C432E26DE3E20E8A5FFD146BE910F7B9925523BE1B445222CDF38BB277572D6C414996DA3B8A644BAA511F5AC6F9F4D9638123D5BEB3CC67E28D7446BAD01DCA374E76293DEAB2A63E2119B1D89C8048ADCBE58CABDB9975B5158A85215C91264150DC1F0C67764F32602DF9CEAB1011CC3BD2F3A2E0F5DC7ABADEAFE78EE59D1E7279BA77227E673BA068D83B1A6A5FA8DEF1BFD82810F67C9A6F55793C4C41A29D90593573B49596DD2DDCC65C435EAEA4AB844A0BEA68D1335C4865871BBEF585DADF0D6CA15BAAE93A10D47290508D888420E259635107A8615EC864ED78176005A1CAA0478C13E12C250312658F724B21490C9B326D20FDCE99AD5E9B49D08A31003CBB7DABD83CE3B5F56768F395C9F31E0C324A43AB496B65A4B1FFD72092500034E03EBC3B02CF42493A712DA7DCFD0BBB2744B47599EFDC2AB3750FDB69FE4DEEF2CB45499A78F9F7B3B09A8CD54A9E8756379E8318F17F11CF4A535F9D22D05E0CDCBCC8063C6629CA77BF941DE7D07B9263991A5A2008F3EF172B2EC85DEA6269F59179857068969F1D09A30696680173D775A062F95310EE7AE36416E9DF0FBE46FEFF18DE3CD82F0E4578458136D181B8BBA6789960F4EEB3DAFBB985399664BD0D0175549543DB5F36B61C025289CC4C6CFB01E58BE25EF8CF63EFF93D982B0866889D33158A1A783176176C41A366D8F9A1305AE2C793870D36B149D48011BD3DC6683440D565573FC7BE012EF854CFE183D3922934D7D40E1C92D0F75083B6FEA8DFBD6DA56DE59122051B706DD7DD28B054A33039C3FD44D981B5CC5260FF18E163B89E5C2353A7F02C5163991586EBC6AB62E1FD102E642CFB1C40D0D345CB2D96CBDEFBC115AB2A1BD6BA1E26EE
753E2757DB59D2CC8FD525B6903F359B4C5D0AC545E5DD823F83BAB17344000316A5F818CA0032C4D590F90B6E65A9228B13162552FD68FF58A9405EFBA33BD921451A2E3EE53C21C44AD32CC17A5426BDC147F90945B9C5EEDEDAE46B1D04B676BFEEC65C31E4ABF894F072F0B16D46D6224ED7263EC1BB891698F349441EBB30E57EDF7BE3F6ADF9B238E9512B1FC53685ADC21876F549B96A14C1541664CD1EEAAE5802F5464F2126CAF3C75E12322E3E2CED8C084AFEC94E348AF3C5A42B20A8B72E266481D2E18ED1DD7F8B578BC0DAFF47FF17F0DB2D94635C2446A87635B472619DCB4022938DC889E104EC2D0AE870E85837649C5888C1AB64B35DEA5B48D79E3255DE459B7C3061A0C1751E337E5F45716BC5A19C013AF7A30BC81BD4D739386E898A9B8D5B4B7794F1201B4410BB583B636AE95AC14467EB0B4D7E66FDAEB7FE04928342C77EB06504116742E2123680CE3F3129F06307A23D6E67E386C945450A753F845093B07226052A223150231F08BDAD7732EBFD2AAD75EA72C9026B6F032467774BEBEA65855957974A88103D112E1D3088D2B28BDF955B402BF8C4823D290619883DAF0F44536DBCD0C9EEB0D470D5814D3E4DA50312976904EEE6416639997BB0313110C1EAE6C2C4B7C4FCBEDFCEF2C1ED123772F6C91FAD53BB4F81E0B0DBEE4DEE254F44107D294CCB211BC23136921AA8B411B6D7DDC2C1CD30EE41D728460FA4470CE850C3B3041A763228F243925BDDAD878B5E1C7D05684D6E9ED0C396A8AF8061C707BB492617E6CAE591BB412258D4274D9764EE850CECE372E722553E9EE412AE478A9FBA9643E5EA39FC36CC5FA560F78559DA3DDCFC07EE0BBFF2FB7CB42A8A2E448CE9007991478CBD30F52CAB2AF48ADC63F329BCAFEBB71C6125388D69ED3BF742839E22AF49519315F8969544D77D0C519F688C5787EBF683FA968796D6D9E48FD9F0F89E870D5158996FFFAC8698F807B4C661F197A95B323B42F13F9F6C814199A28BA9EDF2F28887E155015810493D800E581B4DE3747A57A8C04747025D3E5584901ACB61EE86D6EE04B249A69BDC4F9D697718F03ABD6E93F7DF6F46348F7B242999B35D02EE594A988DE6E7D69B105EDD796B58270BD6E83EF7A240A0D33FCA4CAC4FFC936237C1E5F38924CF9B661D8CE715AF6FE6BDBC2C10DABFBEBC9F9CD1B61F27157B64C9044FEA52B0C383FF5A7D8615D639CFC94F0EF48FB50A4891C53F452C1665148840184411F9F8E5177583F75582D4E200A3ECB2812795473019DB8E30C96A5627D691AFF274DC8F352E6CEDBD5F83A0A91C9815142DD2E3A7C3B8ADE06AC9ED83715E8AD8F5A047BC6354C53FEC506E26094F2185D059FB6ACA0A8CB7EE09EBBBB85202F641A8D8FC8AFBF486EAC1E8B8A055F1B374152A3E29DF40294906E85EF56763A8
2DA566DEBCFF29A5E9E41EE51810171C8F105977BA0B60DE85223CD6E0C3AA115F5396DCD7BE9A6B5C456B3F9F32F50EC0FB0422D770872CF4BB2AD23C4F7E04B4AF289636D8E2ED9E7EFECB64A0A2114913BAC61129DC0C1A58DC8DF8C17F78B50C3C2A75BB0D90679BFB637B38FD55A1E14871127DA8AE33AC970F5BAE0EF4FB4F454EFE611BCA01D3217A553E75BBE3E2ACE0F7CBFE96C25911BEFCE75AF568DB8E71E6BBECD5FECD5B1E5D16282735FBC6839429C060F8BD06FF07DEDCA99DA93423E6AFA84AFD62ADAE551DA11781E1F2820CBA72DD7EF133B42013C32DDED1267B5F329FE0B06F81CD9E5CAB31CC5D0B025FC39963591DB5F3C3454E6370AFAB115F4BA689EEC34B647C86B14E9DD0DEC380095F5552B53D102FF0509E62785DC0BCB9DC4D6EA1E699D9BE21BF99178573DD23A5E163970787FA58307C61E91C1A2D8BB5F5315F1937BDC86657692F47D7988653994D3F45FA59153D67BA0FE22552C8CC4956FDC46B56A5765989004665AF1ABD7DA29C6F1471F3C4A03109B338EEBCFEDB1D6BE37FB2DAD45F34F69BC0105D0C08557F0548AD4B31E7C1BBF63614E051A9F830DC25443ED74314E2FB7170666F68A21E8815B0276BB088A6A4B54DD2F33CB9F3DB0B5DEB29638B82B2642D2F2DABB2033E89626E53B2324288C974523D959F7B20AC07488936F6C2C11C4DFB491DB1BA6B125FB05FF023DBD64BBA9DB4A2C916B6A387BC9135A2179B3ABC4E72335B3A8E2E51E5B79D1325B0E19526835F2F7285AD0DE4E20575F65052A838466149E84653C44ADE8CF82E7F988FCDE37EC72F468D651BD7AE4148222A198704BB7C6B26993145839807CEED88ED27D78350E54B111EE37F9816A64B18511F1E311122E45E8EF043B3D03BEFB90AF1F7A446728BBCB0185CAF5EC6F5F86B0098C53A042F480735A1A67365708BCF6B8C99246C3CB31598B91E6543FE4B69A8FBA8DF901A4F356AAE31F366BDAFD4F1DCC3F78F40E06CDC4093741593444868715F38C0262AD3BECEF2A2DFE0182D37F303301781EED694AD8D88C3A3335C29E070BBA2843EA6D8B3C911B5127F72B59D9E774830E034421E4CA2441E65777328CE2BBAC0E1200501F96869CDB7F5982D9EB526DBE0B03ED265AE6BA386404A9AAC5C8AC601BB9B4EBB054BA87F4122379DE890AFD80B8E6326CB8F7ABC5B8691B1B054A92F6E36B23C3F17A05F9CB730CFDB989D8C8618E4F4EA1C9CEF0D3FDFB333DB7DB3415C5ED8566E5ACC6DF8238EE8F5BC431C23DDD9BAE4D1F68EB7E26B5829C0E01B90481784F5E179BAD38D54059FB7A93D636623E91D2037C88AA00B03A6945CB8564D3DAE410A9F85243002F9971CCDA0F26AB5511ACE297E5DF46BA7013ED105857E9D26540C5BBAFD18D96B8DBEBD7EA5B5AE6438DCBA6326B1F566BCF7B269B53DBD

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 1702 981 rc
0 981 m
1702 981 l
1702 0 l
0 0 l
h
0 981 m
f
3 w
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 0 981 cm
172 90 m
171 810 l
S
2 w
[
16
8
2
8
] 0 d
0.69411767 0 0.10980392 sc
171.90924 155.34535 m
171.90924 155.34535 99.023598 190.00731 99 207 c
98.982712 219.44914 138.07848 218.12593 158.98677 216.52831 c
S
0 i
CM
168.54033 765.36664 m
158.64641 768.0556 l
159.31793 760.88696 l
h
168.54033 765.36664 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
168.54033 215.63335 m
158.64641 212.94443 l
159.31793 220.11304 l
h
168.54033 215.63335 m
S
/Cs2 SC
0 sc
1 0 0 -1 259 779 cm
/F1.1[ 30 0 0 -30 0 0]sf
-92 -6.8399963 m
(!"#$%$&')[ 26.130000 17.220000 17.790000 6.660000 6.660000 6.660000 9.450000 0.000000 ] xS
-92 29 m
(\(\)*+,&",\(\)*-)[ 15.540000 17.220000 20.550000 16.680000 8.340000 9.450000 17.220000 8.340000 15.540000 17.220000 20.550000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
759.89954 886.12061 m
869.10046 886.83435 l
S
0 i
CM
883.50018 94.071548 m
869.13574 99.565552 l
869.06519 88.765778 l
h
883.50018 94.071548 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
883.50018 886.92847 m
869.13574 881.43445 l
869.06519 892.23419 l
h
883.50018 886.92847 m
S
CM
745.49982 94.973511 m
759.86426 89.479515 l
759.93481 100.27928 l
h
745.49982 94.973511 m
f
1 0 0 -1 0 981 cm
745.49982 886.02649 m
759.86426 891.52051 l
759.93481 880.7207 l
h
745.49982 886.02649 m
S
/Cs2 SC
0 sc
1 0 0 -1 1004.5 99.02253 cm
-90.014999 11.080002 m
(."/&0"%,1%2/3)[ 21.660000 17.220000 16.680000 9.450000 9.450000 17.220000 6.660000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
7 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
250.89961 886.12354 m
386.10037 886.83142 l
S
0 i
CM
403.70013 94.076454 m
386.13495 100.76851 l
386.06583 87.568695 l
h
403.70013 94.076454 m
f
0 J
0 j
1 0 0 -1 0 981 cm
403.70013 886.92352 m
386.13495 880.23151 l
386.06583 893.43134 l
h
403.70013 886.92352 m
S
CM
233.29987 94.968605 m
250.86507 88.27655 l
250.93417 101.47637 l
h
233.29987 94.968605 m
f
1 0 0 -1 0 981 cm
233.29987 886.03137 m
250.86507 892.72345 l
250.93417 879.52362 l
h
233.29987 886.03137 m
S
/Cs2 SC
0 sc
1 0 0 -1 507.5 99.02253 cm
-72.239998 11.080002 m
(42&2,1%2/3)[ 21.120000 16.110000 9.450000 16.110000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
40
20
5
20
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 981 cm
1245.9 885.97748 m
1355.1 885.97748 l
S
0 i
CM
1369.5 95.02253 m
1355.1 100.42253 l
1355.1 89.622528 l
h
1369.5 95.02253 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1369.5 885.97748 m
1355.1 880.57745 l
1355.1 891.37744 l
h
1369.5 885.97748 m
S
CM
1231.5 95.02253 m
1245.9 89.622528 l
1245.9 100.42253 l
h
1231.5 95.02253 m
f
1 0 0 -1 0 981 cm
1231.5 885.97748 m
1245.9 891.37744 l
1245.9 880.57745 l
h
1231.5 885.97748 m
S
/Cs2 SC
0 sc
1 0 0 -1 1435.5 95.02253 cm
-42.779999 11.080002 m
(56&$"/)[ 19.440000 16.110000 9.450000 6.660000 17.220000 0.000000 ] xS
3 w
1 J
1 j
[
3
9
] 0 d
0.60000002 i
/Cs1 SC
0.69411767 0 0.10980392 sc
1 0 0 -1 0 981 cm
693 252 m
117 252 l
S
0.69411802 0 0.109804 sc
703 727 m
127 727 l
S
0.69411999 0 0.1098 sc
0 i
1 0 0 -1 91.5 688 cm
-65.279999 -6.8399963 m
(72/8"930)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-37.5 29 m
(:&20&:)[ 15.000000 9.450000 16.110000 9.990000 9.450000 0.000000 ] xS
1 0 0 -1 101.5 212 cm
-65.279999 -6.8399963 m
(72/8"930)[ 21.660000 16.110000 16.680000 17.790000 17.220000 15.000000 16.110000 0.000000 ] xS
-50.834999 29 m
(;/$:<3:)[ 15.540000 16.680000 6.660000 15.000000 16.680000 16.110000 0.000000 ] xS
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 981 cm
459 90 m
459 594 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 449 924.02429 cm
/F1.1[ 50 0 0 -50 0 0]sf
-57.825001 17.800003 m
(\(\)*+)[ 25.900000 28.700000 34.250000 0.000000 ] xS
1 0 0 -1 170 924.02429 cm
-39.825001 17.800003 m
(!=)[ 43.550000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
199.82602 142.75528 m
431.10104 144.75836 l
S
0 i
CM
448.70038 836.08923 m
431.1582 842.84137 l
431.04388 829.64191 l
h
448.70038 836.08923 m
f
0 J
0 j
1 0 0 -1 0 981 cm
448.70038 144.9108 m
431.1582 138.15862 l
431.04388 151.35812 l
h
448.70038 144.9108 m
S
CM
182.22668 838.39716 m
199.76886 831.64496 l
199.88318 844.84448 l
h
182.22668 838.39716 m
f
1 0 0 -1 0 981 cm
182.22668 142.60286 m
199.76886 149.35504 l
199.88318 136.15553 l
h
182.22668 142.60286 m
S
/Cs2 SC
0 sc
1 0 0 -1 862 857.8891 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(.">>?/$62&$/@)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
747 243 m
747 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 739 773.21143 cm
/F1.1[ 50 0 0 -50 0 0]sf
-57.825001 17.800003 m
(\(\)*-)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1034 237.97746 m
1035 639 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1035 773.21143 cm
-84.699997 17.800003 m
(!*A!B)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1323 90 m
1323 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1315 924.02429 cm
-57.825001 17.800003 m
(\(\)*C)[ 25.900000 28.700000 34.250000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1611 90 m
1611 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1602 924.02429 cm
-35.599998 17.800003 m
(.=)[ 36.100000 0.000000 ] xS
7 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
486.89957 143.84555 m
1295.1005 139.37161 l
S
0 i
CM
1312.7002 841.72583 m
1295.0638 848.22827 l
1295.137 835.0285 l
h
1312.7002 841.72583 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1312.7002 139.27419 m
1295.0638 132.77171 l
1295.137 145.97151 l
h
1312.7002 139.27419 m
S
CM
469.29984 837.05701 m
486.9361 830.55457 l
486.86304 843.75433 l
h
469.29984 837.05701 m
f
1 0 0 -1 0 981 cm
469.29984 143.94298 m
486.9361 150.44545 l
486.86304 137.24565 l
h
469.29984 143.94298 m
S
1 J
1 j
0.60000002 i
1350.8999 138.673 m
1583.1001 139.07359 l
S
0 i
CM
1600.7001 841.89606 m
1583.1115 848.52643 l
1583.0886 835.32642 l
h
1600.7001 841.89606 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1600.7001 139.10396 m
1583.1115 132.4736 l
1583.0886 145.67358 l
h
1600.7001 139.10396 m
S
CM
1333.2999 842.35736 m
1350.8885 835.72699 l
1350.9114 848.927 l
h
1333.2999 842.35736 m
f
1 0 0 -1 0 981 cm
1333.2999 138.64264 m
1350.8885 145.27299 l
1350.9114 132.07301 l
h
1333.2999 138.64264 m
S
/Cs2 SC
0 sc
1 0 0 -1 884 699.1109 cm
/F1.1[ 30 0 0 -30 0 0]sf
-90.894997 11.080002 m
(!21D*3@$:&30)[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 0 0 -1 884 614.8891 cm
-75.285004 11.080002 m
(!21D="&$E')[ 26.130000 16.110000 17.790000 11.670000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 0 0 -1 614 506.88907 cm
-33.060001 11.080002 m
(B!*)[ 19.440000 26.130000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1323 594 m
1056.7822 592.1546 l
S
0 i
CM
1042.3826 388.94522 m
1056.7449 383.44553 l
1056.8197 394.24527 l
h
1042.3826 388.94522 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1042.3826 592.05475 m
1056.7449 597.55444 l
1056.8197 586.7547 l
h
1042.3826 592.05475 m
S
/Cs2 SC
0 sc
1 0 0 -1 1168 411.11093 cm
-80.904999 11.080002 m
(F/9"G3,B!*)[ 7.770000 16.680000 15.000000 17.220000 15.570000 16.110000 8.340000 19.440000 26.130000 0.000000 ] xS
1 0 0 -1 889 339.11093 cm
-73.904999 11.080002 m
(!21D*31%')[ 26.130000 16.110000 17.790000 11.670000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
459 499 m
737.50024 500.93402 l
737.56622 491.43427 756.56573 491.56619 756.49976 501.06598 c
1025.1611 502.93167 l
1025.2271 493.43192 1044.2266 493.56384 1044.1606 503.06363 c
1301.1006 504.84793 l
S
0 i
CM
1315.5001 476.05206 m
1301.1381 481.55194 l
1301.063 470.7522 l
h
1315.5001 476.05206 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1315.5001 504.94794 m
1301.1381 499.44806 l
1301.063 510.2478 l
h
1315.5001 504.94794 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
747 311.86404 m
1012.2846 311.9938 l
S
0 i
CM
1026.6846 668.99915 m
1012.2872 674.40619 l
1012.282 663.6062 l
h
1026.6846 668.99915 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1026.6846 312.00085 m
1012.2872 306.59381 l
1012.282 317.39383 l
h
1026.6846 312.00085 m
S
7 w
1 J
1 j
0.60000002 i
198.9908 744.64587 m
719.10004 745.31842 l
S
0 i
CM
736.70001 235.65883 m
719.10858 242.28159 l
719.09149 229.08159 l
h
736.70001 235.65883 m
f
0 J
0 j
1 0 0 -1 0 981 cm
736.70001 745.34119 m
719.10858 738.71844 l
719.09149 751.9184 l
h
736.70001 745.34119 m
S
CM
181.39081 236.37686 m
198.98227 229.7541 l
198.99933 242.9541 l
h
181.39081 236.37686 m
f
1 0 0 -1 0 981 cm
181.39081 744.62317 m
198.98227 751.24591 l
198.99933 738.0459 l
h
181.39081 744.62317 m
S
1 J
1 j
0.60000002 i
774.90002 744.47333 m
1295.1 744.50525 l
S
0 i
CM
1312.7 236.4937 m
1295.1005 243.09477 l
1295.0996 229.89478 l
h
1312.7 236.4937 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1312.7 744.50629 m
1295.1005 737.90521 l
1295.0996 751.10522 l
h
1312.7 744.50629 m
S
CM
757.29999 236.52777 m
774.8996 229.92668 l
774.90039 243.12669 l
h
757.29999 236.52777 m
f
1 0 0 -1 0 981 cm
757.29999 744.47223 m
774.8996 751.0733 l
774.90039 737.87329 l
h
757.29999 744.47223 m
S
1 J
1 j
0.60000002 i
1350.8994 744.68634 m
1583.1006 746.17969 l
S
0 i
CM
1600.7002 234.70712 m
1583.1431 241.42017 l
1583.0581 228.22044 l
h
1600.7002 234.70712 m
f
0 J
0 j
1 0 0 -1 0 981 cm
1600.7002 746.29291 m
1583.1431 739.57983 l
1583.0581 752.77954 l
h
1600.7002 746.29291 m
S
CM
1333.2998 236.42682 m
1350.8569 229.71378 l
1350.9419 242.9135 l
h
1333.2998 236.42682 m
f
1 0 0 -1 0 981 cm
1333.2998 744.57318 m
1350.8569 751.28625 l
1350.9419 738.08649 l
h
1333.2998 744.57318 m
S
/Cs2 SC
0 sc
1 0 0 -1 871 267.11093 cm
-105.655 11.080002 m
(.">>?/$62&$/@)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
5 w
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1034.4215 406.99896 m
756.5 407.48245 l
756.48346 397.98245 737.48346 398.0155 737.5 407.5155 c
480.89996 407.96191 l
S
0 i
CM
466.5 573.01306 m
480.90936 567.63812 l
480.89056 578.43811 l
h
466.5 573.01306 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
466.5 407.98694 m
480.90936 413.36191 l
480.89056 402.56192 l
h
466.5 407.98694 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
1034.384 391.99405 m
768.89984 391.07574 l
S
0 i
CM
754.49994 589.97406 m
768.88116 584.52429 l
768.91852 595.32422 l
h
754.49994 589.97406 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
754.49994 391.02594 m
768.88116 396.47571 l
768.91852 385.67578 l
h
754.49994 391.02594 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
193.60817 299.91217 m
449.50006 298.90686 l
449.46274 289.40692 468.46262 289.33228 468.49994 298.83221 c
725.10016 297.82413 l
S
0 i
CM
739.50006 683.23242 m
725.07898 688.57581 l
725.1214 677.77588 l
h
739.50006 683.23242 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
739.50006 297.76755 m
725.07898 292.42416 l
725.1214 303.22409 l
h
739.50006 297.76755 m
S
CM
179.20828 681.03125 m
193.62938 675.68787 l
193.58696 686.48779 l
h
179.20828 681.03125 m
f
1 0 0 -1 0 981 cm
179.20828 299.96872 m
193.62938 305.31213 l
193.58696 294.51221 l
h
179.20828 299.96872 m
S
/Cs2 SC
0 sc
1 0 0 -1 605 699.1109 cm
-41.939999 11.080002 m
(47.H)[ 21.120000 21.660000 21.660000 0.000000 ] xS
1 J
1 j
[
20
20
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 981 cm
1034.8828 591.9928 m
768.89948 593.84729 l
S
0 i
CM
754.49982 387.05228 m
768.93713 381.75281 l
768.86182 392.55255 l
h
754.49982 387.05228 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
754.49982 593.94769 m
768.93713 599.24719 l
768.86182 588.44745 l
h
754.49982 593.94769 m
S
1 J
1 j
[
20
20
] 0 d
0.60000002 i
747 667 m
1301.1 667.96198 l
S
0 i
CM
1315.5 313.01303 m
1301.1094 318.43802 l
1301.0907 307.63803 l
h
1315.5 313.01303 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 981 cm
1315.5 667.987 m
1301.1094 662.56201 l
1301.0907 673.362 l
h
1315.5 667.987 m
S
ep
end
%%Trailer
%%EOF
