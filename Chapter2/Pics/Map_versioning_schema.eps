%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 2012.000000 1026.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1036) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2012 1026
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2012 1026
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /o put
dup 35 /n put
dup 36 /t put
dup 37 /r put
dup 38 /l put
dup 39 /space put
dup 40 /p put
dup 41 /a put
dup 42 /e put
dup 43 /D put
dup 44 /I put
dup 45 /T put
dup 46 /R put
dup 47 /M put
dup 48 /slash put
dup 49 /S put
dup 50 /E put
dup 51 /m put
dup 52 /u put
dup 53 /i put
dup 54 /c put
dup 55 /g put
dup 56 /b put
dup 57 /s put
dup 58 /U put
dup 59 /d put
dup 60 /underscore put
dup 61 /N put
dup 62 /f put
dup 63 /y put
dup 64 /q put
dup 65 /h put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








053E05B0064E06B6070207B408060830084A08E4092C09CC0A640AFA0B280BCC0C1E0C6E0CD80D0E0001000000230096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 35 dict dup begin
/.notdef 0 def
/space 1 def
/slash 2 def
/C 3 def
/D 4 def
/E 5 def
/I 6 def
/M 7 def
/N 8 def
/R 9 def
/S 10 def
/T 11 def
/U 12 def
/underscore 13 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/f 19 def
/g 20 def
/h 21 def
/i 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/q 28 def
/r 29 def
/s 30 def
/t 31 def
/u 32 def
/y 33 def
/uni2B91 34 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec




8EDD406AF31BFFE6C5E6C1DDE133307F057D8B70CFD104421122721644CC01377238DAF96C192C841E23E2F147375CB0909045C9CE95FF560D50CBA8EBFAD7A39898767E35A5607AE2F0666E19B3233CDA864A95D5BE30AEF83E26FC30F42EDFFC0E8D759F0A03AAD949FF1BAB8D4027B15CECDC3F65B7432CFD75015C48F61DCF56669AE60EB80B47816498BD23C835CB54F6EF56EA9A4AD06C0AF83FF2B8F0A2F9B9A98DD7EC4F4671AD598F1F9B2994EBF137E47696E79AC0136A69255EBF214E694FA638A41C32ACBD8188D7281397A78707A32ED33CA3F6E4599FC47F858D6D34393196750E11E900269631F0518EDE3849FB35BE6B6DCC13E7D19EAF44A3A9761A3B36987C3DB6B176917D3F558512A9DB414F156071411EF8E8600776019E7ECA76928E93F1185A24A2DCBC7FEEC15EB9A35C7C293A7F6DA1630206659D7B81A55B942774E2AC074C956E3A72C4FAE2C8BEFA5D6C8729E2C440D6BD392BA43D225071ECA7EAAD7E928FCC1D7D801BD61DC82C8DC2637B5F5E3DE2D8E31517ECE070EED2F8C4AD8987023FEFEF2595528D2F746F7F23EA1300F1ABE19F3ED9B7214FA3F310D229440028090C74AFFC706D881018F108EEEA6F054ACBC00A38BD7C4003D806CFA4FE1C4FD8F45DFB6862718AED7C5A582F7A1FA7758C2102128AB671590CB16A3F0299CBA6D256B72FCE4383EBEB67EC52465E1D0F6C7F5559FB698E712D345AA4BC4187BA3EA2E570C15C6E49A17F4F95F6C78D310073F9729F43371A186F62B1ABC98987782CB418BA2CA16EF1F532E0D8B372F4A984FD5B684C4C393B69E2356D4EFFEABD8B92D5CD3C0E72A6C5F2901863323C3F4F39B422ADED1CA81693CC502CF0D7F0D38C82C2A88F34D90CC749CFF1EF85A05E0565C86C0A7D965CC1A6FDA21216755F3469D53FA99AA991D81E8385EC84856936BB0CA431DA99CEE20847A20DB6B0006DDF3411427A46686D4C96F62B63A1D3D13C6199D0571F0299A16E4645E34D7275CC44B2B2737B633241B66CACD7D2F115F3EB8F70AEA5E2A352A22BC447CA062C1D40E26B9B043B5B50D520543380DF7C3EA38CF2BE60983D99663C532254C2B41A168A95DECDB19811C8FF0BD9DC214D88F0BCBD49EE533A809914415300833689A023D0F62CFBC983A82F0AE4D13AA2B9349E97C9A1AC3789C5DE61425E49ABF0D25B4C15B06410A0FDC75368EC136EE55B350F666A496B5ABFF1C2F168536D0D9E51BA292C92AA98061BFF28451454EE7FDEFB27BFAC24509503983A6FC55644906CAB548162A413651367A31C3E1434300551C31F0B857034A3E5A55BDE07AEDCB9D7561E8B7B958692BAC30453E82CB831AE76D60B161DE8F19DA4033B5F12868B0D2B56B641735391BCE0C4CC088F5EB5468EFE86A1C267A4B6EB2C5915CCFE0C94A813AA1F3B4CCF595DFC51

DA6BCB3CC3AC26C0C3659D69DE767ABF2171DF498DA6AC94596F0BB8A66D71BBD30574FDA6D4EA04FA7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 2012 1026 rc
0 1026 m
2012 1026 l
2012 0 l
0 0 l
h
0 1026 m
f
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 0 1026 cm
852.90002 924.02429 m
929.09998 924.02429 l
S
0 i
CM
940.29999 101.97574 m
929.09998 106.17574 l
929.09998 97.775734 l
h
940.29999 101.97574 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
940.29999 924.02429 m
929.09998 919.82428 l
929.09998 928.22424 l
h
940.29999 924.02429 m
S
CM
841.70001 101.97574 m
852.90002 97.775734 l
852.90002 106.17574 l
h
841.70001 101.97574 m
f
1 0 0 -1 0 1026 cm
841.70001 924.02429 m
852.90002 928.22424 l
852.90002 919.82428 l
h
841.70001 924.02429 m
S
/Cs2 SC
0 sc
1 0 0 -1 1040.5 101.97574 cm
/F1.1[ 30 0 0 -30 0 0]sf
-90.014999 11.080002 m
(!"#$%"&'\(&\)#*)[ 21.660000 17.220000 16.680000 9.450000 9.450000 17.220000 6.660000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
492.89999 924.02429 m
569.09998 924.02429 l
S
0 i
CM
580.29999 101.97574 m
569.09998 106.17574 l
569.09998 97.775734 l
h
580.29999 101.97574 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
580.29999 924.02429 m
569.09998 919.82428 l
569.09998 928.22424 l
h
580.29999 924.02429 m
S
CM
481.70001 101.97574 m
492.89999 97.775734 l
492.89999 106.17574 l
h
481.70001 101.97574 m
f
1 0 0 -1 0 1026 cm
481.70001 924.02429 m
492.89999 928.22424 l
492.89999 919.82428 l
h
481.70001 924.02429 m
S
/Cs2 SC
0 sc
1 0 0 -1 662.5 101.97574 cm
-72.239998 11.080002 m
(+\)$\)'\(&\)#*)[ 21.120000 16.110000 9.450000 16.110000 8.340000 17.790000 6.660000 16.110000 16.680000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1467 274.7298 m
1467 651.61279 l
S
1756 118.85574 m
1755 810 l
S
1179 118.85574 m
1179 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 1180 944.20294 cm
/F1.1[ 50 0 0 -50 0 0]sf
-37.950001 17.800003 m
(,-.)[ 12.950000 28.700000 0.000000 ] xS
1 0 0 -1 1472.6819 786.01068 cm
-85.199997 17.800003 m
(/.0/1)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
1 0 0 -1 1757.5 944.20294 cm
-46.25 17.800003 m
(2-.)[ 30.550000 28.700000 0.000000 ] xS
5 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1200.8999 168.37874 m
1734.0311 166.60136 l
S
0 i
CM
1748.431 859.44666 m
1734.0132 864.79858 l
1734.0492 853.99866 l
h
1748.431 859.44666 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
1748.431 166.55336 m
1734.0132 161.20139 l
1734.0492 172.00133 l
h
1748.431 166.55336 m
S
CM
1186.5 857.57324 m
1200.9178 852.22131 l
1200.8818 863.02124 l
h
1186.5 857.57324 m
f
1 0 0 -1 0 1026 cm
1186.5 168.42674 m
1200.9178 173.7787 l
1200.8818 162.97878 l
h
1186.5 168.42674 m
S
/Cs2 SC
0 sc
1 0 0 -1 1467 891.9455 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(!"334#56\)$5#7)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1755.8843 198.85257 m
1755.8843 198.85257 1781.0308 212.74585 1781 234.04645 c
1780.9838 245.25839 1773.9958 255.74748 1767.3801 263.1683 c
S
0 i
CM
1759.2056 755.17444 m
1770.2509 759.76599 l
1764.5083 765.89642 l
h
1759.2056 755.17444 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1759.2056 270.82559 m
1770.2509 266.23401 l
1764.5083 260.10355 l
h
1759.2056 270.82559 m
S
/Cs2 SC
0 sc
1 0 0 -1 1852 800.18695 cm
-63.900002 -6.8399963 m
(+\)$\)8\)9*)[ 21.120000 16.110000 9.450000 16.110000 17.790000 16.110000 15.000000 0.000000 ] xS
-49.455002 29 m
(:\(;\)$*)[ 21.660000 17.790000 17.790000 16.110000 9.450000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1482.8999 306.40277 m
1755.7303 305.24225 l
S
0 i
CM
1471.7 719.54956 m
1482.9177 715.39728 l
1482.882 723.79718 l
h
1471.7 719.54956 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1471.7 306.45041 m
1482.9177 310.60272 l
1482.882 302.20282 l
h
1471.7 306.45041 m
S
/Cs2 SC
0 sc
1 0 0 -1 1621.5 745.44452 cm
-93.059998 11.080002 m
(/\)\(<.*759$*%)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1467 367.84842 m
1740.2686 367.32697 l
S
0 i
CM
1751.4685 658.6944 m
1740.2606 662.87305 l
1740.2766 654.47308 l
h
1751.4685 658.6944 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1751.4685 367.30557 m
1740.2606 363.12695 l
1740.2766 371.52695 l
h
1751.4685 367.30557 m
S
/Cs2 SC
0 sc
1 0 0 -1 1609.5 686.24933 cm
-76.449997 11.080002 m
(/\)\(<="$5>?)[ 26.130000 16.110000 17.790000 15.000000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1755.4408 505.34384 m
1474.4999 506.53619 l
1474.4681 499.03625 1459.4683 499.09991 1459.5001 506.59985 c
1194.8999 507.72287 l
S
0 i
CM
1183.7 518.22961 m
1194.9177 514.07715 l
1194.8821 522.47711 l
h
1183.7 518.22961 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1183.7 507.77039 m
1194.9177 511.92282 l
1194.8821 503.52289 l
h
1183.7 507.77039 m
S
/Cs2 SC
0 sc
1 0 0 -1 1524.5 546.57971 cm
/F1.1[ 40 0 0 -40 0 0]sf
-44.080002 13.940002 m
(1/.)[ 25.920000 34.840000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1179 588.80933 m
1451.1006 586.48975 l
S
0 i
CM
1462.3002 439.60571 m
1451.0648 443.71008 l
1451.1364 435.31039 l
h
1462.3002 439.60571 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1462.3002 586.39429 m
1451.0648 582.28992 l
1451.1364 590.68958 l
h
1462.3002 586.39429 m
S
/Cs2 SC
0 sc
1 0 0 -1 1330.5 469.24341 cm
/F1.1[ 30 0 0 -30 0 0]sf
-93.360001 11.080002 m
(/\)\(<.*@4*9$)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1467 586.35419 m
1739.4255 585.19507 l
S
0 i
CM
1750.6254 440.8526 m
1739.4076 445.00491 l
1739.4434 436.60501 l
h
1750.6254 440.8526 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1750.6254 585.1474 m
1739.4076 580.99506 l
1739.4434 589.39502 l
h
1750.6254 585.1474 m
S
/Cs2 SC
0 sc
1 0 0 -1 1612.5 469.24341 cm
-93.360001 11.080002 m
(/\)\(<.*@4*9$)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1755.1851 682.10876 m
1194.8999 684.49146 l
S
0 i
CM
1183.7 341.46094 m
1194.9177 337.30859 l
1194.882 345.70853 l
h
1183.7 341.46094 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1183.7 684.53906 m
1194.9177 688.69141 l
1194.882 680.2915 l
h
1183.7 684.53906 m
S
/Cs2 SC
0 sc
1 0 0 -1 1608.5 376.90405 cm
-75.07 11.080002 m
(/\)\(<.*\(&?)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
5 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1200.8999 769.94055 m
1734.0562 768.45673 l
S
0 i
CM
1748.4561 257.58334 m
1734.0411 262.94324 l
1734.0712 252.14328 l
h
1748.4561 257.58334 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
1748.4561 768.41669 m
1734.0411 763.05676 l
1734.0712 773.85669 l
h
1748.4561 768.41669 m
S
CM
1186.5 256.01938 m
1200.9149 250.65947 l
1200.8849 261.45941 l
h
1186.5 256.01938 m
f
1 0 0 -1 0 1026 cm
1186.5 769.98065 m
1200.9149 775.34052 l
1200.8849 764.54059 l
h
1186.5 769.98065 m
S
/Cs2 SC
0 sc
1 0 0 -1 1467 287.19424 cm
-105.655 11.080002 m
(!"334#56\)$5#7)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1248.9 924.02429 m
1325.1 924.02429 l
S
0 i
CM
1336.3 101.97574 m
1325.1 106.17574 l
1325.1 97.775734 l
h
1336.3 101.97574 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1336.3 924.02429 m
1325.1 919.82428 l
1325.1 928.22424 l
h
1336.3 924.02429 m
S
CM
1237.7 101.97574 m
1248.9 97.775734 l
1248.9 106.17574 l
h
1237.7 101.97574 m
f
1 0 0 -1 0 1026 cm
1237.7 924.02429 m
1248.9 928.22424 l
1248.9 919.82428 l
h
1237.7 924.02429 m
S
/Cs2 SC
0 sc
1 0 0 -1 1464 101.97574 cm
-117.525 11.080002 m
(+\)$\)8\)9*':\(;\)$*)[ 21.120000 16.110000 9.450000 16.110000 17.790000 16.110000 15.000000 16.110000 8.340000 21.660000 17.790000 17.790000 16.110000 9.450000 0.000000 ] xS
5 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1734.0315 420.77332 m
1476.4998 422.41721 l
1476.4392 412.91739 1457.4396 413.0387 1457.5002 422.53848 c
1179 424.31622 l
S
0 i
CM
1748.4312 605.3186 m
1733.9969 610.62659 l
1734.0659 599.82678 l
h
1748.4312 605.3186 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
1748.4312 420.6814 m
1733.9969 415.37344 l
1734.0659 426.17322 l
h
1748.4312 420.6814 m
S
/Cs2 SC
0 sc
1 0 0 -1 1348 634.96405 cm
-105.655 11.080002 m
(!"334#56\)$5#7)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
1755.1088 424.2897 m
1755.1088 424.2897 1780.9014 433.94736 1781 453.77768 c
1781.053 464.44421 1773.6587 475.35602 1766.8134 483.16312 c
S
0 i
CM
1758.8146 535.00269 m
1769.7549 539.83893 l
1763.8772 545.84009 l
h
1758.8146 535.00269 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
1758.8146 490.99734 m
1769.7549 486.16104 l
1763.8772 480.15994 l
h
1758.8146 490.99734 m
S
/Cs2 SC
0 sc
1 0 0 -1 1888 568.17798 cm
-78.955002 -24.759995 m
(.*3"$*',-.')[ 20.550000 16.110000 25.590000 17.220000 9.450000 16.110000 8.340000 7.770000 17.220000 20.550000 0.000000 ] xS
-95.650002 11.080002 m
(9A"4&;'4\(;\)$*')[ 15.000000 16.680000 17.220000 16.680000 6.660000 17.790000 8.340000 16.680000 17.790000 17.790000 16.110000 9.450000 16.110000 0.000000 ] xS
-59.785 46.919998 m
(5$9'6\)6A*)[ 6.660000 9.450000 15.000000 8.340000 16.110000 16.110000 16.110000 16.680000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
513 274.7298 m
513 651.61279 l
S
802 118.85574 m
801 810 l
S
225 118.85574 m
225 810 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 226 944.20294 cm
/F1.1[ 50 0 0 -50 0 0]sf
-37.950001 17.800003 m
(,-.)[ 12.950000 28.700000 0.000000 ] xS
1 0 0 -1 518.68188 786.01068 cm
-85.199997 17.800003 m
(/.0/1)[ 43.550000 34.250000 16.650000 43.550000 0.000000 ] xS
1 0 0 -1 803.5 944.20294 cm
-46.25 17.800003 m
(2-.)[ 30.550000 28.700000 0.000000 ] xS
5 w
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
246.89987 168.37874 m
780.03113 166.60136 l
S
0 i
CM
794.43109 859.44666 m
780.01312 864.79858 l
780.04913 853.99866 l
h
794.43109 859.44666 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
794.43109 166.55336 m
780.01312 161.20139 l
780.04913 172.00133 l
h
794.43109 166.55336 m
S
CM
232.49995 857.57324 m
246.91788 852.22131 l
246.88188 863.02124 l
h
232.49995 857.57324 m
f
1 0 0 -1 0 1026 cm
232.49995 168.42674 m
246.91788 173.7787 l
246.88188 162.97878 l
h
232.49995 168.42674 m
S
/Cs2 SC
0 sc
1 0 0 -1 513 891.9455 cm
/F1.1[ 30 0 0 -30 0 0]sf
-105.655 11.080002 m
(!"334#56\)$5#7)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
801.88428 198.85257 m
801.88428 198.85257 827.03082 212.74585 827 234.04645 c
826.98376 245.25839 819.99585 255.74748 813.38007 263.1683 c
S
0 i
CM
805.20563 755.17444 m
816.25085 759.76599 l
810.50824 765.89642 l
h
805.20563 755.17444 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
805.20563 270.82559 m
816.25085 266.23401 l
810.50824 260.10355 l
h
805.20563 270.82559 m
S
/Cs2 SC
0 sc
1 0 0 -1 879 812.75189 cm
-63.900002 -6.8399963 m
(+\)$\)8\)9*)[ 21.120000 16.110000 9.450000 16.110000 17.790000 16.110000 15.000000 0.000000 ] xS
-49.455002 29 m
(:\(;\)$*)[ 21.660000 17.790000 17.790000 16.110000 9.450000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
528.89984 306.40277 m
801.73035 305.24228 l
S
0 i
CM
517.69995 719.54956 m
528.91772 715.39728 l
528.88202 723.79718 l
h
517.69995 719.54956 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
517.69995 306.45041 m
528.91772 310.60272 l
528.88202 302.20282 l
h
517.69995 306.45041 m
S
/Cs2 SC
0 sc
1 0 0 -1 667.5 745.44452 cm
-93.059998 11.080002 m
(/\)\(<.*759$*%)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.220000 6.660000 15.000000 9.450000 16.110000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
513 367.84842 m
786.26855 367.32697 l
S
0 i
CM
797.46857 658.6944 m
786.26056 662.87305 l
786.27661 654.47308 l
h
797.46857 658.6944 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
797.46857 367.30557 m
786.26056 363.12695 l
786.27661 371.52695 l
h
797.46857 367.30557 m
S
/Cs2 SC
0 sc
1 0 0 -1 655.5 686.24933 cm
-76.449997 11.080002 m
(/\)\(<="$5>?)[ 26.130000 16.110000 17.790000 15.000000 21.660000 17.220000 9.450000 6.660000 8.880000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
225 588.80933 m
497.10059 586.48975 l
S
0 i
CM
508.30017 439.60571 m
497.06479 443.71008 l
497.13638 435.31039 l
h
508.30017 439.60571 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
508.30017 586.39429 m
497.06479 582.28992 l
497.13638 590.68958 l
h
508.30017 586.39429 m
S
/Cs2 SC
0 sc
1 0 0 -1 376.5 469.24341 cm
-93.360001 11.080002 m
(/\)\(<.*@4*9$)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
513 586.35419 m
785.42554 585.19501 l
S
0 i
CM
796.62543 440.85263 m
785.40765 445.00491 l
785.44336 436.60501 l
h
796.62543 440.85263 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
796.62543 585.1474 m
785.40765 580.99506 l
785.44336 589.39502 l
h
796.62543 585.1474 m
S
/Cs2 SC
0 sc
1 0 0 -1 658.5 469.24341 cm
-93.360001 11.080002 m
(/\)\(<.*@4*9$)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.790000 16.680000 16.110000 15.000000 0.000000 ] xS
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
801.18506 682.10876 m
240.89986 684.49146 l
S
0 i
CM
229.69995 341.46094 m
240.91772 337.30859 l
240.88199 345.70853 l
h
229.69995 341.46094 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
229.69995 684.53906 m
240.91772 688.69141 l
240.88199 680.2915 l
h
229.69995 684.53906 m
S
/Cs2 SC
0 sc
1 0 0 -1 654.5 376.90405 cm
-75.07 11.080002 m
(/\)\(<.*\(&?)[ 26.130000 16.110000 17.790000 15.000000 20.550000 16.110000 17.790000 6.660000 0.000000 ] xS
5 w
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
246.89992 769.94055 m
780.05609 768.45673 l
S
0 i
CM
794.45605 257.58334 m
780.04108 262.94324 l
780.07117 252.14328 l
h
794.45605 257.58334 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
794.45605 768.41669 m
780.04108 763.05676 l
780.07117 773.85669 l
h
794.45605 768.41669 m
S
CM
232.49997 256.01938 m
246.91495 250.65947 l
246.88489 261.45941 l
h
232.49997 256.01938 m
f
1 0 0 -1 0 1026 cm
232.49997 769.98065 m
246.91495 775.34052 l
246.88489 764.54059 l
h
232.49997 769.98065 m
S
/Cs2 SC
0 sc
1 0 0 -1 513 287.19424 cm
-105.655 11.080002 m
(!"334#56\)$5#7)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
246.8998 454.91202 m
503.50009 453.81979 l
503.45966 444.31989 522.45947 444.23898 522.49994 453.73892 c
801.51721 452.55127 l
S
0 i
CM
232.49994 571.02667 m
246.92279 565.68805 l
246.87682 576.48792 l
h
232.49994 571.02667 m
f
0 J
0 j
1 0 0 -1 0 1026 cm
232.49994 454.97333 m
246.92279 460.31198 l
246.87682 449.51205 l
h
232.49994 454.97333 m
S
/Cs2 SC
0 sc
1 0 0 -1 398 608.91296 cm
-105.655 11.080002 m
(!"334#56\)$5#7)[ 21.660000 17.220000 25.590000 25.590000 16.680000 16.680000 6.660000 16.110000 16.110000 9.450000 6.660000 16.680000 0.000000 ] xS
3 w
1 J
1 j
[
12
12
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 0 1026 cm
225 476.59915 m
225 476.59915 189 493.58768 189 520.06592 c
189 536.04083 202.10384 550.93774 212.49988 560.24268 c
S
0 i
CM
221.30386 458.84204 m
215.09039 469.06323 l
209.9017 462.4574 l
h
221.30386 458.84204 m
f
0 J
0 j
[] 0 d
1 0 0 -1 0 1026 cm
221.30386 567.15796 m
215.09039 556.93677 l
209.9017 563.5426 l
h
221.30386 567.15796 m
S
/Cs2 SC
0 sc
1 0 0 -1 119 509.97842 cm
-84.735001 -24.759995 m
(.*3"$*'2-.')[ 20.550000 16.110000 25.590000 17.220000 9.450000 16.110000 8.340000 18.330000 17.220000 20.550000 0.000000 ] xS
-55.860001 11.080002 m
(4\(;\)$*;')[ 16.680000 17.790000 17.790000 16.110000 9.450000 16.110000 17.790000 0.000000 ] xS
-81.959999 46.919998 m
(5$9';\)$\)8\)9*)[ 6.660000 9.450000 15.000000 8.340000 17.790000 16.110000 9.450000 16.110000 17.790000 16.110000 15.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
